{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.6", "generated_at": "2025-06-18T01:37:25.273454Z", "invocation_id": "7b0ac06c-66b2-40fc-80a9-d80ace88de6b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:24.947087Z", "completed_at": "2025-06-18T01:37:24.951825Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:24.952032Z", "completed_at": "2025-06-18T01:37:24.952034Z"}], "thread_id": "main", "execution_time": 0.004947, "adapter_response": {}, "message": "meu_projeto_dbt_riocard.on-run-start.0 passed", "failures": 0, "unique_id": "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-start-0", "compiled": true, "compiled_code": "", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:24.959995Z", "completed_at": "2025-06-18T01:37:24.962860Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:24.975921Z", "completed_at": "2025-06-18T01:37:25.027961Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07359194755554199, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.bronze_leads", "compiled": true, "compiled_code": "-- models/bronze/bronze_leads.sql\n-- Camada Bronze: Dados brutos de leads do CRM\n\n\n\n-- Bronze: Dados brutos de leads diretamente do source (replicado via Airbyte CDC)\n-- Prospects de vendas com informa\u00e7\u00f5es de qualifica\u00e7\u00e3o\nSELECT \n    id,\n    nome,\n    email,\n    telefone,\n    empresa,\n    cargo,\n    fonte,\n    campanha_id,\n    score,\n    status,\n    interesse,\n    orcamento_estimado,\n    data_contato,\n    data_conversao,\n    observacoes,\n    tags,\n    ultima_atividade,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM \"db_source\".\"public\".\"leads\"\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: lead deve ter nome", "relation_name": "\"db_source\".\"public_bronze\".\"bronze_leads\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:24.957941Z", "completed_at": "2025-06-18T01:37:24.969184Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:24.978082Z", "completed_at": "2025-06-18T01:37:25.028408Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07416510581970215, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.bronze_itens_pedidos", "compiled": true, "compiled_code": "-- bronze_itens_pedidos.sql\n\n\n\nSELECT\n    id,\n    pedido_id,\n    produto_id,\n    quantidade,\n    preco_unitario,\n    desconto_item,\n    valor_total,\n    observacoes,\n    updated_at,\n    created_by,\n    version\nFROM \"db_source\".\"public\".\"itens_pedido\"", "relation_name": "\"db_source\".\"public_bronze\".\"bronze_itens_pedidos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:24.961153Z", "completed_at": "2025-06-18T01:37:24.969052Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:24.977121Z", "completed_at": "2025-06-18T01:37:25.028817Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07407999038696289, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.bronze_pedidos", "compiled": true, "compiled_code": "-- models/bronze/bronze_pedidos.sql\n\n-- Seleciona todos os dados da tabela de pedidos da fonte\n-- Esta \u00e9 uma vis\u00e3o simples dos dados brutos, sem transforma\u00e7\u00f5es complexas ainda.\n\n\n\n-- Camada Bronze: Dados brutos de pedidos com schema atualizado\n\n-- Bronze: Dados brutos de pedidos diretamente do source (replicado via Airbyte CDC)\n-- Nova estrutura empresarial com campos completos\nSELECT \n    id,\n    cliente_id,\n    numero_pedido,\n    data_pedido,\n    status,\n    valor_bruto,\n    desconto,\n    valor_liquido,\n    metodo_pagamento,\n    canal_venda,\n    observacoes,\n    data_entrega_prevista,\n    data_entrega_real,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM \"db_source\".\"public\".\"pedidos\"\nWHERE valor_bruto > 0  -- Valida\u00e7\u00e3o b\u00e1sica: pedidos devem ter valor positivo", "relation_name": "\"db_source\".\"public_bronze\".\"bronze_pedidos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:24.956535Z", "completed_at": "2025-06-18T01:37:24.962711Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:24.963024Z", "completed_at": "2025-06-18T01:37:25.029221Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07457399368286133, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.bronze_clientes", "compiled": true, "compiled_code": "-- models/bronze/bronze_clientes.sql\n\n-- Seleciona todos os dados da tabela de clientes da fonte\n-- Esta \u00e9 uma vis\u00e3o simples dos dados brutos, sem transforma\u00e7\u00f5es complexas ainda.\n\n\n\n-- Camada Bronze: Dados brutos de clientes com schema atualizado\n\n-- Bronze: Dados brutos de clientes diretamente do source (replicado via Airbyte CDC)\n-- Inclui todas as colunas da nova estrutura empresarial\nSELECT \n    id,\n    nome,\n    email,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    data_cadastro,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM \"db_source\".\"public\".\"clientes\"\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: nome obrigat\u00f3rio", "relation_name": "\"db_source\".\"public_bronze\".\"bronze_clientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.034725Z", "completed_at": "2025-06-18T01:37:25.044292Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.044677Z", "completed_at": "2025-06-18T01:37:25.113429Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.08053779602050781, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.bronze_produtos", "compiled": true, "compiled_code": "-- models/bronze/bronze_produtos.sql\n-- Camada Bronze: Dados brutos de produtos do e-commerce\n\n\n\n-- Bronze: Dados brutos de produtos diretamente do source (replicado via Airbyte CDC)\n-- Cat\u00e1logo completo de produtos com informa\u00e7\u00f5es comerciais\nSELECT \n    id,\n    codigo_produto,\n    nome,\n    categoria,\n    subcategoria,\n    marca,\n    preco_custo,\n    preco_venda,\n    margem_lucro,\n    estoque_atual,\n    estoque_minimo,\n    ativo,\n    peso,\n    dimensoes,\n    descricao,\n    tags,\n    data_lancamento,\n    fornecedor_id,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM \"db_source\".\"public\".\"produtos\"\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: produto deve ter nome", "relation_name": "\"db_source\".\"public_bronze\".\"bronze_produtos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.038083Z", "completed_at": "2025-06-18T01:37:25.045945Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.064595Z", "completed_at": "2025-06-18T01:37:25.117666Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08553004264831543, "adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "message": "SELECT 0", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.silver_pedidos", "compiled": true, "compiled_code": "-- models/silver/silver_pedidos.sql\n\n-- Este modelo transforma os dados brutos dos pedidos da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e c\u00e1lculos.\n\n\n\nWITH bronze_pedidos AS (\n    SELECT\n        id AS pedido_id_origem,\n        cliente_id AS cliente_id_origem,\n        numero_pedido,\n        data_pedido,\n        status,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        metodo_pagamento,\n        canal_venda,\n        observacoes,\n        data_entrega_prevista,\n        data_entrega_real,\n        updated_at\n    FROM\n        \"db_source\".\"public_bronze\".\"bronze_pedidos\"\n)\n\nSELECT\n    p.pedido_id_origem,\n    p.cliente_id_origem,\n    TRIM(p.numero_pedido) AS numero_pedido_clean,\n    p.status,\n    CAST(p.valor_bruto AS DECIMAL(18, 2)) AS valor_bruto_decimal,\n    CAST(p.desconto AS DECIMAL(18, 2)) AS desconto_decimal,\n    CAST(p.valor_liquido AS DECIMAL(18, 2)) AS valor_liquido_decimal,\n    p.metodo_pagamento,\n    p.canal_venda,\n    p.observacoes,\n    CAST(p.data_pedido AS TIMESTAMP) AS data_pedido_ts,\n    p.data_entrega_prevista,\n    p.data_entrega_real,\n    CAST(p.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    EXTRACT(YEAR FROM CAST(p.data_pedido AS TIMESTAMP)) AS ano_pedido,\n    EXTRACT(MONTH FROM CAST(p.data_pedido AS TIMESTAMP)) AS mes_pedido,\n    EXTRACT(DAY FROM CAST(p.data_pedido AS TIMESTAMP)) AS dia_pedido,\n    -- C\u00e1lculos derivados\n    CASE \n        WHEN p.valor_bruto > 0 \n        THEN (p.desconto / p.valor_bruto * 100)\n        ELSE 0 \n    END AS percentual_desconto,\n    CASE \n        WHEN p.data_entrega_real IS NOT NULL AND p.data_entrega_prevista IS NOT NULL\n        THEN p.data_entrega_real - p.data_entrega_prevista\n        ELSE NULL\n    END AS atraso_entrega_dias\nFROM\n    bronze_pedidos p\nWHERE\n    p.valor_bruto > 0 -- Garante dados v\u00e1lidos\n\n-- Adicionar aqui mais transforma\u00e7\u00f5es conforme necess\u00e1rio:\n-- - Categoriza\u00e7\u00e3o de produtos\n-- - Jun\u00e7\u00e3o com tabela de clientes para obter informa\u00e7\u00f5es do cliente no mesmo modelo (se fizer sentido)\n-- - Tratamento de devolu\u00e7\u00f5es ou cancelamentos (se aplic\u00e1vel)", "relation_name": "\"db_source\".\"public_silver\".\"silver_pedidos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.036852Z", "completed_at": "2025-06-18T01:37:25.044473Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.046075Z", "completed_at": "2025-06-18T01:37:25.120284Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08717894554138184, "adapter_response": {"_message": "SELECT 3", "code": "SELECT", "rows_affected": 3}, "message": "SELECT 3", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.silver_leads", "compiled": true, "compiled_code": "-- models/silver/silver_leads.sql\n\n-- Este modelo transforma os dados brutos dos leads da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e scoring para CRM.\n\n\n\nWITH bronze_leads AS (\n    SELECT\n        id AS lead_id_origem,\n        nome,\n        email,\n        telefone,\n        empresa,\n        cargo,\n        fonte,\n        campanha_id,\n        score,\n        status,\n        interesse,\n        orcamento_estimado,\n        data_contato,\n        data_conversao,\n        observacoes,\n        tags,\n        ultima_atividade,\n        updated_at\n    FROM\n        \"db_source\".\"public_bronze\".\"bronze_leads\"\n)\n\nSELECT\n    l.lead_id_origem,\n    INITCAP(TRIM(l.nome)) AS nome_lead_clean,\n    LOWER(TRIM(l.email)) AS email_lead_clean,\n    l.telefone,\n    INITCAP(TRIM(l.empresa)) AS empresa_clean,\n    INITCAP(TRIM(l.cargo)) AS cargo_clean,\n    UPPER(TRIM(l.fonte)) AS fonte_padronizada,\n    l.campanha_id,\n    l.score,\n    UPPER(TRIM(l.status)) AS status_padronizado,\n    UPPER(TRIM(l.interesse)) AS interesse_padronizado,\n    CAST(l.orcamento_estimado AS DECIMAL(18, 2)) AS orcamento_estimado_decimal,\n    CAST(l.data_contato AS DATE) AS data_contato_clean,\n    CAST(l.data_conversao AS DATE) AS data_conversao_clean,\n    l.observacoes,\n    l.tags,\n    CAST(l.ultima_atividade AS TIMESTAMP) AS ultima_atividade_ts,\n    CAST(l.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    CASE \n        WHEN l.score >= 80 THEN 'Lead Quente'\n        WHEN l.score >= 50 THEN 'Lead Morno'\n        WHEN l.score > 0 THEN 'Lead Frio'\n        ELSE 'Sem Score'\n    END AS categoria_score,\n    CASE \n        WHEN l.orcamento_estimado >= 50000 THEN 'Alto Valor'\n        WHEN l.orcamento_estimado >= 10000 THEN 'M\u00e9dio Valor'\n        WHEN l.orcamento_estimado > 0 THEN 'Baixo Valor'\n        ELSE 'Valor N\u00e3o Informado'\n    END AS categoria_orcamento,\n    CASE \n        WHEN l.data_conversao IS NOT NULL THEN 'Convertido'\n        WHEN l.status = 'QUALIFICADO' THEN 'Qualificado'\n        WHEN l.status = 'NOVO' THEN 'Novo'\n        ELSE 'Em Processo'\n    END AS fase_funil,\n    CASE \n        WHEN l.ultima_atividade >= CURRENT_TIMESTAMP - INTERVAL '7 days' THEN 'Ativo'\n        WHEN l.ultima_atividade >= CURRENT_TIMESTAMP - INTERVAL '30 days' THEN 'Inativo Recente'\n        ELSE 'Inativo'\n    END AS status_atividade,\n    SUBSTRING(l.email FROM POSITION('@' IN l.email) + 1) AS dominio_email_lead\nFROM\n    bronze_leads l\nWHERE\n    l.nome IS NOT NULL \n    AND l.email IS NOT NULL", "relation_name": "\"db_source\".\"public_silver\".\"silver_leads\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.039236Z", "completed_at": "2025-06-18T01:37:25.045804Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.053786Z", "completed_at": "2025-06-18T01:37:25.144510Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11078929901123047, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.silver_pedidos_incremental", "compiled": true, "compiled_code": "-- Modelo Incremental Avan\u00e7ado para Pedidos\n-- Demonstra capacidades de merge inteligente e detec\u00e7\u00e3o de mudan\u00e7as\n\n\n\nWITH source_data AS (\n    SELECT \n        id as pedido_id,\n        cliente_id,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        status,\n        data_pedido,\n        updated_at,\n        -- Gerar hash para detectar mudan\u00e7as nos dados\n        \n    MD5(CONCAT(\n        \n            COALESCE(status::text, ''),\n            COALESCE(valor_liquido::text, ''),\n            COALESCE(desconto::text, '')\n    ))\n as row_hash,\n        -- Adicionar colunas de auditoria\n        \n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '7b0ac06c-66b2-40fc-80a9-d80ace88de6b' as dbt_run_id,\n    'system' as dbt_created_by\n\n    FROM \"db_source\".\"public_bronze\".\"bronze_pedidos\"\n    \n    \n        -- Estrat\u00e9gia h\u00edbrida: novos registros + registros modificados\n        WHERE updated_at > (SELECT MAX(updated_at) FROM \"db_source\".\"public_silver\".\"silver_pedidos_incremental\")\n           OR id IN (\n               -- Detectar registros que mudaram comparando hash\n               SELECT DISTINCT b.id\n               FROM \"db_source\".\"public_bronze\".\"bronze_pedidos\" b\n               INNER JOIN \"db_source\".\"public_silver\".\"silver_pedidos_incremental\" t ON b.id = t.pedido_id\n               WHERE \n    MD5(CONCAT(\n        \n            COALESCE(b.status::text, ''),\n            COALESCE(b.valor_liquido::text, ''),\n            COALESCE(b.desconto::text, '')\n    ))\n != t.row_hash\n           )\n    \n),\n\nenriched_data AS (\n    SELECT \n        s.*,\n        -- Enriquecimentos e valida\u00e7\u00f5es\n        CASE \n            WHEN valor_liquido <= 0 THEN 'ERRO: Valor inv\u00e1lido'\n            WHEN status NOT IN ('pendente', 'confirmado', 'enviado', 'entregue', 'cancelado') \n            THEN 'AVISO: Status desconhecido'\n            ELSE 'OK'\n        END as data_quality_flag,\n        \n        -- Categoriza\u00e7\u00e3o de valor\n        \n    CASE \n        WHEN valor_liquido >= 10000 THEN 'VIP'\n        WHEN valor_liquido >= 5000 THEN 'Premium'\n        WHEN valor_liquido >= 1000 THEN 'Regular'\n        ELSE 'B\u00e1sico'\n    END\n as categoria_valor,\n        \n        -- M\u00e9tricas derivadas\n        valor_liquido / NULLIF(1, 0) as valor_liquido_unitario,\n        \n        -- Flags de neg\u00f3cio\n        CASE WHEN valor_liquido > 1000 THEN true ELSE false END as is_high_value,\n        CASE WHEN data_pedido = CURRENT_DATE THEN true ELSE false END as is_today\n        \n    FROM source_data s\n)\n\nSELECT * FROM enriched_data\n\n-- Adicionar coment\u00e1rio sobre a estrat\u00e9gia incremental\n-- Este modelo usa uma abordagem h\u00edbrida que:\n-- 1. Captura novos registros baseado em updated_at\n-- 2. Detecta mudan\u00e7as em registros existentes usando hash\n-- 3. Aplica merge inteligente apenas nas colunas que podem mudar\n-- 4. Inclui valida\u00e7\u00f5es de qualidade de dados em tempo real", "relation_name": "\"db_source\".\"public_silver\".\"silver_pedidos_incremental\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.122273Z", "completed_at": "2025-06-18T01:37:25.129322Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.132528Z", "completed_at": "2025-06-18T01:37:25.170600Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0508270263671875, "adapter_response": {"_message": "SELECT 13", "code": "SELECT", "rows_affected": 13}, "message": "SELECT 13", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.dim_clientes", "compiled": true, "compiled_code": "-- models/silver/dim_clientes.sql\n-- Este modelo cria a dimens\u00e3o de clientes, limpando e transformando os dados de bronze_clientes.\n\n\n\n-- Silver: Dimens\u00e3o de clientes limpa e enriquecida\n-- Estrutura empresarial completa\n\nSELECT\n    id as cliente_id,\n    nome,\n    LOWER(TRIM(email)) as email_limpo,\n    email as email_original,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    data_cadastro,\n    updated_at,\n    CASE \n        WHEN data_cadastro >= CURRENT_DATE - INTERVAL '30 days' THEN 'Novo'\n        WHEN data_cadastro >= CURRENT_DATE - INTERVAL '365 days' THEN 'Recente'\n        ELSE 'Antigo'\n    END as categoria_cliente,\n    CASE \n        WHEN email LIKE '%@gmail.com' THEN 'Gmail'\n        WHEN email LIKE '%@outlook.com' THEN 'Outlook'\n        WHEN email LIKE '%@yahoo.com' THEN 'Yahoo'\n        WHEN email LIKE '%@example.com' THEN 'Example'\n        ELSE 'Outro'\n    END as provedor_email,\n    CASE \n        WHEN tipo_cliente = 'pessoa_fisica' THEN 'PF'\n        WHEN tipo_cliente = 'pessoa_juridica' THEN 'PJ'\n        ELSE 'Outro'\n    END as tipo_cliente_abrev,\n    CASE \n        WHEN limite_credito >= 10000 THEN 'Alto'\n        WHEN limite_credito >= 5000 THEN 'M\u00e9dio'\n        WHEN limite_credito > 0 THEN 'Baixo'\n        ELSE 'Sem Limite'\n    END as categoria_credito\nFROM \"db_source\".\"public_bronze\".\"bronze_clientes\"\nWHERE nome IS NOT NULL", "relation_name": "\"db_source\".\"public_silver\".\"dim_clientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.134722Z", "completed_at": "2025-06-18T01:37:25.138318Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.138677Z", "completed_at": "2025-06-18T01:37:25.179338Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04783368110656738, "adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "message": "SELECT 0", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.fct_pedidos", "compiled": true, "compiled_code": "-- models/silver/fct_pedidos.sql\n-- Este modelo cria a tabela de fatos para pedidos, transformando dados de bronze_pedidos\n-- e juntando com dimens\u00f5es como bronze_clientes.\n\n\n\n-- Silver: Fatos de pedidos com estrutura empresarial\n-- Nova estrutura completa de e-commerce\n\nWITH bronze_pedidos AS (\n    SELECT\n        id as pedido_id,\n        cliente_id,\n        numero_pedido,\n        data_pedido,\n        status,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        metodo_pagamento,\n        canal_venda,\n        observacoes,\n        data_entrega_prevista,\n        data_entrega_real,\n        updated_at\n    FROM \"db_source\".\"public_bronze\".\"bronze_pedidos\"\n),\n\nbronze_clientes AS (\n    SELECT\n        id as cliente_id,\n        nome as nome_cliente,\n        email as email_cliente,\n        tipo_cliente,\n        status as status_cliente\n    FROM \"db_source\".\"public_bronze\".\"bronze_clientes\"\n)\n\nSELECT\n    p.pedido_id,\n    p.cliente_id,\n    bc.nome_cliente,\n    bc.tipo_cliente,\n    p.numero_pedido,\n    p.status as status_pedido,\n    p.valor_bruto,\n    p.desconto,\n    p.valor_liquido,\n    p.metodo_pagamento,\n    p.canal_venda,\n    p.observacoes,\n    p.data_pedido,\n    p.data_entrega_prevista,\n    p.data_entrega_real,\n    EXTRACT(YEAR FROM p.data_pedido) AS ano_pedido,\n    EXTRACT(MONTH FROM p.data_pedido) AS mes_pedido,\n    EXTRACT(DAY FROM p.data_pedido) AS dia_pedido,\n    p.updated_at,\n    -- C\u00e1lculos derivados\n    CASE \n        WHEN p.valor_bruto > 0 \n        THEN (p.desconto / p.valor_bruto * 100)\n        ELSE 0 \n    END AS percentual_desconto,\n    CASE \n        WHEN p.data_entrega_real IS NOT NULL AND p.data_entrega_prevista IS NOT NULL\n        THEN p.data_entrega_real - p.data_entrega_prevista\n        ELSE NULL\n    END AS atraso_entrega_dias\nFROM bronze_pedidos p\nLEFT JOIN bronze_clientes bc ON p.cliente_id = bc.cliente_id\nWHERE p.valor_bruto > 0  -- Valida\u00e7\u00e3o b\u00e1sica", "relation_name": "\"db_source\".\"public_silver\".\"fct_pedidos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.136981Z", "completed_at": "2025-06-18T01:37:25.140050Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.140865Z", "completed_at": "2025-06-18T01:37:25.179787Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.046005964279174805, "adapter_response": {"_message": "SELECT 13", "code": "SELECT", "rows_affected": 13}, "message": "SELECT 13", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.silver_clientes", "compiled": true, "compiled_code": "-- models/silver/silver_clientes.sql\n\n-- Este modelo transforma os dados brutos dos clientes da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e enriquecimentos.\n\n\n\nWITH bronze_clientes AS (\n    SELECT\n        id AS cliente_id_origem,\n        nome,\n        email,\n        telefone,\n        cpf,\n        data_nascimento,\n        endereco,\n        status,\n        tipo_cliente,\n        limite_credito,\n        data_cadastro,\n        updated_at\n    FROM\n        \"db_source\".\"public_bronze\".\"bronze_clientes\"\n)\n\nSELECT\n    cliente_id_origem,\n    INITCAP(TRIM(nome)) AS nome_completo,\n    LOWER(TRIM(email)) AS email_padronizado,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    CAST(data_cadastro AS TIMESTAMP) AS data_cadastro_ts,\n    CAST(updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    SUBSTRING(email FROM POSITION('@' IN email) + 1) AS dominio_email,\n    EXTRACT(YEAR FROM CAST(data_cadastro AS TIMESTAMP)) AS ano_cadastro,\n    CASE \n        WHEN data_nascimento IS NOT NULL \n        THEN EXTRACT(YEAR FROM AGE(data_nascimento))\n        ELSE NULL \n    END AS idade_estimada\nFROM\n    bronze_clientes\nWHERE\n    email IS NOT NULL \n    AND nome IS NOT NULL\n\n-- Adicionar aqui mais transforma\u00e7\u00f5es conforme necess\u00e1rio:\n-- - Valida\u00e7\u00e3o de formato de email\n-- - Tratamento de dados nulos ou inv\u00e1lidos\n-- - Jun\u00e7\u00e3o com outras tabelas para enriquecimento (ex: dados demogr\u00e1ficos)", "relation_name": "\"db_source\".\"public_silver\".\"silver_clientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.146852Z", "completed_at": "2025-06-18T01:37:25.150439Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.151179Z", "completed_at": "2025-06-18T01:37:25.182793Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03708600997924805, "adapter_response": {"_message": "SELECT 6", "code": "SELECT", "rows_affected": 6}, "message": "SELECT 6", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.silver_produtos", "compiled": true, "compiled_code": "-- models/silver/silver_produtos.sql\n\n-- Este modelo transforma os dados brutos dos produtos da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e c\u00e1lculos para e-commerce.\n\n\n\nWITH bronze_produtos AS (\n    SELECT\n        id AS produto_id_origem,\n        codigo_produto,\n        nome,\n        categoria,\n        subcategoria,\n        marca,\n        preco_custo,\n        preco_venda,\n        margem_lucro,\n        estoque_atual,\n        estoque_minimo,\n        ativo,\n        peso,\n        dimensoes,\n        descricao,\n        tags,\n        data_lancamento,\n        fornecedor_id,\n        updated_at\n    FROM\n        \"db_source\".\"public_bronze\".\"bronze_produtos\"\n)\n\nSELECT\n    p.produto_id_origem,\n    TRIM(p.codigo_produto) AS codigo_produto_clean,\n    INITCAP(TRIM(p.nome)) AS nome_produto_clean,\n    UPPER(TRIM(p.categoria)) AS categoria_padronizada,\n    UPPER(TRIM(p.subcategoria)) AS subcategoria_padronizada,\n    INITCAP(TRIM(p.marca)) AS marca_clean,\n    CAST(p.preco_custo AS DECIMAL(18, 2)) AS preco_custo_decimal,\n    CAST(p.preco_venda AS DECIMAL(18, 2)) AS preco_venda_decimal,\n    CAST(p.margem_lucro AS DECIMAL(8, 2)) AS margem_lucro_decimal,\n    p.estoque_atual,\n    p.estoque_minimo,\n    p.ativo,\n    p.peso,\n    p.dimensoes,\n    p.descricao,\n    p.tags,\n    p.data_lancamento,\n    p.fornecedor_id,\n    CAST(p.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    CASE \n        WHEN p.estoque_atual <= p.estoque_minimo THEN 'Estoque Baixo'\n        WHEN p.estoque_atual <= (p.estoque_minimo * 2) THEN 'Estoque Normal'\n        ELSE 'Estoque Alto'\n    END AS status_estoque,\n    CASE \n        WHEN p.margem_lucro >= 50 THEN 'Alta Margem'\n        WHEN p.margem_lucro >= 20 THEN 'Margem Normal'\n        WHEN p.margem_lucro > 0 THEN 'Baixa Margem'\n        ELSE 'Sem Margem'\n    END AS categoria_margem,\n    CASE \n        WHEN p.data_lancamento >= CURRENT_DATE - INTERVAL '30 days' THEN 'Lan\u00e7amento'\n        WHEN p.data_lancamento >= CURRENT_DATE - INTERVAL '365 days' THEN 'Recente'\n        ELSE 'Estabelecido'\n    END AS fase_produto\nFROM\n    bronze_produtos p\nWHERE\n    p.nome IS NOT NULL \n    AND p.preco_venda > 0\n    AND p.ativo = true", "relation_name": "\"db_source\".\"public_silver\".\"silver_produtos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.185212Z", "completed_at": "2025-06-18T01:37:25.190831Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.191441Z", "completed_at": "2025-06-18T01:37:25.235150Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05209970474243164, "adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "message": "SELECT 0", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal", "compiled": true, "compiled_code": "-- models/gold/agg_valor_pedidos_por_cliente_mensal.sql\n-- Este modelo agrega o valor total de pedidos por cliente e por m\u00eas.\n-- \u00c9 um exemplo de modelo da camada Gold, pronto para consumo por ferramentas de BI ou dashboards.\n\nWITH fct_pedidos AS (\n    SELECT\n        cliente_id,\n        nome_cliente,\n        ano_pedido,\n        mes_pedido,\n        valor_liquido,\n        pedido_id\n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n)\n\nSELECT\n    cliente_id,\n    nome_cliente,\n    ano_pedido,\n    mes_pedido,\n    SUM(valor_liquido) AS valor_total_pedidos_mensal,\n    COUNT(DISTINCT pedido_id) AS numero_de_pedidos_mensal\nFROM\n    fct_pedidos\nGROUP BY\n    cliente_id,\n    nome_cliente,\n    ano_pedido,\n    mes_pedido\nORDER BY\n    ano_pedido DESC,\n    mes_pedido DESC,\n    valor_total_pedidos_mensal DESC", "relation_name": "\"db_source\".\"public_gold\".\"agg_valor_pedidos_por_cliente_mensal\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.195514Z", "completed_at": "2025-06-18T01:37:25.198288Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.198873Z", "completed_at": "2025-06-18T01:37:25.239408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04910731315612793, "adapter_response": {"_message": "SELECT 13", "code": "SELECT", "rows_affected": 13}, "message": "SELECT 13", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.gold_metricas_avancadas_clientes", "compiled": true, "compiled_code": "-- Modelo Gold: M\u00e9tricas Avan\u00e7adas de Clientes\n-- Demonstra capacidades anal\u00edticas avan\u00e7adas do DBT\n\n\n\nWITH base_clientes AS (\n    SELECT \n        cliente_id,\n        nome,\n        email_original as email,\n        data_cadastro,\n        status,\n        tipo_cliente,\n        limite_credito\n    FROM \"db_source\".\"public_silver\".\"dim_clientes\"\n),\n\npedidos_agregados AS (\n    SELECT \n        cliente_id,\n        COUNT(*) as total_pedidos,\n        SUM(valor_liquido) as receita_total,\n        AVG(valor_liquido) as ticket_medio,\n        MIN(data_pedido) as primeira_compra,\n        MAX(data_pedido) as ultima_compra,\n        \n        -- M\u00e9tricas temporais\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) as pedidos_30d,\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN 1 END) as pedidos_90d,\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '365 days' THEN 1 END) as pedidos_12m,\n        \n        -- Receita por per\u00edodo\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '30 days' THEN valor_liquido ELSE 0 END) as receita_30d,\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN valor_liquido ELSE 0 END) as receita_90d,\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '365 days' THEN valor_liquido ELSE 0 END) as receita_12m\n        \n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n    GROUP BY cliente_id\n),\n\nmetricas_comportamentais AS (\n    SELECT \n        p.cliente_id,\n        \n        -- Frequ\u00eancia de compra\n        CASE \n            WHEN pa.total_pedidos = 0 THEN 0\n            ELSE EXTRACT(DAYS FROM (pa.ultima_compra - pa.primeira_compra)) / NULLIF(pa.total_pedidos - 1, 0)\n        END as dias_entre_compras,\n        \n        -- Rec\u00eancia (dias desde \u00faltima compra)\n        EXTRACT(DAYS FROM (CURRENT_DATE - pa.ultima_compra)) as dias_desde_ultima_compra,\n        \n        -- Tend\u00eancia de crescimento (comparando \u00faltimos 3 meses vs 3 meses anteriores)\n        COALESCE(\n            (SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN p.valor_liquido ELSE 0 END) -\n         SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '180 days' \n                   AND p.data_pedido < CURRENT_DATE - INTERVAL '90 days' \n                   THEN p.valor_liquido ELSE 0 END)) /\n        NULLIF(SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '180 days' \n                        AND p.data_pedido < CURRENT_DATE - INTERVAL '90 days' \n                        THEN p.valor_liquido ELSE 0 END), 0), 0\n        ) as tendencia_crescimento,\n        \n        -- Sazonalidade (m\u00eas com maior volume)\n        MODE() WITHIN GROUP (ORDER BY EXTRACT(MONTH FROM p.data_pedido)) as mes_preferido\n        \n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\" p\n    INNER JOIN pedidos_agregados pa ON p.cliente_id = pa.cliente_id\n    GROUP BY p.cliente_id, pa.total_pedidos, pa.primeira_compra, pa.ultima_compra\n),\n\nrfm_analysis AS (\n    SELECT \n        pa.cliente_id,\n        \n        -- Recency Score (1-5, onde 5 \u00e9 mais recente)\n        CASE \n            WHEN dias_desde_ultima_compra <= 30 THEN 5\n            WHEN dias_desde_ultima_compra <= 60 THEN 4\n            WHEN dias_desde_ultima_compra <= 90 THEN 3\n            WHEN dias_desde_ultima_compra <= 180 THEN 2\n            ELSE 1\n        END as recency_score,\n        \n        -- Frequency Score (baseado em quartis)\n        NTILE(5) OVER (ORDER BY pa.total_pedidos) as frequency_score,\n        \n        -- Monetary Score (baseado em quartis)\n        NTILE(5) OVER (ORDER BY pa.receita_total) as monetary_score\n        \n    FROM pedidos_agregados pa\n    INNER JOIN metricas_comportamentais mc ON pa.cliente_id = mc.cliente_id\n),\n\nsegmentacao_avancada AS (\n    SELECT \n        rfm.*,\n        \n        -- Segmenta\u00e7\u00e3o RFM\n        CASE \n            WHEN recency_score >= 4 AND frequency_score >= 4 AND monetary_score >= 4 THEN 'Champions'\n            WHEN recency_score >= 3 AND frequency_score >= 3 AND monetary_score >= 3 THEN 'Loyal Customers'\n            WHEN recency_score >= 4 AND frequency_score <= 2 THEN 'New Customers'\n            WHEN recency_score >= 3 AND frequency_score >= 3 AND monetary_score <= 2 THEN 'Potential Loyalists'\n            WHEN recency_score >= 3 AND frequency_score <= 2 AND monetary_score >= 3 THEN 'Big Spenders'\n            WHEN recency_score <= 2 AND frequency_score >= 3 AND monetary_score >= 3 THEN 'At Risk'\n            WHEN recency_score <= 2 AND frequency_score >= 2 AND monetary_score <= 2 THEN 'Cannot Lose Them'\n            WHEN recency_score <= 2 AND frequency_score <= 2 AND monetary_score >= 3 THEN 'Hibernating'\n            ELSE 'Lost'\n        END as segmento_rfm,\n        \n        -- Score RFM combinado\n        (recency_score * 100) + (frequency_score * 10) + monetary_score as rfm_score\n        \n    FROM rfm_analysis rfm\n),\n\nmetricas_finais AS (\n    SELECT \n        bc.cliente_id,\n        bc.nome,\n        bc.email,\n        bc.data_cadastro,\n        bc.status,\n        bc.tipo_cliente,\n        bc.limite_credito,\n        \n        -- M\u00e9tricas b\u00e1sicas\n        COALESCE(pa.total_pedidos, 0) as total_pedidos,\n        COALESCE(pa.receita_total, 0) as receita_total,\n        COALESCE(pa.ticket_medio, 0) as ticket_medio,\n        pa.primeira_compra,\n        pa.ultima_compra,\n        \n        -- M\u00e9tricas temporais\n        COALESCE(pa.pedidos_30d, 0) as pedidos_30d,\n        COALESCE(pa.pedidos_90d, 0) as pedidos_90d,\n        COALESCE(pa.pedidos_12m, 0) as pedidos_12m,\n        COALESCE(pa.receita_30d, 0) as receita_30d,\n        COALESCE(pa.receita_90d, 0) as receita_90d,\n        COALESCE(pa.receita_12m, 0) as receita_12m,\n        \n        -- M\u00e9tricas comportamentais\n        COALESCE(mc.dias_entre_compras, 0) as dias_entre_compras,\n        COALESCE(mc.dias_desde_ultima_compra, 999) as dias_desde_ultima_compra,\n        COALESCE(mc.tendencia_crescimento, 0) as tendencia_crescimento,\n        mc.mes_preferido,\n        \n        -- RFM e Segmenta\u00e7\u00e3o\n        COALESCE(sa.recency_score, 1) as recency_score,\n        COALESCE(sa.frequency_score, 1) as frequency_score,\n        COALESCE(sa.monetary_score, 1) as monetary_score,\n        COALESCE(sa.rfm_score, 111) as rfm_score,\n        COALESCE(sa.segmento_rfm, 'Lost') as segmento_rfm,\n        \n        -- Customer Lifetime Value (CLV) estimado\n        CASE \n            WHEN pa.total_pedidos > 0 AND mc.dias_entre_compras > 0 THEN\n                (pa.ticket_medio * (365.0 / mc.dias_entre_compras) * 2) -- Estimativa para 2 anos\n            ELSE 0\n        END as clv_estimado,\n        \n        -- Flags de risco e oportunidade\n        CASE \n            WHEN mc.dias_desde_ultima_compra > 180 THEN true \n            ELSE false \n        END as em_risco_churn,\n        \n        CASE \n            WHEN pa.receita_30d > pa.receita_90d / 3 * 1.5 THEN true \n            ELSE false \n        END as crescimento_acelerado,\n        \n        -- Classifica\u00e7\u00e3o de valor\n        \n    CASE \n        WHEN COALESCE(pa.receita_total, 0) >= 10000 THEN 'VIP'\n        WHEN COALESCE(pa.receita_total, 0) >= 5000 THEN 'Premium'\n        WHEN COALESCE(pa.receita_total, 0) >= 1000 THEN 'Regular'\n        ELSE 'B\u00e1sico'\n    END\n as categoria_valor,\n        \n        -- Auditoria\n        \n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '7b0ac06c-66b2-40fc-80a9-d80ace88de6b' as dbt_run_id,\n    'system' as dbt_created_by\n\n        \n    FROM base_clientes bc\n    LEFT JOIN pedidos_agregados pa ON bc.cliente_id = pa.cliente_id\n    LEFT JOIN metricas_comportamentais mc ON bc.cliente_id = mc.cliente_id\n    LEFT JOIN segmentacao_avancada sa ON bc.cliente_id = sa.cliente_id\n)\n\nSELECT * FROM metricas_finais\nORDER BY receita_total DESC, total_pedidos DESC", "relation_name": "\"db_source\".\"public_gold\".\"gold_metricas_avancadas_clientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.186441Z", "completed_at": "2025-06-18T01:37:25.191167Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.193250Z", "completed_at": "2025-06-18T01:37:25.244499Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06116914749145508, "adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "message": "SELECT 0", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.gold_analise_coorte", "compiled": true, "compiled_code": "-- Modelo Gold: An\u00e1lise de Coorte\n-- Demonstra an\u00e1lise de reten\u00e7\u00e3o de clientes por coorte de aquisi\u00e7\u00e3o\n\n\n\nWITH clientes_primeira_compra AS (\n    SELECT \n        cliente_id,\n        MIN(data_pedido) as primeira_compra,\n        DATE_TRUNC('month', MIN(data_pedido)) as mes_aquisicao\n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n    GROUP BY cliente_id\n),\n\natividade_mensal AS (\n    SELECT \n        p.cliente_id,\n        DATE_TRUNC('month', p.data_pedido) as mes_atividade,\n        SUM(p.valor_liquido) as receita_mes,\n        COUNT(*) as pedidos_mes\n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\" p\n    GROUP BY p.cliente_id, DATE_TRUNC('month', p.data_pedido)\n),\n\ncoorte_base AS (\n    SELECT \n        cpc.mes_aquisicao,\n        COUNT(DISTINCT cpc.cliente_id) as clientes_adquiridos,\n        SUM(am.receita_mes) as receita_aquisicao\n    FROM clientes_primeira_compra cpc\n    INNER JOIN atividade_mensal am ON cpc.cliente_id = am.cliente_id \n                                   AND cpc.mes_aquisicao = am.mes_atividade\n    GROUP BY cpc.mes_aquisicao\n),\n\ncoorte_retencao AS (\n    SELECT \n        cpc.mes_aquisicao,\n        am.mes_atividade,\n        \n        -- Per\u00edodo desde aquisi\u00e7\u00e3o (em meses)\n        EXTRACT(YEAR FROM am.mes_atividade) * 12 + EXTRACT(MONTH FROM am.mes_atividade) -\n        (EXTRACT(YEAR FROM cpc.mes_aquisicao) * 12 + EXTRACT(MONTH FROM cpc.mes_aquisicao)) as periodo_desde_aquisicao,\n        \n        COUNT(DISTINCT cpc.cliente_id) as clientes_ativos,\n        SUM(am.receita_mes) as receita_periodo,\n        AVG(am.receita_mes) as receita_media_cliente,\n        COUNT(am.pedidos_mes) as total_pedidos\n        \n    FROM clientes_primeira_compra cpc\n    INNER JOIN atividade_mensal am ON cpc.cliente_id = am.cliente_id\n    WHERE am.mes_atividade >= cpc.mes_aquisicao\n    GROUP BY \n        cpc.mes_aquisicao, \n        am.mes_atividade,\n        periodo_desde_aquisicao\n),\n\ncoorte_metricas AS (\n    SELECT \n        cr.mes_aquisicao,\n        cr.periodo_desde_aquisicao,\n        cr.clientes_ativos,\n        cb.clientes_adquiridos,\n        \n        -- Taxa de reten\u00e7\u00e3o\n        ROUND(\n            (cr.clientes_ativos::DECIMAL / cb.clientes_adquiridos) * 100, 2\n        ) as taxa_retencao_pct,\n        \n        -- M\u00e9tricas financeiras\n        cr.receita_periodo,\n        cr.receita_media_cliente,\n        cr.total_pedidos,\n        \n        -- Revenue per User (RPU)\n        ROUND(\n            cr.receita_periodo / NULLIF(cr.clientes_ativos, 0), 2\n        ) as rpu,\n        \n        -- Lifetime Value acumulado por coorte\n        SUM(cr.receita_periodo) OVER (\n            PARTITION BY cr.mes_aquisicao \n            ORDER BY cr.periodo_desde_aquisicao \n            ROWS UNBOUNDED PRECEDING\n        ) as ltv_acumulado,\n        \n        -- Churn rate (diferen\u00e7a de reten\u00e7\u00e3o entre per\u00edodos)\n        LAG(cr.clientes_ativos) OVER (\n            PARTITION BY cr.mes_aquisicao \n            ORDER BY cr.periodo_desde_aquisicao\n        ) - cr.clientes_ativos as clientes_perdidos,\n        \n        -- Taxa de churn\n        CASE \n            WHEN LAG(cr.clientes_ativos) OVER (\n                PARTITION BY cr.mes_aquisicao \n                ORDER BY cr.periodo_desde_aquisicao\n            ) > 0 THEN\n                ROUND(\n                    ((LAG(cr.clientes_ativos) OVER (\n                        PARTITION BY cr.mes_aquisicao \n                        ORDER BY cr.periodo_desde_aquisicao\n                    ) - cr.clientes_ativos)::DECIMAL / \n                    LAG(cr.clientes_ativos) OVER (\n                        PARTITION BY cr.mes_aquisicao \n                        ORDER BY cr.periodo_desde_aquisicao\n                    )) * 100, 2\n                )\n            ELSE 0\n        END as taxa_churn_pct\n        \n    FROM coorte_retencao cr\n    INNER JOIN coorte_base cb ON cr.mes_aquisicao = cb.mes_aquisicao\n),\n\ncoorte_benchmarks AS (\n    SELECT \n        periodo_desde_aquisicao,\n        \n        -- Benchmarks por per\u00edodo\n        AVG(taxa_retencao_pct) as taxa_retencao_media,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_mediana,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_p25,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_p75,\n        \n        AVG(rpu) as rpu_medio,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY rpu) as rpu_mediano\n        \n    FROM coorte_metricas\n    WHERE periodo_desde_aquisicao <= 12 -- Primeiros 12 meses\n    GROUP BY periodo_desde_aquisicao\n),\n\nresultado_final AS (\n    SELECT \n        cm.mes_aquisicao,\n        cm.periodo_desde_aquisicao,\n        \n        -- Informa\u00e7\u00f5es da coorte\n        cm.clientes_adquiridos,\n        cm.clientes_ativos,\n        cm.clientes_perdidos,\n        \n        -- Taxas de reten\u00e7\u00e3o e churn\n        cm.taxa_retencao_pct,\n        cm.taxa_churn_pct,\n        \n        -- M\u00e9tricas financeiras\n        cm.receita_periodo,\n        cm.receita_media_cliente,\n        cm.rpu,\n        cm.ltv_acumulado,\n        cm.total_pedidos,\n        \n        -- Compara\u00e7\u00e3o com benchmarks\n        cb.taxa_retencao_media as benchmark_retencao_media,\n        cb.rpu_medio as benchmark_rpu_medio,\n        \n        -- Performance vs benchmark\n        CASE \n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_p75 THEN 'Excelente'\n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_mediana THEN 'Acima da M\u00e9dia'\n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_p25 THEN 'Abaixo da M\u00e9dia'\n            ELSE 'Cr\u00edtico'\n        END as performance_retencao,\n        \n        -- Classifica\u00e7\u00e3o da coorte\n        CASE \n            WHEN cm.periodo_desde_aquisicao = 0 THEN 'Aquisi\u00e7\u00e3o'\n            WHEN cm.periodo_desde_aquisicao <= 3 THEN 'Onboarding'\n            WHEN cm.periodo_desde_aquisicao <= 6 THEN 'Estabelecimento'\n            WHEN cm.periodo_desde_aquisicao <= 12 THEN 'Matura\u00e7\u00e3o'\n            ELSE 'Longo Prazo'\n        END as fase_ciclo_vida,\n        \n        -- Flags de alerta\n        CASE \n            WHEN cm.taxa_churn_pct > 20 THEN true \n            ELSE false \n        END as alerta_churn_alto,\n        \n        CASE \n            WHEN cm.rpu < cb.rpu_medio * 0.8 THEN true \n            ELSE false \n        END as alerta_rpu_baixo,\n        \n        -- Auditoria\n        \n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '7b0ac06c-66b2-40fc-80a9-d80ace88de6b' as dbt_run_id,\n    'system' as dbt_created_by\n\n        \n    FROM coorte_metricas cm\n    LEFT JOIN coorte_benchmarks cb ON cm.periodo_desde_aquisicao = cb.periodo_desde_aquisicao\n)\n\nSELECT * FROM resultado_final\nWHERE periodo_desde_aquisicao <= 24 -- Limitar a 24 meses para performance\nORDER BY mes_aquisicao DESC, periodo_desde_aquisicao ASC", "relation_name": "\"db_source\".\"public_gold\".\"gold_analise_coorte\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.188202Z", "completed_at": "2025-06-18T01:37:25.191301Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.194387Z", "completed_at": "2025-06-18T01:37:25.248686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0648651123046875, "adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "message": "SELECT 0", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.gold_deteccao_anomalias", "compiled": true, "compiled_code": "-- Modelo Gold: Detec\u00e7\u00e3o de Anomalias\n-- Identifica padr\u00f5es an\u00f4malos em vendas, comportamento de clientes e m\u00e9tricas de neg\u00f3cio\n\n\n\nWITH vendas_diarias AS (\n    SELECT \n        DATE(data_pedido) as data_venda,\n        COUNT(*) as total_pedidos,\n        SUM(valor_liquido) as receita_total,\n        AVG(valor_liquido) as ticket_medio,\n        COUNT(DISTINCT cliente_id) as clientes_unicos\n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n    WHERE data_pedido >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY DATE(data_pedido)\n),\n\nmetricas_estatisticas AS (\n    SELECT \n        -- Estat\u00edsticas para pedidos\n        AVG(total_pedidos) as media_pedidos,\n        STDDEV(total_pedidos) as desvio_pedidos,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY total_pedidos) as q1_pedidos,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY total_pedidos) as q3_pedidos,\n        \n        -- Estat\u00edsticas para receita\n        AVG(receita_total) as media_receita,\n        STDDEV(receita_total) as desvio_receita,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY receita_total) as q1_receita,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY receita_total) as q3_receita,\n        \n        -- Estat\u00edsticas para ticket m\u00e9dio\n        AVG(ticket_medio) as media_ticket,\n        STDDEV(ticket_medio) as desvio_ticket,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY ticket_medio) as q1_ticket,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY ticket_medio) as q3_ticket,\n        \n        -- Estat\u00edsticas para clientes \u00fanicos\n        AVG(clientes_unicos) as media_clientes,\n        STDDEV(clientes_unicos) as desvio_clientes\n        \n    FROM vendas_diarias\n),\n\nanomalias_vendas AS (\n    SELECT \n        vd.data_venda,\n        vd.total_pedidos,\n        vd.receita_total,\n        vd.ticket_medio,\n        vd.clientes_unicos,\n        \n        -- Z-Score para cada m\u00e9trica\n        CASE \n            WHEN me.desvio_pedidos > 0 THEN \n                ABS(vd.total_pedidos - me.media_pedidos) / me.desvio_pedidos\n            ELSE 0\n        END as z_score_pedidos,\n        \n        CASE \n            WHEN me.desvio_receita > 0 THEN \n                ABS(vd.receita_total - me.media_receita) / me.desvio_receita\n            ELSE 0\n        END as z_score_receita,\n        \n        CASE \n            WHEN me.desvio_ticket > 0 THEN \n                ABS(vd.ticket_medio - me.media_ticket) / me.desvio_ticket\n            ELSE 0\n        END as z_score_ticket,\n        \n        CASE \n            WHEN me.desvio_clientes > 0 THEN \n                ABS(vd.clientes_unicos - me.media_clientes) / me.desvio_clientes\n            ELSE 0\n        END as z_score_clientes,\n        \n        -- IQR (Interquartile Range) para detec\u00e7\u00e3o de outliers\n        (me.q3_pedidos - me.q1_pedidos) * 1.5 as iqr_pedidos,\n        (me.q3_receita - me.q1_receita) * 1.5 as iqr_receita,\n        (me.q3_ticket - me.q1_ticket) * 1.5 as iqr_ticket,\n        \n        -- Limites para outliers (m\u00e9todo IQR)\n        me.q1_pedidos - (me.q3_pedidos - me.q1_pedidos) * 1.5 as limite_inf_pedidos,\n        me.q3_pedidos + (me.q3_pedidos - me.q1_pedidos) * 1.5 as limite_sup_pedidos,\n        me.q1_receita - (me.q3_receita - me.q1_receita) * 1.5 as limite_inf_receita,\n        me.q3_receita + (me.q3_receita - me.q1_receita) * 1.5 as limite_sup_receita,\n        me.q1_ticket - (me.q3_ticket - me.q1_ticket) * 1.5 as limite_inf_ticket,\n        me.q3_ticket + (me.q3_ticket - me.q1_ticket) * 1.5 as limite_sup_ticket\n        \n    FROM vendas_diarias vd\n    CROSS JOIN metricas_estatisticas me\n),\n\ncomportamento_clientes AS (\n    SELECT \n        cliente_id,\n        COUNT(*) as pedidos_periodo,\n        SUM(valor_liquido) as gasto_total,\n        AVG(valor_liquido) as ticket_medio_cliente,\n        MAX(valor_liquido) as maior_pedido,\n        MIN(valor_liquido) as menor_pedido,\n        \n        -- Varia\u00e7\u00e3o no comportamento\n        STDDEV(valor_liquido) as variacao_ticket,\n        \n        -- Frequ\u00eancia de compra\n        EXTRACT(DAYS FROM (MAX(data_pedido) - MIN(data_pedido))) / NULLIF(COUNT(*) - 1, 0) as dias_entre_compras\n        \n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n    WHERE data_pedido >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY cliente_id\n    HAVING COUNT(*) >= 2 -- Apenas clientes com m\u00faltiplos pedidos\n),\n\nanomalias_clientes AS (\n    SELECT \n        cliente_id,\n        pedidos_periodo,\n        gasto_total,\n        ticket_medio_cliente,\n        maior_pedido,\n        variacao_ticket,\n        dias_entre_compras,\n        \n        -- Detec\u00e7\u00e3o de comportamento an\u00f4malo\n        CASE \n            WHEN maior_pedido > ticket_medio_cliente * 5 THEN true\n            ELSE false\n        END as pedido_muito_alto,\n        \n        CASE \n            WHEN variacao_ticket > ticket_medio_cliente * 2 THEN true\n            ELSE false\n        END as comportamento_erratico,\n        \n        CASE \n            WHEN dias_entre_compras < 1 THEN true\n            ELSE false\n        END as compras_muito_frequentes,\n        \n        -- Score de anomalia do cliente (0-100)\n        LEAST(100, \n            (CASE WHEN maior_pedido > ticket_medio_cliente * 5 THEN 30 ELSE 0 END) +\n            (CASE WHEN variacao_ticket > ticket_medio_cliente * 2 THEN 25 ELSE 0 END) +\n            (CASE WHEN dias_entre_compras < 1 THEN 20 ELSE 0 END) +\n            (CASE WHEN pedidos_periodo > 30 THEN 25 ELSE 0 END)\n        ) as score_anomalia_cliente\n        \n    FROM comportamento_clientes\n),\n\nanomalias_consolidadas AS (\n    -- Anomalias de vendas di\u00e1rias\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'VOLUME_PEDIDOS' as subtipo,\n        \n        CASE \n            WHEN z_score_pedidos > 3 OR \n                 total_pedidos < limite_inf_pedidos OR \n                 total_pedidos > limite_sup_pedidos THEN 'ALTA'\n            WHEN z_score_pedidos > 2 THEN 'MEDIA'\n            WHEN z_score_pedidos > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        total_pedidos as valor_observado,\n        NULL as valor_esperado,\n        z_score_pedidos as score_anomalia,\n        \n        CONCAT(\n            'Volume de pedidos an\u00f4malo: ', total_pedidos, \n            ' (Z-Score: ', ROUND(z_score_pedidos, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_pedidos > 1.5 OR \n          total_pedidos < limite_inf_pedidos OR \n          total_pedidos > limite_sup_pedidos\n    \n    UNION ALL\n    \n    -- Anomalias de receita di\u00e1ria\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'RECEITA_TOTAL' as subtipo,\n        \n        CASE \n            WHEN z_score_receita > 3 OR \n                 receita_total < limite_inf_receita OR \n                 receita_total > limite_sup_receita THEN 'ALTA'\n            WHEN z_score_receita > 2 THEN 'MEDIA'\n            WHEN z_score_receita > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        receita_total as valor_observado,\n        NULL as valor_esperado,\n        z_score_receita as score_anomalia,\n        \n        CONCAT(\n            'Receita an\u00f4mala: R$ ', ROUND(receita_total, 2), \n            ' (Z-Score: ', ROUND(z_score_receita, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_receita > 1.5 OR \n          receita_total < limite_inf_receita OR \n          receita_total > limite_sup_receita\n    \n    UNION ALL\n    \n    -- Anomalias de ticket m\u00e9dio\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'TICKET_MEDIO' as subtipo,\n        \n        CASE \n            WHEN z_score_ticket > 3 OR \n                 ticket_medio < limite_inf_ticket OR \n                 ticket_medio > limite_sup_ticket THEN 'ALTA'\n            WHEN z_score_ticket > 2 THEN 'MEDIA'\n            WHEN z_score_ticket > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        ticket_medio as valor_observado,\n        NULL as valor_esperado,\n        z_score_ticket as score_anomalia,\n        \n        CONCAT(\n            'Ticket m\u00e9dio an\u00f4malo: R$ ', ROUND(ticket_medio, 2), \n            ' (Z-Score: ', ROUND(z_score_ticket, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_ticket > 1.5 OR \n          ticket_medio < limite_inf_ticket OR \n          ticket_medio > limite_sup_ticket\n    \n    UNION ALL\n    \n    -- Anomalias de comportamento de clientes\n    SELECT \n        CURRENT_DATE as data_analise,\n        'COMPORTAMENTO_CLIENTE' as tipo_anomalia,\n        'COMPORTAMENTO_ERRATICO' as subtipo,\n        \n        CASE \n            WHEN score_anomalia_cliente >= 70 THEN 'ALTA'\n            WHEN score_anomalia_cliente >= 40 THEN 'MEDIA'\n            WHEN score_anomalia_cliente >= 20 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        cliente_id as valor_observado,\n        NULL as valor_esperado,\n        score_anomalia_cliente as score_anomalia,\n        \n        CONCAT(\n            'Cliente ID ', cliente_id, ' com comportamento an\u00f4malo. ',\n            CASE WHEN pedido_muito_alto THEN 'Pedido muito alto. ' ELSE '' END,\n            CASE WHEN comportamento_erratico THEN 'Varia\u00e7\u00e3o erratica. ' ELSE '' END,\n            CASE WHEN compras_muito_frequentes THEN 'Compras muito frequentes. ' ELSE '' END,\n            'Score: ', score_anomalia_cliente\n        ) as descricao\n        \n    FROM anomalias_clientes\n    WHERE score_anomalia_cliente >= 20\n),\n\nresultado_final AS (\n    SELECT \n        data_analise,\n        tipo_anomalia,\n        subtipo,\n        severidade,\n        valor_observado,\n        valor_esperado,\n        score_anomalia,\n        descricao,\n        \n        -- Prioridade para a\u00e7\u00e3o\n        CASE \n            WHEN severidade = 'ALTA' THEN 1\n            WHEN severidade = 'MEDIA' THEN 2\n            WHEN severidade = 'BAIXA' THEN 3\n            ELSE 4\n        END as prioridade,\n        \n        -- Recomenda\u00e7\u00f5es autom\u00e1ticas\n        CASE \n            WHEN tipo_anomalia = 'VENDAS_DIARIAS' AND subtipo = 'VOLUME_PEDIDOS' AND severidade = 'ALTA' THEN\n                'Investigar: poss\u00edvel problema no sistema de pedidos ou campanha promocional'\n            WHEN tipo_anomalia = 'VENDAS_DIARIAS' AND subtipo = 'RECEITA_TOTAL' AND severidade = 'ALTA' THEN\n                'Verificar: poss\u00edvel erro de precifica\u00e7\u00e3o ou pedidos fraudulentos'\n            WHEN tipo_anomalia = 'COMPORTAMENTO_CLIENTE' AND severidade = 'ALTA' THEN\n                'Analisar cliente: poss\u00edvel fraude ou erro no sistema'\n            ELSE 'Monitorar tend\u00eancia'\n        END as recomendacao,\n        \n        -- Flags de alerta\n        CASE WHEN severidade IN ('ALTA', 'MEDIA') THEN true ELSE false END as requer_atencao,\n        CASE WHEN score_anomalia > 3 THEN true ELSE false END as outlier_extremo,\n        \n        -- Auditoria\n        \n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '7b0ac06c-66b2-40fc-80a9-d80ace88de6b' as dbt_run_id,\n    'system' as dbt_created_by\n\n        \n    FROM anomalias_consolidadas\n)\n\nSELECT * FROM resultado_final\nORDER BY prioridade ASC, score_anomalia DESC, data_analise DESC", "relation_name": "\"db_source\".\"public_gold\".\"gold_deteccao_anomalias\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.242797Z", "completed_at": "2025-06-18T01:37:25.245400Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.245762Z", "completed_at": "2025-06-18T01:37:25.265284Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.024681806564331055, "adapter_response": {"_message": "SELECT 13", "code": "SELECT", "rows_affected": 13}, "message": "SELECT 13", "failures": null, "unique_id": "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "compiled": true, "compiled_code": "-- models/gold/gold_visao_geral_clientes.sql\n\n-- Este modelo de agrega\u00e7\u00e3o fornece uma vis\u00e3o geral dos clientes,\n-- combinando informa\u00e7\u00f5es da camada silver de clientes e pedidos.\n\nWITH silver_clientes AS (\n    SELECT\n        cliente_id_origem,\n        nome_completo,\n        email_padronizado,\n        telefone,\n        cpf,\n        status,\n        tipo_cliente,\n        limite_credito,\n        data_cadastro_ts,\n        updated_at_ts,\n        dominio_email,\n        ano_cadastro,\n        idade_estimada\n    FROM\n        \"db_source\".\"public_silver\".\"silver_clientes\"\n),\n\nsilver_pedidos AS (\n    SELECT\n        cliente_id_origem,\n        pedido_id_origem,\n        valor_bruto_decimal,\n        valor_liquido_decimal,\n        status,\n        data_pedido_ts\n    FROM\n        \"db_source\".\"public_silver\".\"silver_pedidos\"\n),\n\npedidos_agregados_por_cliente AS (\n    SELECT\n        cliente_id_origem,\n        COUNT(pedido_id_origem) AS total_pedidos,\n        SUM(valor_liquido_decimal) AS valor_total_gasto,\n        AVG(valor_liquido_decimal) AS ticket_medio,\n        MIN(data_pedido_ts) AS data_primeiro_pedido,\n        MAX(data_pedido_ts) AS data_ultimo_pedido,\n        COUNT(CASE WHEN status = 'concluido' THEN 1 END) AS pedidos_concluidos\n    FROM\n        silver_pedidos\n    GROUP BY\n        cliente_id_origem\n)\n\nSELECT\n    sc.cliente_id_origem,\n    sc.nome_completo,\n    sc.email_padronizado,\n    sc.telefone,\n    sc.cpf,\n    sc.status,\n    sc.tipo_cliente,\n    sc.limite_credito,\n    sc.data_cadastro_ts,\n    sc.updated_at_ts AS updated_at_cliente_ts,\n    sc.dominio_email,\n    sc.ano_cadastro,\n    sc.idade_estimada,\n    COALESCE(pa.total_pedidos, 0) AS total_pedidos_realizados,\n    COALESCE(pa.valor_total_gasto, 0.00) AS valor_total_gasto_cliente,\n    COALESCE(pa.ticket_medio, 0.00) AS ticket_medio_cliente,\n    pa.data_primeiro_pedido,\n    pa.data_ultimo_pedido,\n    COALESCE(pa.pedidos_concluidos, 0) AS pedidos_concluidos,\n    (CASE\n        WHEN pa.total_pedidos > 10 THEN 'Cliente VIP'\n        WHEN pa.total_pedidos > 5 THEN 'Cliente Regular'\n        WHEN pa.total_pedidos > 0 THEN 'Cliente Novo'\n        ELSE 'Cliente Inativo (sem pedidos)'\n    END) AS segmento_cliente,\n    (CASE\n        WHEN sc.limite_credito >= 10000 AND pa.total_pedidos > 5 THEN 'Premium'\n        WHEN sc.limite_credito >= 5000 AND pa.total_pedidos > 2 THEN 'Gold'\n        WHEN pa.total_pedidos > 0 THEN 'Silver'\n        ELSE 'Bronze'\n    END) AS categoria_valor\nFROM\n    silver_clientes sc\nLEFT JOIN\n    pedidos_agregados_por_cliente pa ON sc.cliente_id_origem = pa.cliente_id_origem\n\n-- Adicionar aqui mais l\u00f3gicas de neg\u00f3cio para a camada Gold:\n-- - C\u00e1lculo de LTV (Lifetime Value)\n-- - An\u00e1lise de Churn\n-- - Segmenta\u00e7\u00e3o avan\u00e7ada de clientes\n-- - M\u00e9tricas de Rec\u00eancia, Frequ\u00eancia, Valor (RFV)", "relation_name": "\"db_source\".\"public_gold\".\"gold_visao_geral_clientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-18T01:37:25.270634Z", "completed_at": "2025-06-18T01:37:25.272010Z"}, {"name": "execute", "started_at": "2025-06-18T01:37:25.272165Z", "completed_at": "2025-06-18T01:37:25.272167Z"}], "thread_id": "main", "execution_time": 0.001533, "adapter_response": {}, "message": "meu_projeto_dbt_riocard.on-run-end.0 passed", "failures": 0, "unique_id": "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-end-0", "compiled": true, "compiled_code": "", "relation_name": null, "batch_results": null}], "elapsed_time": 0.4203770160675049, "args": {"require_nested_cumulative_type_params": false, "macro_debugging": false, "require_explicit_package_overrides_for_builtin_materializations": true, "printer_width": 80, "vars": {}, "select": [], "use_colors_file": true, "introspect": true, "empty": false, "quiet": false, "log_file_max_bytes": 10485760, "indirect_selection": "eager", "partial_parse": true, "require_resource_names_without_spaces": false, "log_level": "info", "version_check": true, "show_resource_report": false, "invocation_command": "dbt run", "log_path": "/Users/michaelsantos/Documents/GitHub/dbt/dbt_project/logs", "which": "run", "exclude": [], "skip_nodes_if_on_run_start_fails": false, "partial_parse_file_diff": true, "populate_cache": true, "warn_error_options": {"include": [], "exclude": []}, "require_yaml_configuration_for_mf_time_spines": false, "project_dir": "/Users/michaelsantos/Documents/GitHub/dbt/dbt_project", "log_level_file": "debug", "use_colors": true, "defer": false, "state_modified_compare_more_unrendered_values": false, "state_modified_compare_vars": false, "source_freshness_run_project_hooks": false, "log_format": "default", "require_batched_execution_for_custom_microbatch_strategy": false, "cache_selected_only": false, "static_parser": true, "print": true, "strict_mode": false, "favor_state": false, "log_format_file": "debug", "send_anonymous_usage_stats": true, "profiles_dir": "/Users/michaelsantos/.dbt", "write_json": true}}