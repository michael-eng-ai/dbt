{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.6", "generated_at": "2025-06-18T01:37:24.693520Z", "invocation_id": "7b0ac06c-66b2-40fc-80a9-d80ace88de6b", "env": {}, "project_name": "meu_projeto_dbt_riocard", "project_id": "d4a66bbebd1edaa854dbac1aace8071f", "user_id": "ffad028c-3f51-4fd7-b2c9-e8fc6447a30d", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.meu_projeto_dbt_riocard.bronze_leads": {"database": "db_source", "schema": "public_bronze", "name": "bronze_leads", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "bronze/bronze_leads.sql", "original_file_path": "models/bronze/bronze_leads.sql", "unique_id": "model.meu_projeto_dbt_riocard.bronze_leads", "fqn": ["meu_projeto_dbt_riocard", "bronze", "bronze_leads"], "alias": "bronze_leads", "checksum": {"name": "sha256", "checksum": "37640942f0bffed86b9de4508200bfe3a76d2322f7b58a42d56c87dff9323894"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze", "raw", "bronze", "leads", "crm", "cdc"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["bronze", "raw", "leads", "crm", "cdc"], "description": "Modelo bronze para a tabela de leads.", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/bronze/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/bronze/bronze_leads.sql", "unrendered_config": {"materialized": "view", "schema": "bronze", "tags": ["bronze", "leads", "crm", "cdc"]}, "created_at": 1750210279.3772821, "relation_name": "\"db_source\".\"public_bronze\".\"bronze_leads\"", "raw_code": "-- models/bronze/bronze_leads.sql\n-- Camada Bronze: Dados brutos de leads do CRM\n\n{{ config(\n    materialized='view',\n    tags=['bronze', 'leads', 'crm', 'cdc']\n) }}\n\n-- Bronze: Dados brutos de leads diretamente do source (replicado via Airbyte CDC)\n-- Prospects de vendas com informa\u00e7\u00f5es de qualifica\u00e7\u00e3o\nSELECT \n    id,\n    nome,\n    email,\n    telefone,\n    empresa,\n    cargo,\n    fonte,\n    campanha_id,\n    score,\n    status,\n    interesse,\n    orcamento_estimado,\n    data_contato,\n    data_conversao,\n    observacoes,\n    tags,\n    ultima_atividade,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM {{ source('raw_data', 'leads') }}\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: lead deve ter nome", "language": "sql", "refs": [], "sources": [["raw_data", "leads"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.leads"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/bronze/bronze_leads.sql", "compiled": true, "compiled_code": "-- models/bronze/bronze_leads.sql\n-- Camada Bronze: Dados brutos de leads do CRM\n\n\n\n-- Bronze: Dados brutos de leads diretamente do source (replicado via Airbyte CDC)\n-- Prospects de vendas com informa\u00e7\u00f5es de qualifica\u00e7\u00e3o\nSELECT \n    id,\n    nome,\n    email,\n    telefone,\n    empresa,\n    cargo,\n    fonte,\n    campanha_id,\n    score,\n    status,\n    interesse,\n    orcamento_estimado,\n    data_contato,\n    data_conversao,\n    observacoes,\n    tags,\n    ultima_atividade,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM \"db_source\".\"public\".\"leads\"\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: lead deve ter nome", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.meu_projeto_dbt_riocard.bronze_clientes": {"database": "db_source", "schema": "public_bronze", "name": "bronze_clientes", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "bronze/bronze_clientes.sql", "original_file_path": "models/bronze/bronze_clientes.sql", "unique_id": "model.meu_projeto_dbt_riocard.bronze_clientes", "fqn": ["meu_projeto_dbt_riocard", "bronze", "bronze_clientes"], "alias": "bronze_clientes", "checksum": {"name": "sha256", "checksum": "ed21e11c17a618441a6851e65657afed5dc8dd576f89a353433ee489270a1ac3"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze", "raw", "bronze", "clientes", "cdc"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["bronze", "raw", "clientes", "cdc"], "description": "Modelo bronze para a tabela de clientes.", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/bronze/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/bronze/bronze_clientes.sql", "unrendered_config": {"materialized": "view", "schema": "bronze", "tags": ["bronze", "clientes", "cdc"]}, "created_at": 1750210279.3763032, "relation_name": "\"db_source\".\"public_bronze\".\"bronze_clientes\"", "raw_code": "-- models/bronze/bronze_clientes.sql\n\n-- Seleciona todos os dados da tabela de clientes da fonte\n-- Esta \u00e9 uma vis\u00e3o simples dos dados brutos, sem transforma\u00e7\u00f5es complexas ainda.\n\n{{ config(\n    materialized='view',\n    tags=['bronze', 'clientes', 'cdc']\n) }}\n\n-- Camada Bronze: Dados brutos de clientes com schema atualizado\n\n-- Bronze: Dados brutos de clientes diretamente do source (replicado via Airbyte CDC)\n-- Inclui todas as colunas da nova estrutura empresarial\nSELECT \n    id,\n    nome,\n    email,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    data_cadastro,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM {{ source('raw_data', 'clientes') }}\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: nome obrigat\u00f3rio", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/bronze/bronze_clientes.sql", "compiled": true, "compiled_code": "-- models/bronze/bronze_clientes.sql\n\n-- Seleciona todos os dados da tabela de clientes da fonte\n-- Esta \u00e9 uma vis\u00e3o simples dos dados brutos, sem transforma\u00e7\u00f5es complexas ainda.\n\n\n\n-- Camada Bronze: Dados brutos de clientes com schema atualizado\n\n-- Bronze: Dados brutos de clientes diretamente do source (replicado via Airbyte CDC)\n-- Inclui todas as colunas da nova estrutura empresarial\nSELECT \n    id,\n    nome,\n    email,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    data_cadastro,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM \"db_source\".\"public\".\"clientes\"\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: nome obrigat\u00f3rio", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.meu_projeto_dbt_riocard.bronze_pedidos": {"database": "db_source", "schema": "public_bronze", "name": "bronze_pedidos", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "bronze/bronze_pedidos.sql", "original_file_path": "models/bronze/bronze_pedidos.sql", "unique_id": "model.meu_projeto_dbt_riocard.bronze_pedidos", "fqn": ["meu_projeto_dbt_riocard", "bronze", "bronze_pedidos"], "alias": "bronze_pedidos", "checksum": {"name": "sha256", "checksum": "df99b743c7a7bc1fefd5aeb08ffbc40891aa806e76a08b07b6511d5c198ea529"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze", "raw", "bronze", "pedidos", "cdc"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["bronze", "raw", "pedidos", "cdc"], "description": "Modelo bronze para a tabela de pedidos.", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/bronze/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/bronze/bronze_pedidos.sql", "unrendered_config": {"materialized": "view", "schema": "bronze", "tags": ["bronze", "pedidos", "cdc"]}, "created_at": 1750210279.376653, "relation_name": "\"db_source\".\"public_bronze\".\"bronze_pedidos\"", "raw_code": "-- models/bronze/bronze_pedidos.sql\n\n-- Seleciona todos os dados da tabela de pedidos da fonte\n-- Esta \u00e9 uma vis\u00e3o simples dos dados brutos, sem transforma\u00e7\u00f5es complexas ainda.\n\n{{ config(\n    materialized='view',\n    tags=['bronze', 'pedidos', 'cdc']\n) }}\n\n-- Camada Bronze: Dados brutos de pedidos com schema atualizado\n\n-- Bronze: Dados brutos de pedidos diretamente do source (replicado via Airbyte CDC)\n-- Nova estrutura empresarial com campos completos\nSELECT \n    id,\n    cliente_id,\n    numero_pedido,\n    data_pedido,\n    status,\n    valor_bruto,\n    desconto,\n    valor_liquido,\n    metodo_pagamento,\n    canal_venda,\n    observacoes,\n    data_entrega_prevista,\n    data_entrega_real,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM {{ source('raw_data', 'pedidos') }}\nWHERE valor_bruto > 0  -- Valida\u00e7\u00e3o b\u00e1sica: pedidos devem ter valor positivo", "language": "sql", "refs": [], "sources": [["raw_data", "pedidos"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/bronze/bronze_pedidos.sql", "compiled": true, "compiled_code": "-- models/bronze/bronze_pedidos.sql\n\n-- Seleciona todos os dados da tabela de pedidos da fonte\n-- Esta \u00e9 uma vis\u00e3o simples dos dados brutos, sem transforma\u00e7\u00f5es complexas ainda.\n\n\n\n-- Camada Bronze: Dados brutos de pedidos com schema atualizado\n\n-- Bronze: Dados brutos de pedidos diretamente do source (replicado via Airbyte CDC)\n-- Nova estrutura empresarial com campos completos\nSELECT \n    id,\n    cliente_id,\n    numero_pedido,\n    data_pedido,\n    status,\n    valor_bruto,\n    desconto,\n    valor_liquido,\n    metodo_pagamento,\n    canal_venda,\n    observacoes,\n    data_entrega_prevista,\n    data_entrega_real,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM \"db_source\".\"public\".\"pedidos\"\nWHERE valor_bruto > 0  -- Valida\u00e7\u00e3o b\u00e1sica: pedidos devem ter valor positivo", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.meu_projeto_dbt_riocard.stg_clientes": {"database": "db_source", "schema": "public_bronze", "name": "stg_clientes", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "bronze/stg_clientes.sql", "original_file_path": "models/bronze/stg_clientes.sql", "unique_id": "model.meu_projeto_dbt_riocard.stg_clientes", "fqn": ["meu_projeto_dbt_riocard", "bronze", "stg_clientes"], "alias": "stg_clientes", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze", "raw"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["bronze", "raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "bronze", "tags": ["bronze", "raw"]}, "created_at": 1750210279.054949, "relation_name": "\"db_source\".\"public_bronze\".\"stg_clientes\"", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.bronze_produtos": {"database": "db_source", "schema": "public_bronze", "name": "bronze_produtos", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "bronze/bronze_produtos.sql", "original_file_path": "models/bronze/bronze_produtos.sql", "unique_id": "model.meu_projeto_dbt_riocard.bronze_produtos", "fqn": ["meu_projeto_dbt_riocard", "bronze", "bronze_produtos"], "alias": "bronze_produtos", "checksum": {"name": "sha256", "checksum": "550a0386168fe0b016b9d823cfb48fce9a71b0ae09c7408678a2edc02ab6ed45"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze", "raw", "bronze", "produtos", "ecommerce", "cdc"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["bronze", "raw", "produtos", "ecommerce", "cdc"], "description": "Modelo bronze para a tabela de produtos.", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/bronze/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/bronze/bronze_produtos.sql", "unrendered_config": {"materialized": "view", "schema": "bronze", "tags": ["bronze", "produtos", "ecommerce", "cdc"]}, "created_at": 1750210279.376881, "relation_name": "\"db_source\".\"public_bronze\".\"bronze_produtos\"", "raw_code": "-- models/bronze/bronze_produtos.sql\n-- Camada Bronze: Dados brutos de produtos do e-commerce\n\n{{ config(\n    materialized='view',\n    tags=['bronze', 'produtos', 'ecommerce', 'cdc']\n) }}\n\n-- Bronze: Dados brutos de produtos diretamente do source (replicado via Airbyte CDC)\n-- Cat\u00e1logo completo de produtos com informa\u00e7\u00f5es comerciais\nSELECT \n    id,\n    codigo_produto,\n    nome,\n    categoria,\n    subcategoria,\n    marca,\n    preco_custo,\n    preco_venda,\n    margem_lucro,\n    estoque_atual,\n    estoque_minimo,\n    ativo,\n    peso,\n    dimensoes,\n    descricao,\n    tags,\n    data_lancamento,\n    fornecedor_id,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM {{ source('raw_data', 'produtos') }}\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: produto deve ter nome", "language": "sql", "refs": [], "sources": [["raw_data", "produtos"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.produtos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/bronze/bronze_produtos.sql", "compiled": true, "compiled_code": "-- models/bronze/bronze_produtos.sql\n-- Camada Bronze: Dados brutos de produtos do e-commerce\n\n\n\n-- Bronze: Dados brutos de produtos diretamente do source (replicado via Airbyte CDC)\n-- Cat\u00e1logo completo de produtos com informa\u00e7\u00f5es comerciais\nSELECT \n    id,\n    codigo_produto,\n    nome,\n    categoria,\n    subcategoria,\n    marca,\n    preco_custo,\n    preco_venda,\n    margem_lucro,\n    estoque_atual,\n    estoque_minimo,\n    ativo,\n    peso,\n    dimensoes,\n    descricao,\n    tags,\n    data_lancamento,\n    fornecedor_id,\n    updated_at,\n    created_by,\n    version,\n    -- Metadados para auditoria CDC\n    updated_at as ultima_modificacao_fonte\nFROM \"db_source\".\"public\".\"produtos\"\nWHERE nome IS NOT NULL  -- Valida\u00e7\u00e3o b\u00e1sica: produto deve ter nome", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.meu_projeto_dbt_riocard.stg_pedidos": {"database": "db_source", "schema": "public_bronze", "name": "stg_pedidos", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "bronze/stg_pedidos.sql", "original_file_path": "models/bronze/stg_pedidos.sql", "unique_id": "model.meu_projeto_dbt_riocard.stg_pedidos", "fqn": ["meu_projeto_dbt_riocard", "bronze", "stg_pedidos"], "alias": "stg_pedidos", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze", "raw"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["bronze", "raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "bronze", "tags": ["bronze", "raw"]}, "created_at": 1750210279.056845, "relation_name": "\"db_source\".\"public_bronze\".\"stg_pedidos\"", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.bronze_itens_pedidos": {"database": "db_source", "schema": "public_bronze", "name": "bronze_itens_pedidos", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "bronze/bronze_itens_pedidos.sql", "original_file_path": "models/bronze/bronze_itens_pedidos.sql", "unique_id": "model.meu_projeto_dbt_riocard.bronze_itens_pedidos", "fqn": ["meu_projeto_dbt_riocard", "bronze", "bronze_itens_pedidos"], "alias": "bronze_itens_pedidos", "checksum": {"name": "sha256", "checksum": "d29eecd9cdaeedd7803dc384c05c8549d591ab6429246f9ee5e217c31320dcbe"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze", "raw"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["bronze", "raw"], "description": "Modelo bronze para a tabela de itens do pedido.", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/bronze/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/bronze/bronze_itens_pedidos.sql", "unrendered_config": {"materialized": "view", "schema": "bronze", "tags": ["bronze", "raw"]}, "created_at": 1750210279.377084, "relation_name": "\"db_source\".\"public_bronze\".\"bronze_itens_pedidos\"", "raw_code": "-- bronze_itens_pedidos.sql\n\n{{ config(materialized='view') }}\n\nSELECT\n    id,\n    pedido_id,\n    produto_id,\n    quantidade,\n    preco_unitario,\n    desconto_item,\n    valor_total,\n    observacoes,\n    updated_at,\n    created_by,\n    version\nFROM {{ source('public', 'itens_pedido') }}", "language": "sql", "refs": [], "sources": [["public", "itens_pedido"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.meu_projeto_dbt_riocard.public.itens_pedido"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/bronze/bronze_itens_pedidos.sql", "compiled": true, "compiled_code": "-- bronze_itens_pedidos.sql\n\n\n\nSELECT\n    id,\n    pedido_id,\n    produto_id,\n    quantidade,\n    preco_unitario,\n    desconto_item,\n    valor_total,\n    observacoes,\n    updated_at,\n    created_by,\n    version\nFROM \"db_source\".\"public\".\"itens_pedido\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.meu_projeto_dbt_riocard.silver_pedidos_incremental": {"database": "db_source", "schema": "public_silver", "name": "silver_pedidos_incremental", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "silver/silver_pedidos_incremental.sql", "original_file_path": "models/silver/silver_pedidos_incremental.sql", "unique_id": "model.meu_projeto_dbt_riocard.silver_pedidos_incremental", "fqn": ["meu_projeto_dbt_riocard", "silver", "silver_pedidos_incremental"], "alias": "silver_pedidos_incremental", "checksum": {"name": "sha256", "checksum": "f3e157ba3c38c7f7ba3d0bff787a8ce4d4b572564c62584261c9dcebded73c05"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["silver", "transformed", "silver", "incremental", "fact"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "append", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pedido_id", "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["silver", "transformed", "incremental", "fact"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/meu_projeto_dbt_riocard/models/silver/silver_pedidos_incremental.sql", "unrendered_config": {"materialized": "incremental", "schema": "silver", "tags": ["silver", "incremental", "fact"], "unique_key": "pedido_id", "incremental_strategy": "append", "on_schema_change": "sync_all_columns"}, "created_at": 1750210279.058589, "relation_name": "\"db_source\".\"public_silver\".\"silver_pedidos_incremental\"", "raw_code": "-- Modelo Incremental Avan\u00e7ado para Pedidos\n-- Demonstra capacidades de merge inteligente e detec\u00e7\u00e3o de mudan\u00e7as\n\n{{ config(\n    materialized='incremental',\n    unique_key='pedido_id',\n    incremental_strategy='append',\n    on_schema_change='sync_all_columns',\n    tags=['silver', 'incremental', 'fact']\n) }}\n\nWITH source_data AS (\n    SELECT \n        id as pedido_id,\n        cliente_id,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        status,\n        data_pedido,\n        updated_at,\n        -- Gerar hash para detectar mudan\u00e7as nos dados\n        {{ generate_row_hash(['status', 'valor_liquido', 'desconto']) }} as row_hash,\n        -- Adicionar colunas de auditoria\n        {{ add_audit_columns() }}\n    FROM {{ ref('bronze_pedidos') }}\n    \n    {% if is_incremental() %}\n        -- Estrat\u00e9gia h\u00edbrida: novos registros + registros modificados\n        WHERE updated_at > (SELECT MAX(updated_at) FROM {{ this }})\n           OR id IN (\n               -- Detectar registros que mudaram comparando hash\n               SELECT DISTINCT b.id\n               FROM {{ ref('bronze_pedidos') }} b\n               INNER JOIN {{ this }} t ON b.id = t.pedido_id\n               WHERE {{ generate_row_hash(['b.status', 'b.valor_liquido', 'b.desconto']) }} != t.row_hash\n           )\n    {% endif %}\n),\n\nenriched_data AS (\n    SELECT \n        s.*,\n        -- Enriquecimentos e valida\u00e7\u00f5es\n        CASE \n            WHEN valor_liquido <= 0 THEN 'ERRO: Valor inv\u00e1lido'\n            WHEN status NOT IN ('pendente', 'confirmado', 'enviado', 'entregue', 'cancelado') \n            THEN 'AVISO: Status desconhecido'\n            ELSE 'OK'\n        END as data_quality_flag,\n        \n        -- Categoriza\u00e7\u00e3o de valor\n        {{ classify_customer_value('valor_liquido') }} as categoria_valor,\n        \n        -- M\u00e9tricas derivadas\n        valor_liquido / NULLIF(1, 0) as valor_liquido_unitario,\n        \n        -- Flags de neg\u00f3cio\n        CASE WHEN valor_liquido > 1000 THEN true ELSE false END as is_high_value,\n        CASE WHEN data_pedido = CURRENT_DATE THEN true ELSE false END as is_today\n        \n    FROM source_data s\n)\n\nSELECT * FROM enriched_data\n\n-- Adicionar coment\u00e1rio sobre a estrat\u00e9gia incremental\n-- Este modelo usa uma abordagem h\u00edbrida que:\n-- 1. Captura novos registros baseado em updated_at\n-- 2. Detecta mudan\u00e7as em registros existentes usando hash\n-- 3. Aplica merge inteligente apenas nas colunas que podem mudar\n-- 4. Inclui valida\u00e7\u00f5es de qualidade de dados em tempo real", "language": "sql", "refs": [{"name": "bronze_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.meu_projeto_dbt_riocard.generate_row_hash", "macro.meu_projeto_dbt_riocard.add_audit_columns", "macro.dbt.is_incremental", "macro.meu_projeto_dbt_riocard.classify_customer_value"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_pedidos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/silver/silver_pedidos_incremental.sql", "compiled": true, "compiled_code": "-- Modelo Incremental Avan\u00e7ado para Pedidos\n-- Demonstra capacidades de merge inteligente e detec\u00e7\u00e3o de mudan\u00e7as\n\n\n\nWITH source_data AS (\n    SELECT \n        id as pedido_id,\n        cliente_id,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        status,\n        data_pedido,\n        updated_at,\n        -- Gerar hash para detectar mudan\u00e7as nos dados\n        \n    MD5(CONCAT(\n        \n            COALESCE(status::text, ''),\n            COALESCE(valor_liquido::text, ''),\n            COALESCE(desconto::text, '')\n    ))\n as row_hash,\n        -- Adicionar colunas de auditoria\n        \n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '7b0ac06c-66b2-40fc-80a9-d80ace88de6b' as dbt_run_id,\n    'system' as dbt_created_by\n\n    FROM \"db_source\".\"public_bronze\".\"bronze_pedidos\"\n    \n    \n        -- Estrat\u00e9gia h\u00edbrida: novos registros + registros modificados\n        WHERE updated_at > (SELECT MAX(updated_at) FROM \"db_source\".\"public_silver\".\"silver_pedidos_incremental\")\n           OR id IN (\n               -- Detectar registros que mudaram comparando hash\n               SELECT DISTINCT b.id\n               FROM \"db_source\".\"public_bronze\".\"bronze_pedidos\" b\n               INNER JOIN \"db_source\".\"public_silver\".\"silver_pedidos_incremental\" t ON b.id = t.pedido_id\n               WHERE \n    MD5(CONCAT(\n        \n            COALESCE(b.status::text, ''),\n            COALESCE(b.valor_liquido::text, ''),\n            COALESCE(b.desconto::text, '')\n    ))\n != t.row_hash\n           )\n    \n),\n\nenriched_data AS (\n    SELECT \n        s.*,\n        -- Enriquecimentos e valida\u00e7\u00f5es\n        CASE \n            WHEN valor_liquido <= 0 THEN 'ERRO: Valor inv\u00e1lido'\n            WHEN status NOT IN ('pendente', 'confirmado', 'enviado', 'entregue', 'cancelado') \n            THEN 'AVISO: Status desconhecido'\n            ELSE 'OK'\n        END as data_quality_flag,\n        \n        -- Categoriza\u00e7\u00e3o de valor\n        \n    CASE \n        WHEN valor_liquido >= 10000 THEN 'VIP'\n        WHEN valor_liquido >= 5000 THEN 'Premium'\n        WHEN valor_liquido >= 1000 THEN 'Regular'\n        ELSE 'B\u00e1sico'\n    END\n as categoria_valor,\n        \n        -- M\u00e9tricas derivadas\n        valor_liquido / NULLIF(1, 0) as valor_liquido_unitario,\n        \n        -- Flags de neg\u00f3cio\n        CASE WHEN valor_liquido > 1000 THEN true ELSE false END as is_high_value,\n        CASE WHEN data_pedido = CURRENT_DATE THEN true ELSE false END as is_today\n        \n    FROM source_data s\n)\n\nSELECT * FROM enriched_data\n\n-- Adicionar coment\u00e1rio sobre a estrat\u00e9gia incremental\n-- Este modelo usa uma abordagem h\u00edbrida que:\n-- 1. Captura novos registros baseado em updated_at\n-- 2. Detecta mudan\u00e7as em registros existentes usando hash\n-- 3. Aplica merge inteligente apenas nas colunas que podem mudar\n-- 4. Inclui valida\u00e7\u00f5es de qualidade de dados em tempo real", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.silver_clientes": {"database": "db_source", "schema": "public_silver", "name": "silver_clientes", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "silver/silver_clientes.sql", "original_file_path": "models/silver/silver_clientes.sql", "unique_id": "model.meu_projeto_dbt_riocard.silver_clientes", "fqn": ["meu_projeto_dbt_riocard", "silver", "silver_clientes"], "alias": "silver_clientes", "checksum": {"name": "sha256", "checksum": "1e7466d0a6563604ca47a206ce782bb3e839dd20fe648d7867350c4102d10e9a"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["silver", "transformed", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["silver", "transformed"], "description": "Modelo Silver para clientes com enriquecimentos e dados derivados.\n", "columns": {"cliente_id_origem": {"name": "cliente_id_origem", "description": "Identificador \u00fanico do cliente na origem", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome_completo": {"name": "nome_completo", "description": "Nome completo do cliente padronizado em Title Case", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "email_padronizado": {"name": "email_padronizado", "description": "Email padronizado em lowercase", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_cadastro_ts": {"name": "data_cadastro_ts", "description": "Timestamp de cadastro do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ultima_atualizacao_ts": {"name": "ultima_atualizacao_ts", "description": "Timestamp da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_replicacao_airbyte": {"name": "data_replicacao_airbyte", "description": "Data e hora da replica\u00e7\u00e3o pelo Airbyte", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "dominio_email": {"name": "dominio_email", "description": "Dom\u00ednio extra\u00eddo do email do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ano_cadastro": {"name": "ano_cadastro", "description": "Ano de cadastro do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/silver/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/silver/silver_clientes.sql", "unrendered_config": {"materialized": "table", "schema": "silver", "tags": ["silver"]}, "created_at": 1750210279.484403, "relation_name": "\"db_source\".\"public_silver\".\"silver_clientes\"", "raw_code": "-- models/silver/silver_clientes.sql\n\n-- Este modelo transforma os dados brutos dos clientes da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e enriquecimentos.\n\n{{ config(\n    tags=[\"silver\"],\n    materialized='table'\n) }}\n\nWITH bronze_clientes AS (\n    SELECT\n        id AS cliente_id_origem,\n        nome,\n        email,\n        telefone,\n        cpf,\n        data_nascimento,\n        endereco,\n        status,\n        tipo_cliente,\n        limite_credito,\n        data_cadastro,\n        updated_at\n    FROM\n        {{ ref('bronze_clientes') }}\n)\n\nSELECT\n    cliente_id_origem,\n    INITCAP(TRIM(nome)) AS nome_completo,\n    LOWER(TRIM(email)) AS email_padronizado,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    CAST(data_cadastro AS TIMESTAMP) AS data_cadastro_ts,\n    CAST(updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    SUBSTRING(email FROM POSITION('@' IN email) + 1) AS dominio_email,\n    EXTRACT(YEAR FROM CAST(data_cadastro AS TIMESTAMP)) AS ano_cadastro,\n    CASE \n        WHEN data_nascimento IS NOT NULL \n        THEN EXTRACT(YEAR FROM AGE(data_nascimento))\n        ELSE NULL \n    END AS idade_estimada\nFROM\n    bronze_clientes\nWHERE\n    email IS NOT NULL \n    AND nome IS NOT NULL\n\n-- Adicionar aqui mais transforma\u00e7\u00f5es conforme necess\u00e1rio:\n-- - Valida\u00e7\u00e3o de formato de email\n-- - Tratamento de dados nulos ou inv\u00e1lidos\n-- - Jun\u00e7\u00e3o com outras tabelas para enriquecimento (ex: dados demogr\u00e1ficos)", "language": "sql", "refs": [{"name": "bronze_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.bronze_clientes"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/silver/silver_clientes.sql", "compiled": true, "compiled_code": "-- models/silver/silver_clientes.sql\n\n-- Este modelo transforma os dados brutos dos clientes da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e enriquecimentos.\n\n\n\nWITH bronze_clientes AS (\n    SELECT\n        id AS cliente_id_origem,\n        nome,\n        email,\n        telefone,\n        cpf,\n        data_nascimento,\n        endereco,\n        status,\n        tipo_cliente,\n        limite_credito,\n        data_cadastro,\n        updated_at\n    FROM\n        \"db_source\".\"public_bronze\".\"bronze_clientes\"\n)\n\nSELECT\n    cliente_id_origem,\n    INITCAP(TRIM(nome)) AS nome_completo,\n    LOWER(TRIM(email)) AS email_padronizado,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    CAST(data_cadastro AS TIMESTAMP) AS data_cadastro_ts,\n    CAST(updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    SUBSTRING(email FROM POSITION('@' IN email) + 1) AS dominio_email,\n    EXTRACT(YEAR FROM CAST(data_cadastro AS TIMESTAMP)) AS ano_cadastro,\n    CASE \n        WHEN data_nascimento IS NOT NULL \n        THEN EXTRACT(YEAR FROM AGE(data_nascimento))\n        ELSE NULL \n    END AS idade_estimada\nFROM\n    bronze_clientes\nWHERE\n    email IS NOT NULL \n    AND nome IS NOT NULL\n\n-- Adicionar aqui mais transforma\u00e7\u00f5es conforme necess\u00e1rio:\n-- - Valida\u00e7\u00e3o de formato de email\n-- - Tratamento de dados nulos ou inv\u00e1lidos\n-- - Jun\u00e7\u00e3o com outras tabelas para enriquecimento (ex: dados demogr\u00e1ficos)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["cliente_id_origem"], "time_spine": null}, "model.meu_projeto_dbt_riocard.fct_pedidos": {"database": "db_source", "schema": "public_silver", "name": "fct_pedidos", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "silver/fct_pedidos.sql", "original_file_path": "models/silver/fct_pedidos.sql", "unique_id": "model.meu_projeto_dbt_riocard.fct_pedidos", "fqn": ["meu_projeto_dbt_riocard", "silver", "fct_pedidos"], "alias": "fct_pedidos", "checksum": {"name": "sha256", "checksum": "5fb1f4430fe17ef0e8d71f1703523f08042a3836694481de3e7bbe66362fb509"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["silver", "transformed", "silver", "fact"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["silver", "transformed", "fact"], "description": "Fato de pedidos. Cont\u00e9m dados limpos e transformados, com m\u00e9tricas calculadas como valor_total_pedido.\n", "columns": {"pedido_id": {"name": "pedido_id", "description": "Identificador \u00fanico do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "cliente_id": {"name": "cliente_id", "description": "Identificador do cliente que fez o pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome_cliente": {"name": "nome_cliente", "description": "Nome do cliente, para facilitar an\u00e1lises", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "numero_pedido": {"name": "numero_pedido", "description": "N\u00famero do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_bruto": {"name": "valor_bruto", "description": "Valor bruto do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_liquido": {"name": "valor_liquido", "description": "Valor l\u00edquido do pedido ap\u00f3s descontos", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_pedido": {"name": "data_pedido", "description": "Data e hora em que o pedido foi registrado", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ano_pedido": {"name": "ano_pedido", "description": "Ano extra\u00eddo da data do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "mes_pedido": {"name": "mes_pedido", "description": "M\u00eas extra\u00eddo da data do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "dia_pedido": {"name": "dia_pedido", "description": "Dia extra\u00eddo da data do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_ultima_atualizacao_pedido": {"name": "data_ultima_atualizacao_pedido", "description": "Data e hora da \u00faltima atualiza\u00e7\u00e3o dos dados do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_ingestao_airbyte": {"name": "data_ingestao_airbyte", "description": "Data e hora em que o registro foi ingerido pelo Airbyte", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/silver/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/silver/fct_pedidos.sql", "unrendered_config": {"materialized": "table", "schema": "silver", "tags": ["silver", "fact"]}, "created_at": 1750210279.4832718, "relation_name": "\"db_source\".\"public_silver\".\"fct_pedidos\"", "raw_code": "-- models/silver/fct_pedidos.sql\n-- Este modelo cria a tabela de fatos para pedidos, transformando dados de bronze_pedidos\n-- e juntando com dimens\u00f5es como bronze_clientes.\n\n{{ config(\n    materialized='table',\n    tags=['silver', 'fact']\n) }}\n\n-- Silver: Fatos de pedidos com estrutura empresarial\n-- Nova estrutura completa de e-commerce\n\nWITH bronze_pedidos AS (\n    SELECT\n        id as pedido_id,\n        cliente_id,\n        numero_pedido,\n        data_pedido,\n        status,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        metodo_pagamento,\n        canal_venda,\n        observacoes,\n        data_entrega_prevista,\n        data_entrega_real,\n        updated_at\n    FROM {{ ref('bronze_pedidos') }}\n),\n\nbronze_clientes AS (\n    SELECT\n        id as cliente_id,\n        nome as nome_cliente,\n        email as email_cliente,\n        tipo_cliente,\n        status as status_cliente\n    FROM {{ ref('bronze_clientes') }}\n)\n\nSELECT\n    p.pedido_id,\n    p.cliente_id,\n    bc.nome_cliente,\n    bc.tipo_cliente,\n    p.numero_pedido,\n    p.status as status_pedido,\n    p.valor_bruto,\n    p.desconto,\n    p.valor_liquido,\n    p.metodo_pagamento,\n    p.canal_venda,\n    p.observacoes,\n    p.data_pedido,\n    p.data_entrega_prevista,\n    p.data_entrega_real,\n    EXTRACT(YEAR FROM p.data_pedido) AS ano_pedido,\n    EXTRACT(MONTH FROM p.data_pedido) AS mes_pedido,\n    EXTRACT(DAY FROM p.data_pedido) AS dia_pedido,\n    p.updated_at,\n    -- C\u00e1lculos derivados\n    CASE \n        WHEN p.valor_bruto > 0 \n        THEN (p.desconto / p.valor_bruto * 100)\n        ELSE 0 \n    END AS percentual_desconto,\n    CASE \n        WHEN p.data_entrega_real IS NOT NULL AND p.data_entrega_prevista IS NOT NULL\n        THEN p.data_entrega_real - p.data_entrega_prevista\n        ELSE NULL\n    END AS atraso_entrega_dias\nFROM bronze_pedidos p\nLEFT JOIN bronze_clientes bc ON p.cliente_id = bc.cliente_id\nWHERE p.valor_bruto > 0  -- Valida\u00e7\u00e3o b\u00e1sica", "language": "sql", "refs": [{"name": "bronze_pedidos", "package": null, "version": null}, {"name": "bronze_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.bronze_pedidos", "model.meu_projeto_dbt_riocard.bronze_clientes"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/silver/fct_pedidos.sql", "compiled": true, "compiled_code": "-- models/silver/fct_pedidos.sql\n-- Este modelo cria a tabela de fatos para pedidos, transformando dados de bronze_pedidos\n-- e juntando com dimens\u00f5es como bronze_clientes.\n\n\n\n-- Silver: Fatos de pedidos com estrutura empresarial\n-- Nova estrutura completa de e-commerce\n\nWITH bronze_pedidos AS (\n    SELECT\n        id as pedido_id,\n        cliente_id,\n        numero_pedido,\n        data_pedido,\n        status,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        metodo_pagamento,\n        canal_venda,\n        observacoes,\n        data_entrega_prevista,\n        data_entrega_real,\n        updated_at\n    FROM \"db_source\".\"public_bronze\".\"bronze_pedidos\"\n),\n\nbronze_clientes AS (\n    SELECT\n        id as cliente_id,\n        nome as nome_cliente,\n        email as email_cliente,\n        tipo_cliente,\n        status as status_cliente\n    FROM \"db_source\".\"public_bronze\".\"bronze_clientes\"\n)\n\nSELECT\n    p.pedido_id,\n    p.cliente_id,\n    bc.nome_cliente,\n    bc.tipo_cliente,\n    p.numero_pedido,\n    p.status as status_pedido,\n    p.valor_bruto,\n    p.desconto,\n    p.valor_liquido,\n    p.metodo_pagamento,\n    p.canal_venda,\n    p.observacoes,\n    p.data_pedido,\n    p.data_entrega_prevista,\n    p.data_entrega_real,\n    EXTRACT(YEAR FROM p.data_pedido) AS ano_pedido,\n    EXTRACT(MONTH FROM p.data_pedido) AS mes_pedido,\n    EXTRACT(DAY FROM p.data_pedido) AS dia_pedido,\n    p.updated_at,\n    -- C\u00e1lculos derivados\n    CASE \n        WHEN p.valor_bruto > 0 \n        THEN (p.desconto / p.valor_bruto * 100)\n        ELSE 0 \n    END AS percentual_desconto,\n    CASE \n        WHEN p.data_entrega_real IS NOT NULL AND p.data_entrega_prevista IS NOT NULL\n        THEN p.data_entrega_real - p.data_entrega_prevista\n        ELSE NULL\n    END AS atraso_entrega_dias\nFROM bronze_pedidos p\nLEFT JOIN bronze_clientes bc ON p.cliente_id = bc.cliente_id\nWHERE p.valor_bruto > 0  -- Valida\u00e7\u00e3o b\u00e1sica", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["pedido_id"], "time_spine": null}, "model.meu_projeto_dbt_riocard.silver_produtos": {"database": "db_source", "schema": "public_silver", "name": "silver_produtos", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "silver/silver_produtos.sql", "original_file_path": "models/silver/silver_produtos.sql", "unique_id": "model.meu_projeto_dbt_riocard.silver_produtos", "fqn": ["meu_projeto_dbt_riocard", "silver", "silver_produtos"], "alias": "silver_produtos", "checksum": {"name": "sha256", "checksum": "c20f24348f4298e502587c285442933b1511e084841540cec6b7d831390a3b8f"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["silver", "transformed", "silver", "produtos", "ecommerce"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["silver", "transformed", "produtos", "ecommerce"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/meu_projeto_dbt_riocard/models/silver/silver_produtos.sql", "unrendered_config": {"materialized": "table", "schema": "silver", "tags": ["silver", "produtos", "ecommerce"]}, "created_at": 1750210279.0692632, "relation_name": "\"db_source\".\"public_silver\".\"silver_produtos\"", "raw_code": "-- models/silver/silver_produtos.sql\n\n-- Este modelo transforma os dados brutos dos produtos da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e c\u00e1lculos para e-commerce.\n\n{{ config(\n    tags=[\"silver\", \"produtos\", \"ecommerce\"],\n    materialized='table'\n) }}\n\nWITH bronze_produtos AS (\n    SELECT\n        id AS produto_id_origem,\n        codigo_produto,\n        nome,\n        categoria,\n        subcategoria,\n        marca,\n        preco_custo,\n        preco_venda,\n        margem_lucro,\n        estoque_atual,\n        estoque_minimo,\n        ativo,\n        peso,\n        dimensoes,\n        descricao,\n        tags,\n        data_lancamento,\n        fornecedor_id,\n        updated_at\n    FROM\n        {{ ref('bronze_produtos') }}\n)\n\nSELECT\n    p.produto_id_origem,\n    TRIM(p.codigo_produto) AS codigo_produto_clean,\n    INITCAP(TRIM(p.nome)) AS nome_produto_clean,\n    UPPER(TRIM(p.categoria)) AS categoria_padronizada,\n    UPPER(TRIM(p.subcategoria)) AS subcategoria_padronizada,\n    INITCAP(TRIM(p.marca)) AS marca_clean,\n    CAST(p.preco_custo AS DECIMAL(18, 2)) AS preco_custo_decimal,\n    CAST(p.preco_venda AS DECIMAL(18, 2)) AS preco_venda_decimal,\n    CAST(p.margem_lucro AS DECIMAL(8, 2)) AS margem_lucro_decimal,\n    p.estoque_atual,\n    p.estoque_minimo,\n    p.ativo,\n    p.peso,\n    p.dimensoes,\n    p.descricao,\n    p.tags,\n    p.data_lancamento,\n    p.fornecedor_id,\n    CAST(p.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    CASE \n        WHEN p.estoque_atual <= p.estoque_minimo THEN 'Estoque Baixo'\n        WHEN p.estoque_atual <= (p.estoque_minimo * 2) THEN 'Estoque Normal'\n        ELSE 'Estoque Alto'\n    END AS status_estoque,\n    CASE \n        WHEN p.margem_lucro >= 50 THEN 'Alta Margem'\n        WHEN p.margem_lucro >= 20 THEN 'Margem Normal'\n        WHEN p.margem_lucro > 0 THEN 'Baixa Margem'\n        ELSE 'Sem Margem'\n    END AS categoria_margem,\n    CASE \n        WHEN p.data_lancamento >= CURRENT_DATE - INTERVAL '30 days' THEN 'Lan\u00e7amento'\n        WHEN p.data_lancamento >= CURRENT_DATE - INTERVAL '365 days' THEN 'Recente'\n        ELSE 'Estabelecido'\n    END AS fase_produto\nFROM\n    bronze_produtos p\nWHERE\n    p.nome IS NOT NULL \n    AND p.preco_venda > 0\n    AND p.ativo = true", "language": "sql", "refs": [{"name": "bronze_produtos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.bronze_produtos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/silver/silver_produtos.sql", "compiled": true, "compiled_code": "-- models/silver/silver_produtos.sql\n\n-- Este modelo transforma os dados brutos dos produtos da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e c\u00e1lculos para e-commerce.\n\n\n\nWITH bronze_produtos AS (\n    SELECT\n        id AS produto_id_origem,\n        codigo_produto,\n        nome,\n        categoria,\n        subcategoria,\n        marca,\n        preco_custo,\n        preco_venda,\n        margem_lucro,\n        estoque_atual,\n        estoque_minimo,\n        ativo,\n        peso,\n        dimensoes,\n        descricao,\n        tags,\n        data_lancamento,\n        fornecedor_id,\n        updated_at\n    FROM\n        \"db_source\".\"public_bronze\".\"bronze_produtos\"\n)\n\nSELECT\n    p.produto_id_origem,\n    TRIM(p.codigo_produto) AS codigo_produto_clean,\n    INITCAP(TRIM(p.nome)) AS nome_produto_clean,\n    UPPER(TRIM(p.categoria)) AS categoria_padronizada,\n    UPPER(TRIM(p.subcategoria)) AS subcategoria_padronizada,\n    INITCAP(TRIM(p.marca)) AS marca_clean,\n    CAST(p.preco_custo AS DECIMAL(18, 2)) AS preco_custo_decimal,\n    CAST(p.preco_venda AS DECIMAL(18, 2)) AS preco_venda_decimal,\n    CAST(p.margem_lucro AS DECIMAL(8, 2)) AS margem_lucro_decimal,\n    p.estoque_atual,\n    p.estoque_minimo,\n    p.ativo,\n    p.peso,\n    p.dimensoes,\n    p.descricao,\n    p.tags,\n    p.data_lancamento,\n    p.fornecedor_id,\n    CAST(p.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    CASE \n        WHEN p.estoque_atual <= p.estoque_minimo THEN 'Estoque Baixo'\n        WHEN p.estoque_atual <= (p.estoque_minimo * 2) THEN 'Estoque Normal'\n        ELSE 'Estoque Alto'\n    END AS status_estoque,\n    CASE \n        WHEN p.margem_lucro >= 50 THEN 'Alta Margem'\n        WHEN p.margem_lucro >= 20 THEN 'Margem Normal'\n        WHEN p.margem_lucro > 0 THEN 'Baixa Margem'\n        ELSE 'Sem Margem'\n    END AS categoria_margem,\n    CASE \n        WHEN p.data_lancamento >= CURRENT_DATE - INTERVAL '30 days' THEN 'Lan\u00e7amento'\n        WHEN p.data_lancamento >= CURRENT_DATE - INTERVAL '365 days' THEN 'Recente'\n        ELSE 'Estabelecido'\n    END AS fase_produto\nFROM\n    bronze_produtos p\nWHERE\n    p.nome IS NOT NULL \n    AND p.preco_venda > 0\n    AND p.ativo = true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.silver_pedidos": {"database": "db_source", "schema": "public_silver", "name": "silver_pedidos", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "silver/silver_pedidos.sql", "original_file_path": "models/silver/silver_pedidos.sql", "unique_id": "model.meu_projeto_dbt_riocard.silver_pedidos", "fqn": ["meu_projeto_dbt_riocard", "silver", "silver_pedidos"], "alias": "silver_pedidos", "checksum": {"name": "sha256", "checksum": "7bcbbb8dbd1da93234a97ce0a84b1cd383beb7c5e5d18824784c324dae8106c6"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["silver", "transformed", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["silver", "transformed"], "description": "Modelo Silver para pedidos com c\u00e1lculos e dados derivados.\n", "columns": {"pedido_id_origem": {"name": "pedido_id_origem", "description": "Identificador \u00fanico do pedido na origem", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "cliente_id_origem": {"name": "cliente_id_origem", "description": "Identificador do cliente que fez o pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "produto_nome": {"name": "produto_nome", "description": "Nome do produto padronizado", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_bruto_decimal": {"name": "valor_bruto_decimal", "description": "Valor bruto do pedido como decimal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_liquido_decimal": {"name": "valor_liquido_decimal", "description": "Valor l\u00edquido do pedido como decimal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_pedido_ts": {"name": "data_pedido_ts", "description": "Timestamp do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ultima_atualizacao_ts": {"name": "ultima_atualizacao_ts", "description": "Timestamp da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_replicacao_airbyte": {"name": "data_replicacao_airbyte", "description": "Data e hora da replica\u00e7\u00e3o pelo Airbyte", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ano_pedido": {"name": "ano_pedido", "description": "Ano do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "mes_pedido": {"name": "mes_pedido", "description": "M\u00eas do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "dia_pedido": {"name": "dia_pedido", "description": "Dia do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/silver/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/silver/silver_pedidos.sql", "unrendered_config": {"materialized": "table", "schema": "silver", "tags": ["silver"]}, "created_at": 1750210279.485334, "relation_name": "\"db_source\".\"public_silver\".\"silver_pedidos\"", "raw_code": "-- models/silver/silver_pedidos.sql\n\n-- Este modelo transforma os dados brutos dos pedidos da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e c\u00e1lculos.\n\n{{ config(\n    tags=[\"silver\"],\n    materialized='table'\n) }}\n\nWITH bronze_pedidos AS (\n    SELECT\n        id AS pedido_id_origem,\n        cliente_id AS cliente_id_origem,\n        numero_pedido,\n        data_pedido,\n        status,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        metodo_pagamento,\n        canal_venda,\n        observacoes,\n        data_entrega_prevista,\n        data_entrega_real,\n        updated_at\n    FROM\n        {{ ref('bronze_pedidos') }}\n)\n\nSELECT\n    p.pedido_id_origem,\n    p.cliente_id_origem,\n    TRIM(p.numero_pedido) AS numero_pedido_clean,\n    p.status,\n    CAST(p.valor_bruto AS DECIMAL(18, 2)) AS valor_bruto_decimal,\n    CAST(p.desconto AS DECIMAL(18, 2)) AS desconto_decimal,\n    CAST(p.valor_liquido AS DECIMAL(18, 2)) AS valor_liquido_decimal,\n    p.metodo_pagamento,\n    p.canal_venda,\n    p.observacoes,\n    CAST(p.data_pedido AS TIMESTAMP) AS data_pedido_ts,\n    p.data_entrega_prevista,\n    p.data_entrega_real,\n    CAST(p.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    EXTRACT(YEAR FROM CAST(p.data_pedido AS TIMESTAMP)) AS ano_pedido,\n    EXTRACT(MONTH FROM CAST(p.data_pedido AS TIMESTAMP)) AS mes_pedido,\n    EXTRACT(DAY FROM CAST(p.data_pedido AS TIMESTAMP)) AS dia_pedido,\n    -- C\u00e1lculos derivados\n    CASE \n        WHEN p.valor_bruto > 0 \n        THEN (p.desconto / p.valor_bruto * 100)\n        ELSE 0 \n    END AS percentual_desconto,\n    CASE \n        WHEN p.data_entrega_real IS NOT NULL AND p.data_entrega_prevista IS NOT NULL\n        THEN p.data_entrega_real - p.data_entrega_prevista\n        ELSE NULL\n    END AS atraso_entrega_dias\nFROM\n    bronze_pedidos p\nWHERE\n    p.valor_bruto > 0 -- Garante dados v\u00e1lidos\n\n-- Adicionar aqui mais transforma\u00e7\u00f5es conforme necess\u00e1rio:\n-- - Categoriza\u00e7\u00e3o de produtos\n-- - Jun\u00e7\u00e3o com tabela de clientes para obter informa\u00e7\u00f5es do cliente no mesmo modelo (se fizer sentido)\n-- - Tratamento de devolu\u00e7\u00f5es ou cancelamentos (se aplic\u00e1vel)", "language": "sql", "refs": [{"name": "bronze_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.bronze_pedidos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/silver/silver_pedidos.sql", "compiled": true, "compiled_code": "-- models/silver/silver_pedidos.sql\n\n-- Este modelo transforma os dados brutos dos pedidos da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e c\u00e1lculos.\n\n\n\nWITH bronze_pedidos AS (\n    SELECT\n        id AS pedido_id_origem,\n        cliente_id AS cliente_id_origem,\n        numero_pedido,\n        data_pedido,\n        status,\n        valor_bruto,\n        desconto,\n        valor_liquido,\n        metodo_pagamento,\n        canal_venda,\n        observacoes,\n        data_entrega_prevista,\n        data_entrega_real,\n        updated_at\n    FROM\n        \"db_source\".\"public_bronze\".\"bronze_pedidos\"\n)\n\nSELECT\n    p.pedido_id_origem,\n    p.cliente_id_origem,\n    TRIM(p.numero_pedido) AS numero_pedido_clean,\n    p.status,\n    CAST(p.valor_bruto AS DECIMAL(18, 2)) AS valor_bruto_decimal,\n    CAST(p.desconto AS DECIMAL(18, 2)) AS desconto_decimal,\n    CAST(p.valor_liquido AS DECIMAL(18, 2)) AS valor_liquido_decimal,\n    p.metodo_pagamento,\n    p.canal_venda,\n    p.observacoes,\n    CAST(p.data_pedido AS TIMESTAMP) AS data_pedido_ts,\n    p.data_entrega_prevista,\n    p.data_entrega_real,\n    CAST(p.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    EXTRACT(YEAR FROM CAST(p.data_pedido AS TIMESTAMP)) AS ano_pedido,\n    EXTRACT(MONTH FROM CAST(p.data_pedido AS TIMESTAMP)) AS mes_pedido,\n    EXTRACT(DAY FROM CAST(p.data_pedido AS TIMESTAMP)) AS dia_pedido,\n    -- C\u00e1lculos derivados\n    CASE \n        WHEN p.valor_bruto > 0 \n        THEN (p.desconto / p.valor_bruto * 100)\n        ELSE 0 \n    END AS percentual_desconto,\n    CASE \n        WHEN p.data_entrega_real IS NOT NULL AND p.data_entrega_prevista IS NOT NULL\n        THEN p.data_entrega_real - p.data_entrega_prevista\n        ELSE NULL\n    END AS atraso_entrega_dias\nFROM\n    bronze_pedidos p\nWHERE\n    p.valor_bruto > 0 -- Garante dados v\u00e1lidos\n\n-- Adicionar aqui mais transforma\u00e7\u00f5es conforme necess\u00e1rio:\n-- - Categoriza\u00e7\u00e3o de produtos\n-- - Jun\u00e7\u00e3o com tabela de clientes para obter informa\u00e7\u00f5es do cliente no mesmo modelo (se fizer sentido)\n-- - Tratamento de devolu\u00e7\u00f5es ou cancelamentos (se aplic\u00e1vel)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["pedido_id_origem"], "time_spine": null}, "model.meu_projeto_dbt_riocard.dim_clientes": {"database": "db_source", "schema": "public_silver", "name": "dim_clientes", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "silver/dim_clientes.sql", "original_file_path": "models/silver/dim_clientes.sql", "unique_id": "model.meu_projeto_dbt_riocard.dim_clientes", "fqn": ["meu_projeto_dbt_riocard", "silver", "dim_clientes"], "alias": "dim_clientes", "checksum": {"name": "sha256", "checksum": "0cb945ec51dbcaef07cc033c334548878245baa82a8b2fdd1f534c9759e6b99a"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["silver", "transformed", "silver", "dimension"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["silver", "transformed", "dimension"], "description": "Dimens\u00e3o de clientes. Cont\u00e9m dados limpos e transformados, prontos para uso em an\u00e1lises e modelagem dimensional.\n", "columns": {"cliente_id": {"name": "cliente_id", "description": "Identificador \u00fanico do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome": {"name": "nome", "description": "Nome completo do cliente (limpo e padronizado)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "email_original": {"name": "email_original", "description": "Email original do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_cadastro": {"name": "data_cadastro", "description": "Data e hora de cadastro do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ultima_atualizacao": {"name": "ultima_atualizacao", "description": "Data e hora da \u00faltima atualiza\u00e7\u00e3o dos dados do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_ingestao_airbyte": {"name": "data_ingestao_airbyte", "description": "Data e hora em que o registro foi ingerido pelo Airbyte", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/silver/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/silver/dim_clientes.sql", "unrendered_config": {"materialized": "table", "schema": "silver", "tags": ["silver", "dimension"]}, "created_at": 1750210279.449533, "relation_name": "\"db_source\".\"public_silver\".\"dim_clientes\"", "raw_code": "-- models/silver/dim_clientes.sql\n-- Este modelo cria a dimens\u00e3o de clientes, limpando e transformando os dados de bronze_clientes.\n\n{{ config(\n    materialized='table',\n    tags=['silver', 'dimension']\n) }}\n\n-- Silver: Dimens\u00e3o de clientes limpa e enriquecida\n-- Estrutura empresarial completa\n\nSELECT\n    id as cliente_id,\n    nome,\n    LOWER(TRIM(email)) as email_limpo,\n    email as email_original,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    data_cadastro,\n    updated_at,\n    CASE \n        WHEN data_cadastro >= CURRENT_DATE - INTERVAL '30 days' THEN 'Novo'\n        WHEN data_cadastro >= CURRENT_DATE - INTERVAL '365 days' THEN 'Recente'\n        ELSE 'Antigo'\n    END as categoria_cliente,\n    CASE \n        WHEN email LIKE '%@gmail.com' THEN 'Gmail'\n        WHEN email LIKE '%@outlook.com' THEN 'Outlook'\n        WHEN email LIKE '%@yahoo.com' THEN 'Yahoo'\n        WHEN email LIKE '%@example.com' THEN 'Example'\n        ELSE 'Outro'\n    END as provedor_email,\n    CASE \n        WHEN tipo_cliente = 'pessoa_fisica' THEN 'PF'\n        WHEN tipo_cliente = 'pessoa_juridica' THEN 'PJ'\n        ELSE 'Outro'\n    END as tipo_cliente_abrev,\n    CASE \n        WHEN limite_credito >= 10000 THEN 'Alto'\n        WHEN limite_credito >= 5000 THEN 'M\u00e9dio'\n        WHEN limite_credito > 0 THEN 'Baixo'\n        ELSE 'Sem Limite'\n    END as categoria_credito\nFROM {{ ref('bronze_clientes') }}\nWHERE nome IS NOT NULL", "language": "sql", "refs": [{"name": "bronze_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.bronze_clientes"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/silver/dim_clientes.sql", "compiled": true, "compiled_code": "-- models/silver/dim_clientes.sql\n-- Este modelo cria a dimens\u00e3o de clientes, limpando e transformando os dados de bronze_clientes.\n\n\n\n-- Silver: Dimens\u00e3o de clientes limpa e enriquecida\n-- Estrutura empresarial completa\n\nSELECT\n    id as cliente_id,\n    nome,\n    LOWER(TRIM(email)) as email_limpo,\n    email as email_original,\n    telefone,\n    cpf,\n    data_nascimento,\n    endereco,\n    status,\n    tipo_cliente,\n    limite_credito,\n    data_cadastro,\n    updated_at,\n    CASE \n        WHEN data_cadastro >= CURRENT_DATE - INTERVAL '30 days' THEN 'Novo'\n        WHEN data_cadastro >= CURRENT_DATE - INTERVAL '365 days' THEN 'Recente'\n        ELSE 'Antigo'\n    END as categoria_cliente,\n    CASE \n        WHEN email LIKE '%@gmail.com' THEN 'Gmail'\n        WHEN email LIKE '%@outlook.com' THEN 'Outlook'\n        WHEN email LIKE '%@yahoo.com' THEN 'Yahoo'\n        WHEN email LIKE '%@example.com' THEN 'Example'\n        ELSE 'Outro'\n    END as provedor_email,\n    CASE \n        WHEN tipo_cliente = 'pessoa_fisica' THEN 'PF'\n        WHEN tipo_cliente = 'pessoa_juridica' THEN 'PJ'\n        ELSE 'Outro'\n    END as tipo_cliente_abrev,\n    CASE \n        WHEN limite_credito >= 10000 THEN 'Alto'\n        WHEN limite_credito >= 5000 THEN 'M\u00e9dio'\n        WHEN limite_credito > 0 THEN 'Baixo'\n        ELSE 'Sem Limite'\n    END as categoria_credito\nFROM \"db_source\".\"public_bronze\".\"bronze_clientes\"\nWHERE nome IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["cliente_id", "email_original"], "time_spine": null}, "model.meu_projeto_dbt_riocard.silver_leads": {"database": "db_source", "schema": "public_silver", "name": "silver_leads", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "silver/silver_leads.sql", "original_file_path": "models/silver/silver_leads.sql", "unique_id": "model.meu_projeto_dbt_riocard.silver_leads", "fqn": ["meu_projeto_dbt_riocard", "silver", "silver_leads"], "alias": "silver_leads", "checksum": {"name": "sha256", "checksum": "70a560bdd1335bbbd496f4d2b9410c607652e94baaa1d02bde5f6bda3b128aeb"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": ["silver", "transformed", "silver", "leads", "crm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["silver", "transformed", "leads", "crm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/meu_projeto_dbt_riocard/models/silver/silver_leads.sql", "unrendered_config": {"materialized": "table", "schema": "silver", "tags": ["silver", "leads", "crm"]}, "created_at": 1750210279.071968, "relation_name": "\"db_source\".\"public_silver\".\"silver_leads\"", "raw_code": "-- models/silver/silver_leads.sql\n\n-- Este modelo transforma os dados brutos dos leads da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e scoring para CRM.\n\n{{ config(\n    tags=[\"silver\", \"leads\", \"crm\"],\n    materialized='table'\n) }}\n\nWITH bronze_leads AS (\n    SELECT\n        id AS lead_id_origem,\n        nome,\n        email,\n        telefone,\n        empresa,\n        cargo,\n        fonte,\n        campanha_id,\n        score,\n        status,\n        interesse,\n        orcamento_estimado,\n        data_contato,\n        data_conversao,\n        observacoes,\n        tags,\n        ultima_atividade,\n        updated_at\n    FROM\n        {{ ref('bronze_leads') }}\n)\n\nSELECT\n    l.lead_id_origem,\n    INITCAP(TRIM(l.nome)) AS nome_lead_clean,\n    LOWER(TRIM(l.email)) AS email_lead_clean,\n    l.telefone,\n    INITCAP(TRIM(l.empresa)) AS empresa_clean,\n    INITCAP(TRIM(l.cargo)) AS cargo_clean,\n    UPPER(TRIM(l.fonte)) AS fonte_padronizada,\n    l.campanha_id,\n    l.score,\n    UPPER(TRIM(l.status)) AS status_padronizado,\n    UPPER(TRIM(l.interesse)) AS interesse_padronizado,\n    CAST(l.orcamento_estimado AS DECIMAL(18, 2)) AS orcamento_estimado_decimal,\n    CAST(l.data_contato AS DATE) AS data_contato_clean,\n    CAST(l.data_conversao AS DATE) AS data_conversao_clean,\n    l.observacoes,\n    l.tags,\n    CAST(l.ultima_atividade AS TIMESTAMP) AS ultima_atividade_ts,\n    CAST(l.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    CASE \n        WHEN l.score >= 80 THEN 'Lead Quente'\n        WHEN l.score >= 50 THEN 'Lead Morno'\n        WHEN l.score > 0 THEN 'Lead Frio'\n        ELSE 'Sem Score'\n    END AS categoria_score,\n    CASE \n        WHEN l.orcamento_estimado >= 50000 THEN 'Alto Valor'\n        WHEN l.orcamento_estimado >= 10000 THEN 'M\u00e9dio Valor'\n        WHEN l.orcamento_estimado > 0 THEN 'Baixo Valor'\n        ELSE 'Valor N\u00e3o Informado'\n    END AS categoria_orcamento,\n    CASE \n        WHEN l.data_conversao IS NOT NULL THEN 'Convertido'\n        WHEN l.status = 'QUALIFICADO' THEN 'Qualificado'\n        WHEN l.status = 'NOVO' THEN 'Novo'\n        ELSE 'Em Processo'\n    END AS fase_funil,\n    CASE \n        WHEN l.ultima_atividade >= CURRENT_TIMESTAMP - INTERVAL '7 days' THEN 'Ativo'\n        WHEN l.ultima_atividade >= CURRENT_TIMESTAMP - INTERVAL '30 days' THEN 'Inativo Recente'\n        ELSE 'Inativo'\n    END AS status_atividade,\n    SUBSTRING(l.email FROM POSITION('@' IN l.email) + 1) AS dominio_email_lead\nFROM\n    bronze_leads l\nWHERE\n    l.nome IS NOT NULL \n    AND l.email IS NOT NULL", "language": "sql", "refs": [{"name": "bronze_leads", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.bronze_leads"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/silver/silver_leads.sql", "compiled": true, "compiled_code": "-- models/silver/silver_leads.sql\n\n-- Este modelo transforma os dados brutos dos leads da camada bronze,\n-- aplicando limpezas, padroniza\u00e7\u00f5es e scoring para CRM.\n\n\n\nWITH bronze_leads AS (\n    SELECT\n        id AS lead_id_origem,\n        nome,\n        email,\n        telefone,\n        empresa,\n        cargo,\n        fonte,\n        campanha_id,\n        score,\n        status,\n        interesse,\n        orcamento_estimado,\n        data_contato,\n        data_conversao,\n        observacoes,\n        tags,\n        ultima_atividade,\n        updated_at\n    FROM\n        \"db_source\".\"public_bronze\".\"bronze_leads\"\n)\n\nSELECT\n    l.lead_id_origem,\n    INITCAP(TRIM(l.nome)) AS nome_lead_clean,\n    LOWER(TRIM(l.email)) AS email_lead_clean,\n    l.telefone,\n    INITCAP(TRIM(l.empresa)) AS empresa_clean,\n    INITCAP(TRIM(l.cargo)) AS cargo_clean,\n    UPPER(TRIM(l.fonte)) AS fonte_padronizada,\n    l.campanha_id,\n    l.score,\n    UPPER(TRIM(l.status)) AS status_padronizado,\n    UPPER(TRIM(l.interesse)) AS interesse_padronizado,\n    CAST(l.orcamento_estimado AS DECIMAL(18, 2)) AS orcamento_estimado_decimal,\n    CAST(l.data_contato AS DATE) AS data_contato_clean,\n    CAST(l.data_conversao AS DATE) AS data_conversao_clean,\n    l.observacoes,\n    l.tags,\n    CAST(l.ultima_atividade AS TIMESTAMP) AS ultima_atividade_ts,\n    CAST(l.updated_at AS TIMESTAMP) AS updated_at_ts,\n    CURRENT_TIMESTAMP AS data_processamento,\n    -- Colunas derivadas\n    CASE \n        WHEN l.score >= 80 THEN 'Lead Quente'\n        WHEN l.score >= 50 THEN 'Lead Morno'\n        WHEN l.score > 0 THEN 'Lead Frio'\n        ELSE 'Sem Score'\n    END AS categoria_score,\n    CASE \n        WHEN l.orcamento_estimado >= 50000 THEN 'Alto Valor'\n        WHEN l.orcamento_estimado >= 10000 THEN 'M\u00e9dio Valor'\n        WHEN l.orcamento_estimado > 0 THEN 'Baixo Valor'\n        ELSE 'Valor N\u00e3o Informado'\n    END AS categoria_orcamento,\n    CASE \n        WHEN l.data_conversao IS NOT NULL THEN 'Convertido'\n        WHEN l.status = 'QUALIFICADO' THEN 'Qualificado'\n        WHEN l.status = 'NOVO' THEN 'Novo'\n        ELSE 'Em Processo'\n    END AS fase_funil,\n    CASE \n        WHEN l.ultima_atividade >= CURRENT_TIMESTAMP - INTERVAL '7 days' THEN 'Ativo'\n        WHEN l.ultima_atividade >= CURRENT_TIMESTAMP - INTERVAL '30 days' THEN 'Inativo Recente'\n        ELSE 'Inativo'\n    END AS status_atividade,\n    SUBSTRING(l.email FROM POSITION('@' IN l.email) + 1) AS dominio_email_lead\nFROM\n    bronze_leads l\nWHERE\n    l.nome IS NOT NULL \n    AND l.email IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.gold_deteccao_anomalias": {"database": "db_source", "schema": "public_gold", "name": "gold_deteccao_anomalias", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "gold/gold_deteccao_anomalias.sql", "original_file_path": "models/gold/gold_deteccao_anomalias.sql", "unique_id": "model.meu_projeto_dbt_riocard.gold_deteccao_anomalias", "fqn": ["meu_projeto_dbt_riocard", "gold", "gold_deteccao_anomalias"], "alias": "gold_deteccao_anomalias", "checksum": {"name": "sha256", "checksum": "6d5900eb2b14f1df3b0c18a02d64013dbf69ef7be85c6af482794e1234890076"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["gold", "analytics", "gold", "analytics", "anomaly_detection", "monitoring"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS idx_anomalias_data ON {{ this }} (data_analise)", "transaction": true, "index": null}, {"sql": "CREATE INDEX IF NOT EXISTS idx_anomalias_tipo ON {{ this }} (tipo_anomalia)", "transaction": true, "index": null}, {"sql": "CREATE INDEX IF NOT EXISTS idx_anomalias_severidade ON {{ this }} (severidade)", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["gold", "analytics", "anomaly_detection", "monitoring"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/meu_projeto_dbt_riocard/models/gold/gold_deteccao_anomalias.sql", "unrendered_config": {"materialized": "table", "schema": "gold", "tags": ["gold", "analytics", "anomaly_detection", "monitoring"], "post-hook": ["CREATE INDEX IF NOT EXISTS idx_anomalias_data ON {{ this }} (data_analise)", "CREATE INDEX IF NOT EXISTS idx_anomalias_tipo ON {{ this }} (tipo_anomalia)", "CREATE INDEX IF NOT EXISTS idx_anomalias_severidade ON {{ this }} (severidade)"]}, "created_at": 1750210279.0728269, "relation_name": "\"db_source\".\"public_gold\".\"gold_deteccao_anomalias\"", "raw_code": "-- Modelo Gold: Detec\u00e7\u00e3o de Anomalias\n-- Identifica padr\u00f5es an\u00f4malos em vendas, comportamento de clientes e m\u00e9tricas de neg\u00f3cio\n\n{{ config(\n    materialized='table',\n    tags=['gold', 'analytics', 'anomaly_detection', 'monitoring'],\n    post_hook=[\n        \"CREATE INDEX IF NOT EXISTS idx_anomalias_data ON {{ this }} (data_analise)\",\n        \"CREATE INDEX IF NOT EXISTS idx_anomalias_tipo ON {{ this }} (tipo_anomalia)\",\n        \"CREATE INDEX IF NOT EXISTS idx_anomalias_severidade ON {{ this }} (severidade)\"\n    ]\n) }}\n\nWITH vendas_diarias AS (\n    SELECT \n        DATE(data_pedido) as data_venda,\n        COUNT(*) as total_pedidos,\n        SUM(valor_liquido) as receita_total,\n        AVG(valor_liquido) as ticket_medio,\n        COUNT(DISTINCT cliente_id) as clientes_unicos\n    FROM {{ ref('fct_pedidos') }}\n    WHERE data_pedido >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY DATE(data_pedido)\n),\n\nmetricas_estatisticas AS (\n    SELECT \n        -- Estat\u00edsticas para pedidos\n        AVG(total_pedidos) as media_pedidos,\n        STDDEV(total_pedidos) as desvio_pedidos,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY total_pedidos) as q1_pedidos,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY total_pedidos) as q3_pedidos,\n        \n        -- Estat\u00edsticas para receita\n        AVG(receita_total) as media_receita,\n        STDDEV(receita_total) as desvio_receita,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY receita_total) as q1_receita,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY receita_total) as q3_receita,\n        \n        -- Estat\u00edsticas para ticket m\u00e9dio\n        AVG(ticket_medio) as media_ticket,\n        STDDEV(ticket_medio) as desvio_ticket,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY ticket_medio) as q1_ticket,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY ticket_medio) as q3_ticket,\n        \n        -- Estat\u00edsticas para clientes \u00fanicos\n        AVG(clientes_unicos) as media_clientes,\n        STDDEV(clientes_unicos) as desvio_clientes\n        \n    FROM vendas_diarias\n),\n\nanomalias_vendas AS (\n    SELECT \n        vd.data_venda,\n        vd.total_pedidos,\n        vd.receita_total,\n        vd.ticket_medio,\n        vd.clientes_unicos,\n        \n        -- Z-Score para cada m\u00e9trica\n        CASE \n            WHEN me.desvio_pedidos > 0 THEN \n                ABS(vd.total_pedidos - me.media_pedidos) / me.desvio_pedidos\n            ELSE 0\n        END as z_score_pedidos,\n        \n        CASE \n            WHEN me.desvio_receita > 0 THEN \n                ABS(vd.receita_total - me.media_receita) / me.desvio_receita\n            ELSE 0\n        END as z_score_receita,\n        \n        CASE \n            WHEN me.desvio_ticket > 0 THEN \n                ABS(vd.ticket_medio - me.media_ticket) / me.desvio_ticket\n            ELSE 0\n        END as z_score_ticket,\n        \n        CASE \n            WHEN me.desvio_clientes > 0 THEN \n                ABS(vd.clientes_unicos - me.media_clientes) / me.desvio_clientes\n            ELSE 0\n        END as z_score_clientes,\n        \n        -- IQR (Interquartile Range) para detec\u00e7\u00e3o de outliers\n        (me.q3_pedidos - me.q1_pedidos) * 1.5 as iqr_pedidos,\n        (me.q3_receita - me.q1_receita) * 1.5 as iqr_receita,\n        (me.q3_ticket - me.q1_ticket) * 1.5 as iqr_ticket,\n        \n        -- Limites para outliers (m\u00e9todo IQR)\n        me.q1_pedidos - (me.q3_pedidos - me.q1_pedidos) * 1.5 as limite_inf_pedidos,\n        me.q3_pedidos + (me.q3_pedidos - me.q1_pedidos) * 1.5 as limite_sup_pedidos,\n        me.q1_receita - (me.q3_receita - me.q1_receita) * 1.5 as limite_inf_receita,\n        me.q3_receita + (me.q3_receita - me.q1_receita) * 1.5 as limite_sup_receita,\n        me.q1_ticket - (me.q3_ticket - me.q1_ticket) * 1.5 as limite_inf_ticket,\n        me.q3_ticket + (me.q3_ticket - me.q1_ticket) * 1.5 as limite_sup_ticket\n        \n    FROM vendas_diarias vd\n    CROSS JOIN metricas_estatisticas me\n),\n\ncomportamento_clientes AS (\n    SELECT \n        cliente_id,\n        COUNT(*) as pedidos_periodo,\n        SUM(valor_liquido) as gasto_total,\n        AVG(valor_liquido) as ticket_medio_cliente,\n        MAX(valor_liquido) as maior_pedido,\n        MIN(valor_liquido) as menor_pedido,\n        \n        -- Varia\u00e7\u00e3o no comportamento\n        STDDEV(valor_liquido) as variacao_ticket,\n        \n        -- Frequ\u00eancia de compra\n        EXTRACT(DAYS FROM (MAX(data_pedido) - MIN(data_pedido))) / NULLIF(COUNT(*) - 1, 0) as dias_entre_compras\n        \n    FROM {{ ref('fct_pedidos') }}\n    WHERE data_pedido >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY cliente_id\n    HAVING COUNT(*) >= 2 -- Apenas clientes com m\u00faltiplos pedidos\n),\n\nanomalias_clientes AS (\n    SELECT \n        cliente_id,\n        pedidos_periodo,\n        gasto_total,\n        ticket_medio_cliente,\n        maior_pedido,\n        variacao_ticket,\n        dias_entre_compras,\n        \n        -- Detec\u00e7\u00e3o de comportamento an\u00f4malo\n        CASE \n            WHEN maior_pedido > ticket_medio_cliente * 5 THEN true\n            ELSE false\n        END as pedido_muito_alto,\n        \n        CASE \n            WHEN variacao_ticket > ticket_medio_cliente * 2 THEN true\n            ELSE false\n        END as comportamento_erratico,\n        \n        CASE \n            WHEN dias_entre_compras < 1 THEN true\n            ELSE false\n        END as compras_muito_frequentes,\n        \n        -- Score de anomalia do cliente (0-100)\n        LEAST(100, \n            (CASE WHEN maior_pedido > ticket_medio_cliente * 5 THEN 30 ELSE 0 END) +\n            (CASE WHEN variacao_ticket > ticket_medio_cliente * 2 THEN 25 ELSE 0 END) +\n            (CASE WHEN dias_entre_compras < 1 THEN 20 ELSE 0 END) +\n            (CASE WHEN pedidos_periodo > 30 THEN 25 ELSE 0 END)\n        ) as score_anomalia_cliente\n        \n    FROM comportamento_clientes\n),\n\nanomalias_consolidadas AS (\n    -- Anomalias de vendas di\u00e1rias\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'VOLUME_PEDIDOS' as subtipo,\n        \n        CASE \n            WHEN z_score_pedidos > 3 OR \n                 total_pedidos < limite_inf_pedidos OR \n                 total_pedidos > limite_sup_pedidos THEN 'ALTA'\n            WHEN z_score_pedidos > 2 THEN 'MEDIA'\n            WHEN z_score_pedidos > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        total_pedidos as valor_observado,\n        NULL as valor_esperado,\n        z_score_pedidos as score_anomalia,\n        \n        CONCAT(\n            'Volume de pedidos an\u00f4malo: ', total_pedidos, \n            ' (Z-Score: ', ROUND(z_score_pedidos, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_pedidos > 1.5 OR \n          total_pedidos < limite_inf_pedidos OR \n          total_pedidos > limite_sup_pedidos\n    \n    UNION ALL\n    \n    -- Anomalias de receita di\u00e1ria\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'RECEITA_TOTAL' as subtipo,\n        \n        CASE \n            WHEN z_score_receita > 3 OR \n                 receita_total < limite_inf_receita OR \n                 receita_total > limite_sup_receita THEN 'ALTA'\n            WHEN z_score_receita > 2 THEN 'MEDIA'\n            WHEN z_score_receita > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        receita_total as valor_observado,\n        NULL as valor_esperado,\n        z_score_receita as score_anomalia,\n        \n        CONCAT(\n            'Receita an\u00f4mala: R$ ', ROUND(receita_total, 2), \n            ' (Z-Score: ', ROUND(z_score_receita, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_receita > 1.5 OR \n          receita_total < limite_inf_receita OR \n          receita_total > limite_sup_receita\n    \n    UNION ALL\n    \n    -- Anomalias de ticket m\u00e9dio\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'TICKET_MEDIO' as subtipo,\n        \n        CASE \n            WHEN z_score_ticket > 3 OR \n                 ticket_medio < limite_inf_ticket OR \n                 ticket_medio > limite_sup_ticket THEN 'ALTA'\n            WHEN z_score_ticket > 2 THEN 'MEDIA'\n            WHEN z_score_ticket > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        ticket_medio as valor_observado,\n        NULL as valor_esperado,\n        z_score_ticket as score_anomalia,\n        \n        CONCAT(\n            'Ticket m\u00e9dio an\u00f4malo: R$ ', ROUND(ticket_medio, 2), \n            ' (Z-Score: ', ROUND(z_score_ticket, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_ticket > 1.5 OR \n          ticket_medio < limite_inf_ticket OR \n          ticket_medio > limite_sup_ticket\n    \n    UNION ALL\n    \n    -- Anomalias de comportamento de clientes\n    SELECT \n        CURRENT_DATE as data_analise,\n        'COMPORTAMENTO_CLIENTE' as tipo_anomalia,\n        'COMPORTAMENTO_ERRATICO' as subtipo,\n        \n        CASE \n            WHEN score_anomalia_cliente >= 70 THEN 'ALTA'\n            WHEN score_anomalia_cliente >= 40 THEN 'MEDIA'\n            WHEN score_anomalia_cliente >= 20 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        cliente_id as valor_observado,\n        NULL as valor_esperado,\n        score_anomalia_cliente as score_anomalia,\n        \n        CONCAT(\n            'Cliente ID ', cliente_id, ' com comportamento an\u00f4malo. ',\n            CASE WHEN pedido_muito_alto THEN 'Pedido muito alto. ' ELSE '' END,\n            CASE WHEN comportamento_erratico THEN 'Varia\u00e7\u00e3o erratica. ' ELSE '' END,\n            CASE WHEN compras_muito_frequentes THEN 'Compras muito frequentes. ' ELSE '' END,\n            'Score: ', score_anomalia_cliente\n        ) as descricao\n        \n    FROM anomalias_clientes\n    WHERE score_anomalia_cliente >= 20\n),\n\nresultado_final AS (\n    SELECT \n        data_analise,\n        tipo_anomalia,\n        subtipo,\n        severidade,\n        valor_observado,\n        valor_esperado,\n        score_anomalia,\n        descricao,\n        \n        -- Prioridade para a\u00e7\u00e3o\n        CASE \n            WHEN severidade = 'ALTA' THEN 1\n            WHEN severidade = 'MEDIA' THEN 2\n            WHEN severidade = 'BAIXA' THEN 3\n            ELSE 4\n        END as prioridade,\n        \n        -- Recomenda\u00e7\u00f5es autom\u00e1ticas\n        CASE \n            WHEN tipo_anomalia = 'VENDAS_DIARIAS' AND subtipo = 'VOLUME_PEDIDOS' AND severidade = 'ALTA' THEN\n                'Investigar: poss\u00edvel problema no sistema de pedidos ou campanha promocional'\n            WHEN tipo_anomalia = 'VENDAS_DIARIAS' AND subtipo = 'RECEITA_TOTAL' AND severidade = 'ALTA' THEN\n                'Verificar: poss\u00edvel erro de precifica\u00e7\u00e3o ou pedidos fraudulentos'\n            WHEN tipo_anomalia = 'COMPORTAMENTO_CLIENTE' AND severidade = 'ALTA' THEN\n                'Analisar cliente: poss\u00edvel fraude ou erro no sistema'\n            ELSE 'Monitorar tend\u00eancia'\n        END as recomendacao,\n        \n        -- Flags de alerta\n        CASE WHEN severidade IN ('ALTA', 'MEDIA') THEN true ELSE false END as requer_atencao,\n        CASE WHEN score_anomalia > 3 THEN true ELSE false END as outlier_extremo,\n        \n        -- Auditoria\n        {{ add_audit_columns() }}\n        \n    FROM anomalias_consolidadas\n)\n\nSELECT * FROM resultado_final\nORDER BY prioridade ASC, score_anomalia DESC, data_analise DESC", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.meu_projeto_dbt_riocard.add_audit_columns"], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/gold/gold_deteccao_anomalias.sql", "compiled": true, "compiled_code": "-- Modelo Gold: Detec\u00e7\u00e3o de Anomalias\n-- Identifica padr\u00f5es an\u00f4malos em vendas, comportamento de clientes e m\u00e9tricas de neg\u00f3cio\n\n\n\nWITH vendas_diarias AS (\n    SELECT \n        DATE(data_pedido) as data_venda,\n        COUNT(*) as total_pedidos,\n        SUM(valor_liquido) as receita_total,\n        AVG(valor_liquido) as ticket_medio,\n        COUNT(DISTINCT cliente_id) as clientes_unicos\n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n    WHERE data_pedido >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY DATE(data_pedido)\n),\n\nmetricas_estatisticas AS (\n    SELECT \n        -- Estat\u00edsticas para pedidos\n        AVG(total_pedidos) as media_pedidos,\n        STDDEV(total_pedidos) as desvio_pedidos,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY total_pedidos) as q1_pedidos,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY total_pedidos) as q3_pedidos,\n        \n        -- Estat\u00edsticas para receita\n        AVG(receita_total) as media_receita,\n        STDDEV(receita_total) as desvio_receita,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY receita_total) as q1_receita,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY receita_total) as q3_receita,\n        \n        -- Estat\u00edsticas para ticket m\u00e9dio\n        AVG(ticket_medio) as media_ticket,\n        STDDEV(ticket_medio) as desvio_ticket,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY ticket_medio) as q1_ticket,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY ticket_medio) as q3_ticket,\n        \n        -- Estat\u00edsticas para clientes \u00fanicos\n        AVG(clientes_unicos) as media_clientes,\n        STDDEV(clientes_unicos) as desvio_clientes\n        \n    FROM vendas_diarias\n),\n\nanomalias_vendas AS (\n    SELECT \n        vd.data_venda,\n        vd.total_pedidos,\n        vd.receita_total,\n        vd.ticket_medio,\n        vd.clientes_unicos,\n        \n        -- Z-Score para cada m\u00e9trica\n        CASE \n            WHEN me.desvio_pedidos > 0 THEN \n                ABS(vd.total_pedidos - me.media_pedidos) / me.desvio_pedidos\n            ELSE 0\n        END as z_score_pedidos,\n        \n        CASE \n            WHEN me.desvio_receita > 0 THEN \n                ABS(vd.receita_total - me.media_receita) / me.desvio_receita\n            ELSE 0\n        END as z_score_receita,\n        \n        CASE \n            WHEN me.desvio_ticket > 0 THEN \n                ABS(vd.ticket_medio - me.media_ticket) / me.desvio_ticket\n            ELSE 0\n        END as z_score_ticket,\n        \n        CASE \n            WHEN me.desvio_clientes > 0 THEN \n                ABS(vd.clientes_unicos - me.media_clientes) / me.desvio_clientes\n            ELSE 0\n        END as z_score_clientes,\n        \n        -- IQR (Interquartile Range) para detec\u00e7\u00e3o de outliers\n        (me.q3_pedidos - me.q1_pedidos) * 1.5 as iqr_pedidos,\n        (me.q3_receita - me.q1_receita) * 1.5 as iqr_receita,\n        (me.q3_ticket - me.q1_ticket) * 1.5 as iqr_ticket,\n        \n        -- Limites para outliers (m\u00e9todo IQR)\n        me.q1_pedidos - (me.q3_pedidos - me.q1_pedidos) * 1.5 as limite_inf_pedidos,\n        me.q3_pedidos + (me.q3_pedidos - me.q1_pedidos) * 1.5 as limite_sup_pedidos,\n        me.q1_receita - (me.q3_receita - me.q1_receita) * 1.5 as limite_inf_receita,\n        me.q3_receita + (me.q3_receita - me.q1_receita) * 1.5 as limite_sup_receita,\n        me.q1_ticket - (me.q3_ticket - me.q1_ticket) * 1.5 as limite_inf_ticket,\n        me.q3_ticket + (me.q3_ticket - me.q1_ticket) * 1.5 as limite_sup_ticket\n        \n    FROM vendas_diarias vd\n    CROSS JOIN metricas_estatisticas me\n),\n\ncomportamento_clientes AS (\n    SELECT \n        cliente_id,\n        COUNT(*) as pedidos_periodo,\n        SUM(valor_liquido) as gasto_total,\n        AVG(valor_liquido) as ticket_medio_cliente,\n        MAX(valor_liquido) as maior_pedido,\n        MIN(valor_liquido) as menor_pedido,\n        \n        -- Varia\u00e7\u00e3o no comportamento\n        STDDEV(valor_liquido) as variacao_ticket,\n        \n        -- Frequ\u00eancia de compra\n        EXTRACT(DAYS FROM (MAX(data_pedido) - MIN(data_pedido))) / NULLIF(COUNT(*) - 1, 0) as dias_entre_compras\n        \n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n    WHERE data_pedido >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY cliente_id\n    HAVING COUNT(*) >= 2 -- Apenas clientes com m\u00faltiplos pedidos\n),\n\nanomalias_clientes AS (\n    SELECT \n        cliente_id,\n        pedidos_periodo,\n        gasto_total,\n        ticket_medio_cliente,\n        maior_pedido,\n        variacao_ticket,\n        dias_entre_compras,\n        \n        -- Detec\u00e7\u00e3o de comportamento an\u00f4malo\n        CASE \n            WHEN maior_pedido > ticket_medio_cliente * 5 THEN true\n            ELSE false\n        END as pedido_muito_alto,\n        \n        CASE \n            WHEN variacao_ticket > ticket_medio_cliente * 2 THEN true\n            ELSE false\n        END as comportamento_erratico,\n        \n        CASE \n            WHEN dias_entre_compras < 1 THEN true\n            ELSE false\n        END as compras_muito_frequentes,\n        \n        -- Score de anomalia do cliente (0-100)\n        LEAST(100, \n            (CASE WHEN maior_pedido > ticket_medio_cliente * 5 THEN 30 ELSE 0 END) +\n            (CASE WHEN variacao_ticket > ticket_medio_cliente * 2 THEN 25 ELSE 0 END) +\n            (CASE WHEN dias_entre_compras < 1 THEN 20 ELSE 0 END) +\n            (CASE WHEN pedidos_periodo > 30 THEN 25 ELSE 0 END)\n        ) as score_anomalia_cliente\n        \n    FROM comportamento_clientes\n),\n\nanomalias_consolidadas AS (\n    -- Anomalias de vendas di\u00e1rias\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'VOLUME_PEDIDOS' as subtipo,\n        \n        CASE \n            WHEN z_score_pedidos > 3 OR \n                 total_pedidos < limite_inf_pedidos OR \n                 total_pedidos > limite_sup_pedidos THEN 'ALTA'\n            WHEN z_score_pedidos > 2 THEN 'MEDIA'\n            WHEN z_score_pedidos > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        total_pedidos as valor_observado,\n        NULL as valor_esperado,\n        z_score_pedidos as score_anomalia,\n        \n        CONCAT(\n            'Volume de pedidos an\u00f4malo: ', total_pedidos, \n            ' (Z-Score: ', ROUND(z_score_pedidos, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_pedidos > 1.5 OR \n          total_pedidos < limite_inf_pedidos OR \n          total_pedidos > limite_sup_pedidos\n    \n    UNION ALL\n    \n    -- Anomalias de receita di\u00e1ria\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'RECEITA_TOTAL' as subtipo,\n        \n        CASE \n            WHEN z_score_receita > 3 OR \n                 receita_total < limite_inf_receita OR \n                 receita_total > limite_sup_receita THEN 'ALTA'\n            WHEN z_score_receita > 2 THEN 'MEDIA'\n            WHEN z_score_receita > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        receita_total as valor_observado,\n        NULL as valor_esperado,\n        z_score_receita as score_anomalia,\n        \n        CONCAT(\n            'Receita an\u00f4mala: R$ ', ROUND(receita_total, 2), \n            ' (Z-Score: ', ROUND(z_score_receita, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_receita > 1.5 OR \n          receita_total < limite_inf_receita OR \n          receita_total > limite_sup_receita\n    \n    UNION ALL\n    \n    -- Anomalias de ticket m\u00e9dio\n    SELECT \n        data_venda as data_analise,\n        'VENDAS_DIARIAS' as tipo_anomalia,\n        'TICKET_MEDIO' as subtipo,\n        \n        CASE \n            WHEN z_score_ticket > 3 OR \n                 ticket_medio < limite_inf_ticket OR \n                 ticket_medio > limite_sup_ticket THEN 'ALTA'\n            WHEN z_score_ticket > 2 THEN 'MEDIA'\n            WHEN z_score_ticket > 1.5 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        ticket_medio as valor_observado,\n        NULL as valor_esperado,\n        z_score_ticket as score_anomalia,\n        \n        CONCAT(\n            'Ticket m\u00e9dio an\u00f4malo: R$ ', ROUND(ticket_medio, 2), \n            ' (Z-Score: ', ROUND(z_score_ticket, 2), ')'\n        ) as descricao\n        \n    FROM anomalias_vendas\n    WHERE z_score_ticket > 1.5 OR \n          ticket_medio < limite_inf_ticket OR \n          ticket_medio > limite_sup_ticket\n    \n    UNION ALL\n    \n    -- Anomalias de comportamento de clientes\n    SELECT \n        CURRENT_DATE as data_analise,\n        'COMPORTAMENTO_CLIENTE' as tipo_anomalia,\n        'COMPORTAMENTO_ERRATICO' as subtipo,\n        \n        CASE \n            WHEN score_anomalia_cliente >= 70 THEN 'ALTA'\n            WHEN score_anomalia_cliente >= 40 THEN 'MEDIA'\n            WHEN score_anomalia_cliente >= 20 THEN 'BAIXA'\n            ELSE 'NORMAL'\n        END as severidade,\n        \n        cliente_id as valor_observado,\n        NULL as valor_esperado,\n        score_anomalia_cliente as score_anomalia,\n        \n        CONCAT(\n            'Cliente ID ', cliente_id, ' com comportamento an\u00f4malo. ',\n            CASE WHEN pedido_muito_alto THEN 'Pedido muito alto. ' ELSE '' END,\n            CASE WHEN comportamento_erratico THEN 'Varia\u00e7\u00e3o erratica. ' ELSE '' END,\n            CASE WHEN compras_muito_frequentes THEN 'Compras muito frequentes. ' ELSE '' END,\n            'Score: ', score_anomalia_cliente\n        ) as descricao\n        \n    FROM anomalias_clientes\n    WHERE score_anomalia_cliente >= 20\n),\n\nresultado_final AS (\n    SELECT \n        data_analise,\n        tipo_anomalia,\n        subtipo,\n        severidade,\n        valor_observado,\n        valor_esperado,\n        score_anomalia,\n        descricao,\n        \n        -- Prioridade para a\u00e7\u00e3o\n        CASE \n            WHEN severidade = 'ALTA' THEN 1\n            WHEN severidade = 'MEDIA' THEN 2\n            WHEN severidade = 'BAIXA' THEN 3\n            ELSE 4\n        END as prioridade,\n        \n        -- Recomenda\u00e7\u00f5es autom\u00e1ticas\n        CASE \n            WHEN tipo_anomalia = 'VENDAS_DIARIAS' AND subtipo = 'VOLUME_PEDIDOS' AND severidade = 'ALTA' THEN\n                'Investigar: poss\u00edvel problema no sistema de pedidos ou campanha promocional'\n            WHEN tipo_anomalia = 'VENDAS_DIARIAS' AND subtipo = 'RECEITA_TOTAL' AND severidade = 'ALTA' THEN\n                'Verificar: poss\u00edvel erro de precifica\u00e7\u00e3o ou pedidos fraudulentos'\n            WHEN tipo_anomalia = 'COMPORTAMENTO_CLIENTE' AND severidade = 'ALTA' THEN\n                'Analisar cliente: poss\u00edvel fraude ou erro no sistema'\n            ELSE 'Monitorar tend\u00eancia'\n        END as recomendacao,\n        \n        -- Flags de alerta\n        CASE WHEN severidade IN ('ALTA', 'MEDIA') THEN true ELSE false END as requer_atencao,\n        CASE WHEN score_anomalia > 3 THEN true ELSE false END as outlier_extremo,\n        \n        -- Auditoria\n        \n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '7b0ac06c-66b2-40fc-80a9-d80ace88de6b' as dbt_run_id,\n    'system' as dbt_created_by\n\n        \n    FROM anomalias_consolidadas\n)\n\nSELECT * FROM resultado_final\nORDER BY prioridade ASC, score_anomalia DESC, data_analise DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.gold_metricas_avancadas_clientes": {"database": "db_source", "schema": "public_gold", "name": "gold_metricas_avancadas_clientes", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "gold/gold_metricas_avancadas_clientes.sql", "original_file_path": "models/gold/gold_metricas_avancadas_clientes.sql", "unique_id": "model.meu_projeto_dbt_riocard.gold_metricas_avancadas_clientes", "fqn": ["meu_projeto_dbt_riocard", "gold", "gold_metricas_avancadas_clientes"], "alias": "gold_metricas_avancadas_clientes", "checksum": {"name": "sha256", "checksum": "176eb9baf72205ee441f867a21e7f7f1c54bb1c0ac61bc68990d811de3e8ebf2"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["gold", "analytics", "gold", "analytics", "advanced"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS idx_gold_metricas_cliente_id ON {{ this }} (cliente_id)", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["gold", "analytics", "advanced"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/meu_projeto_dbt_riocard/models/gold/gold_metricas_avancadas_clientes.sql", "unrendered_config": {"materialized": "table", "schema": "gold", "tags": ["gold", "analytics", "advanced"], "post-hook": "CREATE INDEX IF NOT EXISTS idx_gold_metricas_cliente_id ON {{ this }} (cliente_id)"}, "created_at": 1750210279.076519, "relation_name": "\"db_source\".\"public_gold\".\"gold_metricas_avancadas_clientes\"", "raw_code": "-- Modelo Gold: M\u00e9tricas Avan\u00e7adas de Clientes\n-- Demonstra capacidades anal\u00edticas avan\u00e7adas do DBT\n\n{{ config(\n    materialized='table',\n    tags=['gold', 'analytics', 'advanced'],\n    post_hook=\"CREATE INDEX IF NOT EXISTS idx_gold_metricas_cliente_id ON {{ this }} (cliente_id)\"\n) }}\n\nWITH base_clientes AS (\n    SELECT \n        cliente_id,\n        nome,\n        email_original as email,\n        data_cadastro,\n        status,\n        tipo_cliente,\n        limite_credito\n    FROM {{ ref('dim_clientes') }}\n),\n\npedidos_agregados AS (\n    SELECT \n        cliente_id,\n        COUNT(*) as total_pedidos,\n        SUM(valor_liquido) as receita_total,\n        AVG(valor_liquido) as ticket_medio,\n        MIN(data_pedido) as primeira_compra,\n        MAX(data_pedido) as ultima_compra,\n        \n        -- M\u00e9tricas temporais\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) as pedidos_30d,\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN 1 END) as pedidos_90d,\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '365 days' THEN 1 END) as pedidos_12m,\n        \n        -- Receita por per\u00edodo\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '30 days' THEN valor_liquido ELSE 0 END) as receita_30d,\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN valor_liquido ELSE 0 END) as receita_90d,\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '365 days' THEN valor_liquido ELSE 0 END) as receita_12m\n        \n    FROM {{ ref('fct_pedidos') }}\n    GROUP BY cliente_id\n),\n\nmetricas_comportamentais AS (\n    SELECT \n        p.cliente_id,\n        \n        -- Frequ\u00eancia de compra\n        CASE \n            WHEN pa.total_pedidos = 0 THEN 0\n            ELSE EXTRACT(DAYS FROM (pa.ultima_compra - pa.primeira_compra)) / NULLIF(pa.total_pedidos - 1, 0)\n        END as dias_entre_compras,\n        \n        -- Rec\u00eancia (dias desde \u00faltima compra)\n        EXTRACT(DAYS FROM (CURRENT_DATE - pa.ultima_compra)) as dias_desde_ultima_compra,\n        \n        -- Tend\u00eancia de crescimento (comparando \u00faltimos 3 meses vs 3 meses anteriores)\n        COALESCE(\n            (SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN p.valor_liquido ELSE 0 END) -\n         SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '180 days' \n                   AND p.data_pedido < CURRENT_DATE - INTERVAL '90 days' \n                   THEN p.valor_liquido ELSE 0 END)) /\n        NULLIF(SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '180 days' \n                        AND p.data_pedido < CURRENT_DATE - INTERVAL '90 days' \n                        THEN p.valor_liquido ELSE 0 END), 0), 0\n        ) as tendencia_crescimento,\n        \n        -- Sazonalidade (m\u00eas com maior volume)\n        MODE() WITHIN GROUP (ORDER BY EXTRACT(MONTH FROM p.data_pedido)) as mes_preferido\n        \n    FROM {{ ref('fct_pedidos') }} p\n    INNER JOIN pedidos_agregados pa ON p.cliente_id = pa.cliente_id\n    GROUP BY p.cliente_id, pa.total_pedidos, pa.primeira_compra, pa.ultima_compra\n),\n\nrfm_analysis AS (\n    SELECT \n        pa.cliente_id,\n        \n        -- Recency Score (1-5, onde 5 \u00e9 mais recente)\n        CASE \n            WHEN dias_desde_ultima_compra <= 30 THEN 5\n            WHEN dias_desde_ultima_compra <= 60 THEN 4\n            WHEN dias_desde_ultima_compra <= 90 THEN 3\n            WHEN dias_desde_ultima_compra <= 180 THEN 2\n            ELSE 1\n        END as recency_score,\n        \n        -- Frequency Score (baseado em quartis)\n        NTILE(5) OVER (ORDER BY pa.total_pedidos) as frequency_score,\n        \n        -- Monetary Score (baseado em quartis)\n        NTILE(5) OVER (ORDER BY pa.receita_total) as monetary_score\n        \n    FROM pedidos_agregados pa\n    INNER JOIN metricas_comportamentais mc ON pa.cliente_id = mc.cliente_id\n),\n\nsegmentacao_avancada AS (\n    SELECT \n        rfm.*,\n        \n        -- Segmenta\u00e7\u00e3o RFM\n        CASE \n            WHEN recency_score >= 4 AND frequency_score >= 4 AND monetary_score >= 4 THEN 'Champions'\n            WHEN recency_score >= 3 AND frequency_score >= 3 AND monetary_score >= 3 THEN 'Loyal Customers'\n            WHEN recency_score >= 4 AND frequency_score <= 2 THEN 'New Customers'\n            WHEN recency_score >= 3 AND frequency_score >= 3 AND monetary_score <= 2 THEN 'Potential Loyalists'\n            WHEN recency_score >= 3 AND frequency_score <= 2 AND monetary_score >= 3 THEN 'Big Spenders'\n            WHEN recency_score <= 2 AND frequency_score >= 3 AND monetary_score >= 3 THEN 'At Risk'\n            WHEN recency_score <= 2 AND frequency_score >= 2 AND monetary_score <= 2 THEN 'Cannot Lose Them'\n            WHEN recency_score <= 2 AND frequency_score <= 2 AND monetary_score >= 3 THEN 'Hibernating'\n            ELSE 'Lost'\n        END as segmento_rfm,\n        \n        -- Score RFM combinado\n        (recency_score * 100) + (frequency_score * 10) + monetary_score as rfm_score\n        \n    FROM rfm_analysis rfm\n),\n\nmetricas_finais AS (\n    SELECT \n        bc.cliente_id,\n        bc.nome,\n        bc.email,\n        bc.data_cadastro,\n        bc.status,\n        bc.tipo_cliente,\n        bc.limite_credito,\n        \n        -- M\u00e9tricas b\u00e1sicas\n        COALESCE(pa.total_pedidos, 0) as total_pedidos,\n        COALESCE(pa.receita_total, 0) as receita_total,\n        COALESCE(pa.ticket_medio, 0) as ticket_medio,\n        pa.primeira_compra,\n        pa.ultima_compra,\n        \n        -- M\u00e9tricas temporais\n        COALESCE(pa.pedidos_30d, 0) as pedidos_30d,\n        COALESCE(pa.pedidos_90d, 0) as pedidos_90d,\n        COALESCE(pa.pedidos_12m, 0) as pedidos_12m,\n        COALESCE(pa.receita_30d, 0) as receita_30d,\n        COALESCE(pa.receita_90d, 0) as receita_90d,\n        COALESCE(pa.receita_12m, 0) as receita_12m,\n        \n        -- M\u00e9tricas comportamentais\n        COALESCE(mc.dias_entre_compras, 0) as dias_entre_compras,\n        COALESCE(mc.dias_desde_ultima_compra, 999) as dias_desde_ultima_compra,\n        COALESCE(mc.tendencia_crescimento, 0) as tendencia_crescimento,\n        mc.mes_preferido,\n        \n        -- RFM e Segmenta\u00e7\u00e3o\n        COALESCE(sa.recency_score, 1) as recency_score,\n        COALESCE(sa.frequency_score, 1) as frequency_score,\n        COALESCE(sa.monetary_score, 1) as monetary_score,\n        COALESCE(sa.rfm_score, 111) as rfm_score,\n        COALESCE(sa.segmento_rfm, 'Lost') as segmento_rfm,\n        \n        -- Customer Lifetime Value (CLV) estimado\n        CASE \n            WHEN pa.total_pedidos > 0 AND mc.dias_entre_compras > 0 THEN\n                (pa.ticket_medio * (365.0 / mc.dias_entre_compras) * 2) -- Estimativa para 2 anos\n            ELSE 0\n        END as clv_estimado,\n        \n        -- Flags de risco e oportunidade\n        CASE \n            WHEN mc.dias_desde_ultima_compra > 180 THEN true \n            ELSE false \n        END as em_risco_churn,\n        \n        CASE \n            WHEN pa.receita_30d > pa.receita_90d / 3 * 1.5 THEN true \n            ELSE false \n        END as crescimento_acelerado,\n        \n        -- Classifica\u00e7\u00e3o de valor\n        {{ classify_customer_value('COALESCE(pa.receita_total, 0)') }} as categoria_valor,\n        \n        -- Auditoria\n        {{ add_audit_columns() }}\n        \n    FROM base_clientes bc\n    LEFT JOIN pedidos_agregados pa ON bc.cliente_id = pa.cliente_id\n    LEFT JOIN metricas_comportamentais mc ON bc.cliente_id = mc.cliente_id\n    LEFT JOIN segmentacao_avancada sa ON bc.cliente_id = sa.cliente_id\n)\n\nSELECT * FROM metricas_finais\nORDER BY receita_total DESC, total_pedidos DESC", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.meu_projeto_dbt_riocard.classify_customer_value", "macro.meu_projeto_dbt_riocard.add_audit_columns"], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/gold/gold_metricas_avancadas_clientes.sql", "compiled": true, "compiled_code": "-- Modelo Gold: M\u00e9tricas Avan\u00e7adas de Clientes\n-- Demonstra capacidades anal\u00edticas avan\u00e7adas do DBT\n\n\n\nWITH base_clientes AS (\n    SELECT \n        cliente_id,\n        nome,\n        email_original as email,\n        data_cadastro,\n        status,\n        tipo_cliente,\n        limite_credito\n    FROM \"db_source\".\"public_silver\".\"dim_clientes\"\n),\n\npedidos_agregados AS (\n    SELECT \n        cliente_id,\n        COUNT(*) as total_pedidos,\n        SUM(valor_liquido) as receita_total,\n        AVG(valor_liquido) as ticket_medio,\n        MIN(data_pedido) as primeira_compra,\n        MAX(data_pedido) as ultima_compra,\n        \n        -- M\u00e9tricas temporais\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) as pedidos_30d,\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN 1 END) as pedidos_90d,\n        COUNT(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '365 days' THEN 1 END) as pedidos_12m,\n        \n        -- Receita por per\u00edodo\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '30 days' THEN valor_liquido ELSE 0 END) as receita_30d,\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN valor_liquido ELSE 0 END) as receita_90d,\n        SUM(CASE WHEN data_pedido >= CURRENT_DATE - INTERVAL '365 days' THEN valor_liquido ELSE 0 END) as receita_12m\n        \n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n    GROUP BY cliente_id\n),\n\nmetricas_comportamentais AS (\n    SELECT \n        p.cliente_id,\n        \n        -- Frequ\u00eancia de compra\n        CASE \n            WHEN pa.total_pedidos = 0 THEN 0\n            ELSE EXTRACT(DAYS FROM (pa.ultima_compra - pa.primeira_compra)) / NULLIF(pa.total_pedidos - 1, 0)\n        END as dias_entre_compras,\n        \n        -- Rec\u00eancia (dias desde \u00faltima compra)\n        EXTRACT(DAYS FROM (CURRENT_DATE - pa.ultima_compra)) as dias_desde_ultima_compra,\n        \n        -- Tend\u00eancia de crescimento (comparando \u00faltimos 3 meses vs 3 meses anteriores)\n        COALESCE(\n            (SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '90 days' THEN p.valor_liquido ELSE 0 END) -\n         SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '180 days' \n                   AND p.data_pedido < CURRENT_DATE - INTERVAL '90 days' \n                   THEN p.valor_liquido ELSE 0 END)) /\n        NULLIF(SUM(CASE WHEN p.data_pedido >= CURRENT_DATE - INTERVAL '180 days' \n                        AND p.data_pedido < CURRENT_DATE - INTERVAL '90 days' \n                        THEN p.valor_liquido ELSE 0 END), 0), 0\n        ) as tendencia_crescimento,\n        \n        -- Sazonalidade (m\u00eas com maior volume)\n        MODE() WITHIN GROUP (ORDER BY EXTRACT(MONTH FROM p.data_pedido)) as mes_preferido\n        \n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\" p\n    INNER JOIN pedidos_agregados pa ON p.cliente_id = pa.cliente_id\n    GROUP BY p.cliente_id, pa.total_pedidos, pa.primeira_compra, pa.ultima_compra\n),\n\nrfm_analysis AS (\n    SELECT \n        pa.cliente_id,\n        \n        -- Recency Score (1-5, onde 5 \u00e9 mais recente)\n        CASE \n            WHEN dias_desde_ultima_compra <= 30 THEN 5\n            WHEN dias_desde_ultima_compra <= 60 THEN 4\n            WHEN dias_desde_ultima_compra <= 90 THEN 3\n            WHEN dias_desde_ultima_compra <= 180 THEN 2\n            ELSE 1\n        END as recency_score,\n        \n        -- Frequency Score (baseado em quartis)\n        NTILE(5) OVER (ORDER BY pa.total_pedidos) as frequency_score,\n        \n        -- Monetary Score (baseado em quartis)\n        NTILE(5) OVER (ORDER BY pa.receita_total) as monetary_score\n        \n    FROM pedidos_agregados pa\n    INNER JOIN metricas_comportamentais mc ON pa.cliente_id = mc.cliente_id\n),\n\nsegmentacao_avancada AS (\n    SELECT \n        rfm.*,\n        \n        -- Segmenta\u00e7\u00e3o RFM\n        CASE \n            WHEN recency_score >= 4 AND frequency_score >= 4 AND monetary_score >= 4 THEN 'Champions'\n            WHEN recency_score >= 3 AND frequency_score >= 3 AND monetary_score >= 3 THEN 'Loyal Customers'\n            WHEN recency_score >= 4 AND frequency_score <= 2 THEN 'New Customers'\n            WHEN recency_score >= 3 AND frequency_score >= 3 AND monetary_score <= 2 THEN 'Potential Loyalists'\n            WHEN recency_score >= 3 AND frequency_score <= 2 AND monetary_score >= 3 THEN 'Big Spenders'\n            WHEN recency_score <= 2 AND frequency_score >= 3 AND monetary_score >= 3 THEN 'At Risk'\n            WHEN recency_score <= 2 AND frequency_score >= 2 AND monetary_score <= 2 THEN 'Cannot Lose Them'\n            WHEN recency_score <= 2 AND frequency_score <= 2 AND monetary_score >= 3 THEN 'Hibernating'\n            ELSE 'Lost'\n        END as segmento_rfm,\n        \n        -- Score RFM combinado\n        (recency_score * 100) + (frequency_score * 10) + monetary_score as rfm_score\n        \n    FROM rfm_analysis rfm\n),\n\nmetricas_finais AS (\n    SELECT \n        bc.cliente_id,\n        bc.nome,\n        bc.email,\n        bc.data_cadastro,\n        bc.status,\n        bc.tipo_cliente,\n        bc.limite_credito,\n        \n        -- M\u00e9tricas b\u00e1sicas\n        COALESCE(pa.total_pedidos, 0) as total_pedidos,\n        COALESCE(pa.receita_total, 0) as receita_total,\n        COALESCE(pa.ticket_medio, 0) as ticket_medio,\n        pa.primeira_compra,\n        pa.ultima_compra,\n        \n        -- M\u00e9tricas temporais\n        COALESCE(pa.pedidos_30d, 0) as pedidos_30d,\n        COALESCE(pa.pedidos_90d, 0) as pedidos_90d,\n        COALESCE(pa.pedidos_12m, 0) as pedidos_12m,\n        COALESCE(pa.receita_30d, 0) as receita_30d,\n        COALESCE(pa.receita_90d, 0) as receita_90d,\n        COALESCE(pa.receita_12m, 0) as receita_12m,\n        \n        -- M\u00e9tricas comportamentais\n        COALESCE(mc.dias_entre_compras, 0) as dias_entre_compras,\n        COALESCE(mc.dias_desde_ultima_compra, 999) as dias_desde_ultima_compra,\n        COALESCE(mc.tendencia_crescimento, 0) as tendencia_crescimento,\n        mc.mes_preferido,\n        \n        -- RFM e Segmenta\u00e7\u00e3o\n        COALESCE(sa.recency_score, 1) as recency_score,\n        COALESCE(sa.frequency_score, 1) as frequency_score,\n        COALESCE(sa.monetary_score, 1) as monetary_score,\n        COALESCE(sa.rfm_score, 111) as rfm_score,\n        COALESCE(sa.segmento_rfm, 'Lost') as segmento_rfm,\n        \n        -- Customer Lifetime Value (CLV) estimado\n        CASE \n            WHEN pa.total_pedidos > 0 AND mc.dias_entre_compras > 0 THEN\n                (pa.ticket_medio * (365.0 / mc.dias_entre_compras) * 2) -- Estimativa para 2 anos\n            ELSE 0\n        END as clv_estimado,\n        \n        -- Flags de risco e oportunidade\n        CASE \n            WHEN mc.dias_desde_ultima_compra > 180 THEN true \n            ELSE false \n        END as em_risco_churn,\n        \n        CASE \n            WHEN pa.receita_30d > pa.receita_90d / 3 * 1.5 THEN true \n            ELSE false \n        END as crescimento_acelerado,\n        \n        -- Classifica\u00e7\u00e3o de valor\n        \n    CASE \n        WHEN COALESCE(pa.receita_total, 0) >= 10000 THEN 'VIP'\n        WHEN COALESCE(pa.receita_total, 0) >= 5000 THEN 'Premium'\n        WHEN COALESCE(pa.receita_total, 0) >= 1000 THEN 'Regular'\n        ELSE 'B\u00e1sico'\n    END\n as categoria_valor,\n        \n        -- Auditoria\n        \n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '7b0ac06c-66b2-40fc-80a9-d80ace88de6b' as dbt_run_id,\n    'system' as dbt_created_by\n\n        \n    FROM base_clientes bc\n    LEFT JOIN pedidos_agregados pa ON bc.cliente_id = pa.cliente_id\n    LEFT JOIN metricas_comportamentais mc ON bc.cliente_id = mc.cliente_id\n    LEFT JOIN segmentacao_avancada sa ON bc.cliente_id = sa.cliente_id\n)\n\nSELECT * FROM metricas_finais\nORDER BY receita_total DESC, total_pedidos DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal": {"database": "db_source", "schema": "public_gold", "name": "agg_valor_pedidos_por_cliente_mensal", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "gold/agg_valor_pedidos_por_cliente_mensal.sql", "original_file_path": "models/gold/agg_valor_pedidos_por_cliente_mensal.sql", "unique_id": "model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal", "fqn": ["meu_projeto_dbt_riocard", "gold", "agg_valor_pedidos_por_cliente_mensal"], "alias": "agg_valor_pedidos_por_cliente_mensal", "checksum": {"name": "sha256", "checksum": "01b5e2e84223cf5b767461da2aa0db5d5cc0439326503d0266e5143dbfb790c3"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["gold", "analytics"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["gold", "analytics"], "description": "Agrega\u00e7\u00e3o mensal dos valores de pedidos por cliente. Pronto para consumo por ferramentas de BI e dashboards.\n", "columns": {"cliente_id": {"name": "cliente_id", "description": "Identificador \u00fanico do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome_cliente": {"name": "nome_cliente", "description": "Nome do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ano_pedido": {"name": "ano_pedido", "description": "Ano do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "mes_pedido": {"name": "mes_pedido", "description": "M\u00eas do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_total_pedidos_mensal": {"name": "valor_total_pedidos_mensal", "description": "Soma total do valor dos pedidos no m\u00eas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "numero_de_pedidos_mensal": {"name": "numero_de_pedidos_mensal", "description": "N\u00famero de pedidos distintos no m\u00eas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/gold/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/gold/agg_valor_pedidos_por_cliente_mensal.sql", "unrendered_config": {"materialized": "table", "schema": "gold", "tags": ["gold", "analytics"]}, "created_at": 1750210279.504808, "relation_name": "\"db_source\".\"public_gold\".\"agg_valor_pedidos_por_cliente_mensal\"", "raw_code": "-- models/gold/agg_valor_pedidos_por_cliente_mensal.sql\n-- Este modelo agrega o valor total de pedidos por cliente e por m\u00eas.\n-- \u00c9 um exemplo de modelo da camada Gold, pronto para consumo por ferramentas de BI ou dashboards.\n\nWITH fct_pedidos AS (\n    SELECT\n        cliente_id,\n        nome_cliente,\n        ano_pedido,\n        mes_pedido,\n        valor_liquido,\n        pedido_id\n    FROM {{ ref('fct_pedidos') }}\n)\n\nSELECT\n    cliente_id,\n    nome_cliente,\n    ano_pedido,\n    mes_pedido,\n    SUM(valor_liquido) AS valor_total_pedidos_mensal,\n    COUNT(DISTINCT pedido_id) AS numero_de_pedidos_mensal\nFROM\n    fct_pedidos\nGROUP BY\n    cliente_id,\n    nome_cliente,\n    ano_pedido,\n    mes_pedido\nORDER BY\n    ano_pedido DESC,\n    mes_pedido DESC,\n    valor_total_pedidos_mensal DESC", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/gold/agg_valor_pedidos_por_cliente_mensal.sql", "compiled": true, "compiled_code": "-- models/gold/agg_valor_pedidos_por_cliente_mensal.sql\n-- Este modelo agrega o valor total de pedidos por cliente e por m\u00eas.\n-- \u00c9 um exemplo de modelo da camada Gold, pronto para consumo por ferramentas de BI ou dashboards.\n\nWITH fct_pedidos AS (\n    SELECT\n        cliente_id,\n        nome_cliente,\n        ano_pedido,\n        mes_pedido,\n        valor_liquido,\n        pedido_id\n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n)\n\nSELECT\n    cliente_id,\n    nome_cliente,\n    ano_pedido,\n    mes_pedido,\n    SUM(valor_liquido) AS valor_total_pedidos_mensal,\n    COUNT(DISTINCT pedido_id) AS numero_de_pedidos_mensal\nFROM\n    fct_pedidos\nGROUP BY\n    cliente_id,\n    nome_cliente,\n    ano_pedido,\n    mes_pedido\nORDER BY\n    ano_pedido DESC,\n    mes_pedido DESC,\n    valor_total_pedidos_mensal DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.gold_analise_coorte": {"database": "db_source", "schema": "public_gold", "name": "gold_analise_coorte", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "gold/gold_analise_coorte.sql", "original_file_path": "models/gold/gold_analise_coorte.sql", "unique_id": "model.meu_projeto_dbt_riocard.gold_analise_coorte", "fqn": ["meu_projeto_dbt_riocard", "gold", "gold_analise_coorte"], "alias": "gold_analise_coorte", "checksum": {"name": "sha256", "checksum": "aea97d4e3e8e4b90fbb3b002390cb02fa09661fbd016fbd23ed8758c0b017f02"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["gold", "analytics", "gold", "analytics", "cohort", "retention"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS idx_coorte_mes_aquisicao ON {{ this }} (mes_aquisicao)", "transaction": true, "index": null}, {"sql": "CREATE INDEX IF NOT EXISTS idx_coorte_periodo ON {{ this }} (periodo_desde_aquisicao)", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["gold", "analytics", "cohort", "retention"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/meu_projeto_dbt_riocard/models/gold/gold_analise_coorte.sql", "unrendered_config": {"materialized": "table", "schema": "gold", "tags": ["gold", "analytics", "cohort", "retention"], "post-hook": ["CREATE INDEX IF NOT EXISTS idx_coorte_mes_aquisicao ON {{ this }} (mes_aquisicao)", "CREATE INDEX IF NOT EXISTS idx_coorte_periodo ON {{ this }} (periodo_desde_aquisicao)"]}, "created_at": 1750210279.079966, "relation_name": "\"db_source\".\"public_gold\".\"gold_analise_coorte\"", "raw_code": "-- Modelo Gold: An\u00e1lise de Coorte\n-- Demonstra an\u00e1lise de reten\u00e7\u00e3o de clientes por coorte de aquisi\u00e7\u00e3o\n\n{{ config(\n    materialized='table',\n    tags=['gold', 'analytics', 'cohort', 'retention'],\n    post_hook=[\n        \"CREATE INDEX IF NOT EXISTS idx_coorte_mes_aquisicao ON {{ this }} (mes_aquisicao)\",\n        \"CREATE INDEX IF NOT EXISTS idx_coorte_periodo ON {{ this }} (periodo_desde_aquisicao)\"\n    ]\n) }}\n\nWITH clientes_primeira_compra AS (\n    SELECT \n        cliente_id,\n        MIN(data_pedido) as primeira_compra,\n        DATE_TRUNC('month', MIN(data_pedido)) as mes_aquisicao\n    FROM {{ ref('fct_pedidos') }}\n    GROUP BY cliente_id\n),\n\natividade_mensal AS (\n    SELECT \n        p.cliente_id,\n        DATE_TRUNC('month', p.data_pedido) as mes_atividade,\n        SUM(p.valor_liquido) as receita_mes,\n        COUNT(*) as pedidos_mes\n    FROM {{ ref('fct_pedidos') }} p\n    GROUP BY p.cliente_id, DATE_TRUNC('month', p.data_pedido)\n),\n\ncoorte_base AS (\n    SELECT \n        cpc.mes_aquisicao,\n        COUNT(DISTINCT cpc.cliente_id) as clientes_adquiridos,\n        SUM(am.receita_mes) as receita_aquisicao\n    FROM clientes_primeira_compra cpc\n    INNER JOIN atividade_mensal am ON cpc.cliente_id = am.cliente_id \n                                   AND cpc.mes_aquisicao = am.mes_atividade\n    GROUP BY cpc.mes_aquisicao\n),\n\ncoorte_retencao AS (\n    SELECT \n        cpc.mes_aquisicao,\n        am.mes_atividade,\n        \n        -- Per\u00edodo desde aquisi\u00e7\u00e3o (em meses)\n        EXTRACT(YEAR FROM am.mes_atividade) * 12 + EXTRACT(MONTH FROM am.mes_atividade) -\n        (EXTRACT(YEAR FROM cpc.mes_aquisicao) * 12 + EXTRACT(MONTH FROM cpc.mes_aquisicao)) as periodo_desde_aquisicao,\n        \n        COUNT(DISTINCT cpc.cliente_id) as clientes_ativos,\n        SUM(am.receita_mes) as receita_periodo,\n        AVG(am.receita_mes) as receita_media_cliente,\n        COUNT(am.pedidos_mes) as total_pedidos\n        \n    FROM clientes_primeira_compra cpc\n    INNER JOIN atividade_mensal am ON cpc.cliente_id = am.cliente_id\n    WHERE am.mes_atividade >= cpc.mes_aquisicao\n    GROUP BY \n        cpc.mes_aquisicao, \n        am.mes_atividade,\n        periodo_desde_aquisicao\n),\n\ncoorte_metricas AS (\n    SELECT \n        cr.mes_aquisicao,\n        cr.periodo_desde_aquisicao,\n        cr.clientes_ativos,\n        cb.clientes_adquiridos,\n        \n        -- Taxa de reten\u00e7\u00e3o\n        ROUND(\n            (cr.clientes_ativos::DECIMAL / cb.clientes_adquiridos) * 100, 2\n        ) as taxa_retencao_pct,\n        \n        -- M\u00e9tricas financeiras\n        cr.receita_periodo,\n        cr.receita_media_cliente,\n        cr.total_pedidos,\n        \n        -- Revenue per User (RPU)\n        ROUND(\n            cr.receita_periodo / NULLIF(cr.clientes_ativos, 0), 2\n        ) as rpu,\n        \n        -- Lifetime Value acumulado por coorte\n        SUM(cr.receita_periodo) OVER (\n            PARTITION BY cr.mes_aquisicao \n            ORDER BY cr.periodo_desde_aquisicao \n            ROWS UNBOUNDED PRECEDING\n        ) as ltv_acumulado,\n        \n        -- Churn rate (diferen\u00e7a de reten\u00e7\u00e3o entre per\u00edodos)\n        LAG(cr.clientes_ativos) OVER (\n            PARTITION BY cr.mes_aquisicao \n            ORDER BY cr.periodo_desde_aquisicao\n        ) - cr.clientes_ativos as clientes_perdidos,\n        \n        -- Taxa de churn\n        CASE \n            WHEN LAG(cr.clientes_ativos) OVER (\n                PARTITION BY cr.mes_aquisicao \n                ORDER BY cr.periodo_desde_aquisicao\n            ) > 0 THEN\n                ROUND(\n                    ((LAG(cr.clientes_ativos) OVER (\n                        PARTITION BY cr.mes_aquisicao \n                        ORDER BY cr.periodo_desde_aquisicao\n                    ) - cr.clientes_ativos)::DECIMAL / \n                    LAG(cr.clientes_ativos) OVER (\n                        PARTITION BY cr.mes_aquisicao \n                        ORDER BY cr.periodo_desde_aquisicao\n                    )) * 100, 2\n                )\n            ELSE 0\n        END as taxa_churn_pct\n        \n    FROM coorte_retencao cr\n    INNER JOIN coorte_base cb ON cr.mes_aquisicao = cb.mes_aquisicao\n),\n\ncoorte_benchmarks AS (\n    SELECT \n        periodo_desde_aquisicao,\n        \n        -- Benchmarks por per\u00edodo\n        AVG(taxa_retencao_pct) as taxa_retencao_media,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_mediana,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_p25,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_p75,\n        \n        AVG(rpu) as rpu_medio,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY rpu) as rpu_mediano\n        \n    FROM coorte_metricas\n    WHERE periodo_desde_aquisicao <= 12 -- Primeiros 12 meses\n    GROUP BY periodo_desde_aquisicao\n),\n\nresultado_final AS (\n    SELECT \n        cm.mes_aquisicao,\n        cm.periodo_desde_aquisicao,\n        \n        -- Informa\u00e7\u00f5es da coorte\n        cm.clientes_adquiridos,\n        cm.clientes_ativos,\n        cm.clientes_perdidos,\n        \n        -- Taxas de reten\u00e7\u00e3o e churn\n        cm.taxa_retencao_pct,\n        cm.taxa_churn_pct,\n        \n        -- M\u00e9tricas financeiras\n        cm.receita_periodo,\n        cm.receita_media_cliente,\n        cm.rpu,\n        cm.ltv_acumulado,\n        cm.total_pedidos,\n        \n        -- Compara\u00e7\u00e3o com benchmarks\n        cb.taxa_retencao_media as benchmark_retencao_media,\n        cb.rpu_medio as benchmark_rpu_medio,\n        \n        -- Performance vs benchmark\n        CASE \n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_p75 THEN 'Excelente'\n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_mediana THEN 'Acima da M\u00e9dia'\n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_p25 THEN 'Abaixo da M\u00e9dia'\n            ELSE 'Cr\u00edtico'\n        END as performance_retencao,\n        \n        -- Classifica\u00e7\u00e3o da coorte\n        CASE \n            WHEN cm.periodo_desde_aquisicao = 0 THEN 'Aquisi\u00e7\u00e3o'\n            WHEN cm.periodo_desde_aquisicao <= 3 THEN 'Onboarding'\n            WHEN cm.periodo_desde_aquisicao <= 6 THEN 'Estabelecimento'\n            WHEN cm.periodo_desde_aquisicao <= 12 THEN 'Matura\u00e7\u00e3o'\n            ELSE 'Longo Prazo'\n        END as fase_ciclo_vida,\n        \n        -- Flags de alerta\n        CASE \n            WHEN cm.taxa_churn_pct > 20 THEN true \n            ELSE false \n        END as alerta_churn_alto,\n        \n        CASE \n            WHEN cm.rpu < cb.rpu_medio * 0.8 THEN true \n            ELSE false \n        END as alerta_rpu_baixo,\n        \n        -- Auditoria\n        {{ add_audit_columns() }}\n        \n    FROM coorte_metricas cm\n    LEFT JOIN coorte_benchmarks cb ON cm.periodo_desde_aquisicao = cb.periodo_desde_aquisicao\n)\n\nSELECT * FROM resultado_final\nWHERE periodo_desde_aquisicao <= 24 -- Limitar a 24 meses para performance\nORDER BY mes_aquisicao DESC, periodo_desde_aquisicao ASC", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.meu_projeto_dbt_riocard.add_audit_columns"], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/gold/gold_analise_coorte.sql", "compiled": true, "compiled_code": "-- Modelo Gold: An\u00e1lise de Coorte\n-- Demonstra an\u00e1lise de reten\u00e7\u00e3o de clientes por coorte de aquisi\u00e7\u00e3o\n\n\n\nWITH clientes_primeira_compra AS (\n    SELECT \n        cliente_id,\n        MIN(data_pedido) as primeira_compra,\n        DATE_TRUNC('month', MIN(data_pedido)) as mes_aquisicao\n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\"\n    GROUP BY cliente_id\n),\n\natividade_mensal AS (\n    SELECT \n        p.cliente_id,\n        DATE_TRUNC('month', p.data_pedido) as mes_atividade,\n        SUM(p.valor_liquido) as receita_mes,\n        COUNT(*) as pedidos_mes\n    FROM \"db_source\".\"public_silver\".\"fct_pedidos\" p\n    GROUP BY p.cliente_id, DATE_TRUNC('month', p.data_pedido)\n),\n\ncoorte_base AS (\n    SELECT \n        cpc.mes_aquisicao,\n        COUNT(DISTINCT cpc.cliente_id) as clientes_adquiridos,\n        SUM(am.receita_mes) as receita_aquisicao\n    FROM clientes_primeira_compra cpc\n    INNER JOIN atividade_mensal am ON cpc.cliente_id = am.cliente_id \n                                   AND cpc.mes_aquisicao = am.mes_atividade\n    GROUP BY cpc.mes_aquisicao\n),\n\ncoorte_retencao AS (\n    SELECT \n        cpc.mes_aquisicao,\n        am.mes_atividade,\n        \n        -- Per\u00edodo desde aquisi\u00e7\u00e3o (em meses)\n        EXTRACT(YEAR FROM am.mes_atividade) * 12 + EXTRACT(MONTH FROM am.mes_atividade) -\n        (EXTRACT(YEAR FROM cpc.mes_aquisicao) * 12 + EXTRACT(MONTH FROM cpc.mes_aquisicao)) as periodo_desde_aquisicao,\n        \n        COUNT(DISTINCT cpc.cliente_id) as clientes_ativos,\n        SUM(am.receita_mes) as receita_periodo,\n        AVG(am.receita_mes) as receita_media_cliente,\n        COUNT(am.pedidos_mes) as total_pedidos\n        \n    FROM clientes_primeira_compra cpc\n    INNER JOIN atividade_mensal am ON cpc.cliente_id = am.cliente_id\n    WHERE am.mes_atividade >= cpc.mes_aquisicao\n    GROUP BY \n        cpc.mes_aquisicao, \n        am.mes_atividade,\n        periodo_desde_aquisicao\n),\n\ncoorte_metricas AS (\n    SELECT \n        cr.mes_aquisicao,\n        cr.periodo_desde_aquisicao,\n        cr.clientes_ativos,\n        cb.clientes_adquiridos,\n        \n        -- Taxa de reten\u00e7\u00e3o\n        ROUND(\n            (cr.clientes_ativos::DECIMAL / cb.clientes_adquiridos) * 100, 2\n        ) as taxa_retencao_pct,\n        \n        -- M\u00e9tricas financeiras\n        cr.receita_periodo,\n        cr.receita_media_cliente,\n        cr.total_pedidos,\n        \n        -- Revenue per User (RPU)\n        ROUND(\n            cr.receita_periodo / NULLIF(cr.clientes_ativos, 0), 2\n        ) as rpu,\n        \n        -- Lifetime Value acumulado por coorte\n        SUM(cr.receita_periodo) OVER (\n            PARTITION BY cr.mes_aquisicao \n            ORDER BY cr.periodo_desde_aquisicao \n            ROWS UNBOUNDED PRECEDING\n        ) as ltv_acumulado,\n        \n        -- Churn rate (diferen\u00e7a de reten\u00e7\u00e3o entre per\u00edodos)\n        LAG(cr.clientes_ativos) OVER (\n            PARTITION BY cr.mes_aquisicao \n            ORDER BY cr.periodo_desde_aquisicao\n        ) - cr.clientes_ativos as clientes_perdidos,\n        \n        -- Taxa de churn\n        CASE \n            WHEN LAG(cr.clientes_ativos) OVER (\n                PARTITION BY cr.mes_aquisicao \n                ORDER BY cr.periodo_desde_aquisicao\n            ) > 0 THEN\n                ROUND(\n                    ((LAG(cr.clientes_ativos) OVER (\n                        PARTITION BY cr.mes_aquisicao \n                        ORDER BY cr.periodo_desde_aquisicao\n                    ) - cr.clientes_ativos)::DECIMAL / \n                    LAG(cr.clientes_ativos) OVER (\n                        PARTITION BY cr.mes_aquisicao \n                        ORDER BY cr.periodo_desde_aquisicao\n                    )) * 100, 2\n                )\n            ELSE 0\n        END as taxa_churn_pct\n        \n    FROM coorte_retencao cr\n    INNER JOIN coorte_base cb ON cr.mes_aquisicao = cb.mes_aquisicao\n),\n\ncoorte_benchmarks AS (\n    SELECT \n        periodo_desde_aquisicao,\n        \n        -- Benchmarks por per\u00edodo\n        AVG(taxa_retencao_pct) as taxa_retencao_media,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_mediana,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_p25,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY taxa_retencao_pct) as taxa_retencao_p75,\n        \n        AVG(rpu) as rpu_medio,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY rpu) as rpu_mediano\n        \n    FROM coorte_metricas\n    WHERE periodo_desde_aquisicao <= 12 -- Primeiros 12 meses\n    GROUP BY periodo_desde_aquisicao\n),\n\nresultado_final AS (\n    SELECT \n        cm.mes_aquisicao,\n        cm.periodo_desde_aquisicao,\n        \n        -- Informa\u00e7\u00f5es da coorte\n        cm.clientes_adquiridos,\n        cm.clientes_ativos,\n        cm.clientes_perdidos,\n        \n        -- Taxas de reten\u00e7\u00e3o e churn\n        cm.taxa_retencao_pct,\n        cm.taxa_churn_pct,\n        \n        -- M\u00e9tricas financeiras\n        cm.receita_periodo,\n        cm.receita_media_cliente,\n        cm.rpu,\n        cm.ltv_acumulado,\n        cm.total_pedidos,\n        \n        -- Compara\u00e7\u00e3o com benchmarks\n        cb.taxa_retencao_media as benchmark_retencao_media,\n        cb.rpu_medio as benchmark_rpu_medio,\n        \n        -- Performance vs benchmark\n        CASE \n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_p75 THEN 'Excelente'\n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_mediana THEN 'Acima da M\u00e9dia'\n            WHEN cm.taxa_retencao_pct > cb.taxa_retencao_p25 THEN 'Abaixo da M\u00e9dia'\n            ELSE 'Cr\u00edtico'\n        END as performance_retencao,\n        \n        -- Classifica\u00e7\u00e3o da coorte\n        CASE \n            WHEN cm.periodo_desde_aquisicao = 0 THEN 'Aquisi\u00e7\u00e3o'\n            WHEN cm.periodo_desde_aquisicao <= 3 THEN 'Onboarding'\n            WHEN cm.periodo_desde_aquisicao <= 6 THEN 'Estabelecimento'\n            WHEN cm.periodo_desde_aquisicao <= 12 THEN 'Matura\u00e7\u00e3o'\n            ELSE 'Longo Prazo'\n        END as fase_ciclo_vida,\n        \n        -- Flags de alerta\n        CASE \n            WHEN cm.taxa_churn_pct > 20 THEN true \n            ELSE false \n        END as alerta_churn_alto,\n        \n        CASE \n            WHEN cm.rpu < cb.rpu_medio * 0.8 THEN true \n            ELSE false \n        END as alerta_rpu_baixo,\n        \n        -- Auditoria\n        \n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '7b0ac06c-66b2-40fc-80a9-d80ace88de6b' as dbt_run_id,\n    'system' as dbt_created_by\n\n        \n    FROM coorte_metricas cm\n    LEFT JOIN coorte_benchmarks cb ON cm.periodo_desde_aquisicao = cb.periodo_desde_aquisicao\n)\n\nSELECT * FROM resultado_final\nWHERE periodo_desde_aquisicao <= 24 -- Limitar a 24 meses para performance\nORDER BY mes_aquisicao DESC, periodo_desde_aquisicao ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes": {"database": "db_source", "schema": "public_gold", "name": "gold_visao_geral_clientes", "resource_type": "model", "package_name": "meu_projeto_dbt_riocard", "path": "gold/gold_visao_geral_clientes.sql", "original_file_path": "models/gold/gold_visao_geral_clientes.sql", "unique_id": "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "fqn": ["meu_projeto_dbt_riocard", "gold", "gold_visao_geral_clientes"], "alias": "gold_visao_geral_clientes", "checksum": {"name": "sha256", "checksum": "5c681eefb6ad48859936a33fe3c195e31680ea92939daf368498414d90c04221"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["gold", "analytics"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["gold", "analytics"], "description": "Vis\u00e3o consolidada dos clientes com m\u00e9tricas de compras e segmenta\u00e7\u00e3o. Pronto para consumo em pain\u00e9is gerenciais e an\u00e1lises de neg\u00f3cio.\n", "columns": {"cliente_id_origem": {"name": "cliente_id_origem", "description": "Identificador \u00fanico do cliente na origem", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome_completo": {"name": "nome_completo", "description": "Nome completo do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "email_padronizado": {"name": "email_padronizado", "description": "Email padronizado", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_cadastro_ts": {"name": "data_cadastro_ts", "description": "Data e hora de cadastro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ultima_atualizacao_cliente_ts": {"name": "ultima_atualizacao_cliente_ts", "description": "Data e hora da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "dominio_email": {"name": "dominio_email", "description": "Dom\u00ednio de email", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ano_cadastro": {"name": "ano_cadastro", "description": "Ano de cadastro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "total_pedidos_realizados": {"name": "total_pedidos_realizados", "description": "Total de pedidos feitos pelo cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_total_gasto_cliente": {"name": "valor_total_gasto_cliente", "description": "Valor total gasto pelo cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_primeiro_pedido": {"name": "data_primeiro_pedido", "description": "Data do primeiro pedido do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_ultimo_pedido": {"name": "data_ultimo_pedido", "description": "Data do \u00faltimo pedido do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "segmento_cliente": {"name": "segmento_cliente", "description": "Segmenta\u00e7\u00e3o do cliente baseada no n\u00famero de pedidos", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "meu_projeto_dbt_riocard://models/gold/schema.yml", "build_path": "target/run/meu_projeto_dbt_riocard/models/gold/gold_visao_geral_clientes.sql", "unrendered_config": {"materialized": "table", "schema": "gold", "tags": ["gold", "analytics"]}, "created_at": 1750210279.506332, "relation_name": "\"db_source\".\"public_gold\".\"gold_visao_geral_clientes\"", "raw_code": "-- models/gold/gold_visao_geral_clientes.sql\n\n-- Este modelo de agrega\u00e7\u00e3o fornece uma vis\u00e3o geral dos clientes,\n-- combinando informa\u00e7\u00f5es da camada silver de clientes e pedidos.\n\nWITH silver_clientes AS (\n    SELECT\n        cliente_id_origem,\n        nome_completo,\n        email_padronizado,\n        telefone,\n        cpf,\n        status,\n        tipo_cliente,\n        limite_credito,\n        data_cadastro_ts,\n        updated_at_ts,\n        dominio_email,\n        ano_cadastro,\n        idade_estimada\n    FROM\n        {{ ref('silver_clientes') }}\n),\n\nsilver_pedidos AS (\n    SELECT\n        cliente_id_origem,\n        pedido_id_origem,\n        valor_bruto_decimal,\n        valor_liquido_decimal,\n        status,\n        data_pedido_ts\n    FROM\n        {{ ref('silver_pedidos') }}\n),\n\npedidos_agregados_por_cliente AS (\n    SELECT\n        cliente_id_origem,\n        COUNT(pedido_id_origem) AS total_pedidos,\n        SUM(valor_liquido_decimal) AS valor_total_gasto,\n        AVG(valor_liquido_decimal) AS ticket_medio,\n        MIN(data_pedido_ts) AS data_primeiro_pedido,\n        MAX(data_pedido_ts) AS data_ultimo_pedido,\n        COUNT(CASE WHEN status = 'concluido' THEN 1 END) AS pedidos_concluidos\n    FROM\n        silver_pedidos\n    GROUP BY\n        cliente_id_origem\n)\n\nSELECT\n    sc.cliente_id_origem,\n    sc.nome_completo,\n    sc.email_padronizado,\n    sc.telefone,\n    sc.cpf,\n    sc.status,\n    sc.tipo_cliente,\n    sc.limite_credito,\n    sc.data_cadastro_ts,\n    sc.updated_at_ts AS updated_at_cliente_ts,\n    sc.dominio_email,\n    sc.ano_cadastro,\n    sc.idade_estimada,\n    COALESCE(pa.total_pedidos, 0) AS total_pedidos_realizados,\n    COALESCE(pa.valor_total_gasto, 0.00) AS valor_total_gasto_cliente,\n    COALESCE(pa.ticket_medio, 0.00) AS ticket_medio_cliente,\n    pa.data_primeiro_pedido,\n    pa.data_ultimo_pedido,\n    COALESCE(pa.pedidos_concluidos, 0) AS pedidos_concluidos,\n    (CASE\n        WHEN pa.total_pedidos > 10 THEN 'Cliente VIP'\n        WHEN pa.total_pedidos > 5 THEN 'Cliente Regular'\n        WHEN pa.total_pedidos > 0 THEN 'Cliente Novo'\n        ELSE 'Cliente Inativo (sem pedidos)'\n    END) AS segmento_cliente,\n    (CASE\n        WHEN sc.limite_credito >= 10000 AND pa.total_pedidos > 5 THEN 'Premium'\n        WHEN sc.limite_credito >= 5000 AND pa.total_pedidos > 2 THEN 'Gold'\n        WHEN pa.total_pedidos > 0 THEN 'Silver'\n        ELSE 'Bronze'\n    END) AS categoria_valor\nFROM\n    silver_clientes sc\nLEFT JOIN\n    pedidos_agregados_por_cliente pa ON sc.cliente_id_origem = pa.cliente_id_origem\n\n-- Adicionar aqui mais l\u00f3gicas de neg\u00f3cio para a camada Gold:\n-- - C\u00e1lculo de LTV (Lifetime Value)\n-- - An\u00e1lise de Churn\n-- - Segmenta\u00e7\u00e3o avan\u00e7ada de clientes\n-- - M\u00e9tricas de Rec\u00eancia, Frequ\u00eancia, Valor (RFV)", "language": "sql", "refs": [{"name": "silver_clientes", "package": null, "version": null}, {"name": "silver_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.silver_clientes", "model.meu_projeto_dbt_riocard.silver_pedidos"]}, "compiled_path": "target/compiled/meu_projeto_dbt_riocard/models/gold/gold_visao_geral_clientes.sql", "compiled": true, "compiled_code": "-- models/gold/gold_visao_geral_clientes.sql\n\n-- Este modelo de agrega\u00e7\u00e3o fornece uma vis\u00e3o geral dos clientes,\n-- combinando informa\u00e7\u00f5es da camada silver de clientes e pedidos.\n\nWITH silver_clientes AS (\n    SELECT\n        cliente_id_origem,\n        nome_completo,\n        email_padronizado,\n        telefone,\n        cpf,\n        status,\n        tipo_cliente,\n        limite_credito,\n        data_cadastro_ts,\n        updated_at_ts,\n        dominio_email,\n        ano_cadastro,\n        idade_estimada\n    FROM\n        \"db_source\".\"public_silver\".\"silver_clientes\"\n),\n\nsilver_pedidos AS (\n    SELECT\n        cliente_id_origem,\n        pedido_id_origem,\n        valor_bruto_decimal,\n        valor_liquido_decimal,\n        status,\n        data_pedido_ts\n    FROM\n        \"db_source\".\"public_silver\".\"silver_pedidos\"\n),\n\npedidos_agregados_por_cliente AS (\n    SELECT\n        cliente_id_origem,\n        COUNT(pedido_id_origem) AS total_pedidos,\n        SUM(valor_liquido_decimal) AS valor_total_gasto,\n        AVG(valor_liquido_decimal) AS ticket_medio,\n        MIN(data_pedido_ts) AS data_primeiro_pedido,\n        MAX(data_pedido_ts) AS data_ultimo_pedido,\n        COUNT(CASE WHEN status = 'concluido' THEN 1 END) AS pedidos_concluidos\n    FROM\n        silver_pedidos\n    GROUP BY\n        cliente_id_origem\n)\n\nSELECT\n    sc.cliente_id_origem,\n    sc.nome_completo,\n    sc.email_padronizado,\n    sc.telefone,\n    sc.cpf,\n    sc.status,\n    sc.tipo_cliente,\n    sc.limite_credito,\n    sc.data_cadastro_ts,\n    sc.updated_at_ts AS updated_at_cliente_ts,\n    sc.dominio_email,\n    sc.ano_cadastro,\n    sc.idade_estimada,\n    COALESCE(pa.total_pedidos, 0) AS total_pedidos_realizados,\n    COALESCE(pa.valor_total_gasto, 0.00) AS valor_total_gasto_cliente,\n    COALESCE(pa.ticket_medio, 0.00) AS ticket_medio_cliente,\n    pa.data_primeiro_pedido,\n    pa.data_ultimo_pedido,\n    COALESCE(pa.pedidos_concluidos, 0) AS pedidos_concluidos,\n    (CASE\n        WHEN pa.total_pedidos > 10 THEN 'Cliente VIP'\n        WHEN pa.total_pedidos > 5 THEN 'Cliente Regular'\n        WHEN pa.total_pedidos > 0 THEN 'Cliente Novo'\n        ELSE 'Cliente Inativo (sem pedidos)'\n    END) AS segmento_cliente,\n    (CASE\n        WHEN sc.limite_credito >= 10000 AND pa.total_pedidos > 5 THEN 'Premium'\n        WHEN sc.limite_credito >= 5000 AND pa.total_pedidos > 2 THEN 'Gold'\n        WHEN pa.total_pedidos > 0 THEN 'Silver'\n        ELSE 'Bronze'\n    END) AS categoria_valor\nFROM\n    silver_clientes sc\nLEFT JOIN\n    pedidos_agregados_por_cliente pa ON sc.cliente_id_origem = pa.cliente_id_origem\n\n-- Adicionar aqui mais l\u00f3gicas de neg\u00f3cio para a camada Gold:\n-- - C\u00e1lculo de LTV (Lifetime Value)\n-- - An\u00e1lise de Churn\n-- - Segmenta\u00e7\u00e3o avan\u00e7ada de clientes\n-- - M\u00e9tricas de Rec\u00eancia, Frequ\u00eancia, Valor (RFV)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["cliente_id_origem"], "time_spine": null}, "snapshot.meu_projeto_dbt_riocard.clientes_snapshot": {"database": "db_source", "schema": "snapshots", "name": "clientes_snapshot", "resource_type": "snapshot", "package_name": "meu_projeto_dbt_riocard", "path": "clientes_snapshot.sql", "original_file_path": "snapshots/clientes_snapshot.sql", "unique_id": "snapshot.meu_projeto_dbt_riocard.clientes_snapshot", "fqn": ["meu_projeto_dbt_riocard", "clientes_snapshot", "clientes_snapshot"], "alias": "clientes_snapshot", "checksum": {"name": "sha256", "checksum": "09e3c7b0ac23dbebe019f1396bf42cfb685e04f437348bca0dfcbe68c3605adb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snapshot", "scd2", "clientes"], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "updated_at", "check_cols": null, "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": ["snapshot", "scd2", "clientes"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"target_schema": "snapshots", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true, "tags": ["snapshot", "scd2", "clientes"]}, "created_at": 1750210279.1626382, "relation_name": "\"db_source\".\"snapshots\".\"clientes_snapshot\"", "raw_code": "\n    {{\n        config(\n          target_schema='snapshots',\n          unique_key='id',\n          strategy='timestamp',\n          updated_at='updated_at',\n          invalidate_hard_deletes=True,\n          tags=['snapshot', 'scd2', 'clientes']\n        )\n    }}\n    \n    SELECT \n        id,\n        nome,\n        email,\n        telefone,\n        cpf,\n        data_nascimento,\n        endereco,\n        status,\n        tipo_cliente,\n        limite_credito,\n        data_cadastro,\n        updated_at,\n        \n        -- Campos adicionais para an\u00e1lise hist\u00f3rica\n        {{ standardize_email('email') }} as email_padronizado,\n        {{ extract_email_domain('email') }} as dominio_email,\n        {{ validate_cpf('cpf') }} as cpf_valido,\n        \n        -- Categoriza\u00e7\u00e3o temporal\n        {{ categorize_by_date('data_cadastro') }} as categoria_cadastro\n        \n    FROM {{ source('raw_data', 'clientes') }}\n    \n", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"]], "metrics": [], "depends_on": {"macros": ["macro.meu_projeto_dbt_riocard.standardize_email", "macro.meu_projeto_dbt_riocard.extract_email_domain", "macro.meu_projeto_dbt_riocard.validate_cpf", "macro.meu_projeto_dbt_riocard.categorize_by_date"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.meu_projeto_dbt_riocard.test_email_format": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "test_email_format", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "data_quality/test_email_format.sql", "original_file_path": "tests/data_quality/test_email_format.sql", "unique_id": "test.meu_projeto_dbt_riocard.test_email_format", "fqn": ["meu_projeto_dbt_riocard", "data_quality", "test_email_format"], "alias": "test_email_format", "checksum": {"name": "sha256", "checksum": "10f0e95113b78ae5f8578c32184b62999fd30d98caf91ce3600fa52c111579e9"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.2058592, "relation_name": null, "raw_code": "-- Teste de qualidade de dados: Valida\u00e7\u00e3o de formato de email\n-- Este teste identifica emails com formato inv\u00e1lido\n\nSELECT \n    cliente_id,\n    email_original as email,\n    'Formato de email inv\u00e1lido' as erro_descricao\nFROM {{ ref('dim_clientes') }}\nWHERE email_original IS NOT NULL\n  AND email_original NOT LIKE '%@%.%'\n  OR email_original LIKE '%@%@%'\n  OR email_original LIKE '.%@%'\n  OR email_original LIKE '%@.%'\n  OR LENGTH(email_original) < 5", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.meu_projeto_dbt_riocard.test_pedido_valor_positivo": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "test_pedido_valor_positivo", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "business_rules/test_pedido_valor_positivo.sql", "original_file_path": "tests/business_rules/test_pedido_valor_positivo.sql", "unique_id": "test.meu_projeto_dbt_riocard.test_pedido_valor_positivo", "fqn": ["meu_projeto_dbt_riocard", "business_rules", "test_pedido_valor_positivo"], "alias": "test_pedido_valor_positivo", "checksum": {"name": "sha256", "checksum": "c2a0e6cd9ab0417c0b96051a51da3604b5679320ba0255d333bf36f56083fe3a"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.209676, "relation_name": null, "raw_code": "-- Teste de regra de neg\u00f3cio: Pedidos devem ter valor positivo\n-- Este teste falha se encontrar pedidos com valor <= 0\n\nSELECT \n    pedido_id,\n    valor_liquido,\n    'Valor de pedido inv\u00e1lido' as erro_descricao\nFROM {{ ref('fct_pedidos') }}\nWHERE valor_liquido <= 0", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.meu_projeto_dbt_riocard.test_cliente_sem_pedidos_antigos": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "test_cliente_sem_pedidos_antigos", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "business_rules/test_cliente_sem_pedidos_antigos.sql", "original_file_path": "tests/business_rules/test_cliente_sem_pedidos_antigos.sql", "unique_id": "test.meu_projeto_dbt_riocard.test_cliente_sem_pedidos_antigos", "fqn": ["meu_projeto_dbt_riocard", "business_rules", "test_cliente_sem_pedidos_antigos"], "alias": "test_cliente_sem_pedidos_antigos", "checksum": {"name": "sha256", "checksum": "b1a046d1e531c33952a3ad2cfa15cb61ddf9d00756cf2baa1ac2e7e0476d0622"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.2109, "relation_name": null, "raw_code": "-- Teste de regra de neg\u00f3cio: Clientes cadastrados h\u00e1 mais de 1 ano devem ter pelo menos 1 pedido\n-- Este teste identifica clientes antigos sem atividade de compra\n\nSELECT \n    c.cliente_id,\n    c.nome,\n    c.data_cadastro,\n    'Cliente antigo sem pedidos' as alerta_descricao\nFROM {{ ref('dim_clientes') }} c\nLEFT JOIN {{ ref('fct_pedidos') }} p ON c.cliente_id = p.cliente_id\nWHERE c.data_cadastro < CURRENT_DATE - INTERVAL '1 year'\n  AND p.cliente_id IS NULL", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.meu_projeto_dbt_riocard.status_mapping": {"database": "db_source", "schema": "public_raw_seeds", "name": "status_mapping", "resource_type": "seed", "package_name": "meu_projeto_dbt_riocard", "path": "status_mapping.csv", "original_file_path": "seeds/status_mapping.csv", "unique_id": "seed.meu_projeto_dbt_riocard.status_mapping", "fqn": ["meu_projeto_dbt_riocard", "status_mapping"], "alias": "status_mapping", "checksum": {"name": "sha256", "checksum": "e29bffd0780cec05ef80b2fb7e1a32ff0db4c681e73c66b5621740b237fe5962"}, "config": {"enabled": true, "alias": null, "schema": "raw_seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "raw_seeds", "quote_columns": false}, "created_at": 1750210279.272042, "relation_name": "\"db_source\".\"public_raw_seeds\".\"status_mapping\"", "raw_code": "", "root_path": "/Users/michaelsantos/Documents/GitHub/dbt/dbt_project", "depends_on": {"macros": []}}, "seed.meu_projeto_dbt_riocard.categoria_produtos": {"database": "db_source", "schema": "public_raw_seeds", "name": "categoria_produtos", "resource_type": "seed", "package_name": "meu_projeto_dbt_riocard", "path": "categoria_produtos.csv", "original_file_path": "seeds/categoria_produtos.csv", "unique_id": "seed.meu_projeto_dbt_riocard.categoria_produtos", "fqn": ["meu_projeto_dbt_riocard", "categoria_produtos"], "alias": "categoria_produtos", "checksum": {"name": "sha256", "checksum": "c2532828f143c4cec132351a5039712d2e0b53e4b84a147750c609e84be1dc36"}, "config": {"enabled": true, "alias": null, "schema": "raw_seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "raw_seeds", "quote_columns": false}, "created_at": 1750210279.272979, "relation_name": "\"db_source\".\"public_raw_seeds\".\"categoria_produtos\"", "raw_code": "", "root_path": "/Users/michaelsantos/Documents/GitHub/dbt/dbt_project", "depends_on": {"macros": []}}, "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-start-0": {"database": "db_source", "schema": "public", "name": "meu_projeto_dbt_riocard-on-run-start-0", "resource_type": "operation", "package_name": "meu_projeto_dbt_riocard", "path": "hooks/meu_projeto_dbt_riocard-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-start-0", "fqn": ["meu_projeto_dbt_riocard", "hooks", "meu_projeto_dbt_riocard-on-run-start-0"], "alias": "meu_projeto_dbt_riocard-on-run-start-0", "checksum": {"name": "sha256", "checksum": "3b1086654b7345a343c275dae23c7e52a845e76960a90216f982a6346fd8467a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750210279.324089, "relation_name": null, "raw_code": "{{ log('Iniciando execu\u00e7\u00e3o do dbt - ' ~ modules.datetime.datetime.now(), info=True) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "compiled": true, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-end-0": {"database": "db_source", "schema": "public", "name": "meu_projeto_dbt_riocard-on-run-end-0", "resource_type": "operation", "package_name": "meu_projeto_dbt_riocard", "path": "hooks/meu_projeto_dbt_riocard-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-end-0", "fqn": ["meu_projeto_dbt_riocard", "hooks", "meu_projeto_dbt_riocard-on-run-end-0"], "alias": "meu_projeto_dbt_riocard-on-run-end-0", "checksum": {"name": "sha256", "checksum": "3b1086654b7345a343c275dae23c7e52a845e76960a90216f982a6346fd8467a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750210279.328456, "relation_name": null, "raw_code": "{{ log('Execu\u00e7\u00e3o do dbt finalizada - ' ~ modules.datetime.datetime.now(), info=True) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "compiled": true, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "test.meu_projeto_dbt_riocard.unique_bronze_clientes_id.dcf1549ce3": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_bronze_clientes_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_bronze_clientes_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_bronze_clientes_id.dcf1549ce3", "fqn": ["meu_projeto_dbt_riocard", "bronze", "unique_bronze_clientes_id"], "alias": "unique_bronze_clientes_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.407418, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_clientes", "attached_node": "model.meu_projeto_dbt_riocard.bronze_clientes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_bronze_clientes_id.547c771517": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_bronze_clientes_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_bronze_clientes_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_bronze_clientes_id.547c771517", "fqn": ["meu_projeto_dbt_riocard", "bronze", "not_null_bronze_clientes_id"], "alias": "not_null_bronze_clientes_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.408159, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_clientes", "attached_node": "model.meu_projeto_dbt_riocard.bronze_clientes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_bronze_pedidos_id.4f6947619f": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_bronze_pedidos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_bronze_pedidos_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_bronze_pedidos_id.4f6947619f", "fqn": ["meu_projeto_dbt_riocard", "bronze", "unique_bronze_pedidos_id"], "alias": "unique_bronze_pedidos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.408718, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.bronze_pedidos", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_bronze_pedidos_id.5d4eb26602": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_bronze_pedidos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_bronze_pedidos_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_bronze_pedidos_id.5d4eb26602", "fqn": ["meu_projeto_dbt_riocard", "bronze", "not_null_bronze_pedidos_id"], "alias": "not_null_bronze_pedidos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.409237, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.bronze_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_bronze_produtos_id.edac519110": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_bronze_produtos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_bronze_produtos_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_bronze_produtos_id.edac519110", "fqn": ["meu_projeto_dbt_riocard", "bronze", "unique_bronze_produtos_id"], "alias": "unique_bronze_produtos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.409847, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_produtos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_produtos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_produtos", "attached_node": "model.meu_projeto_dbt_riocard.bronze_produtos", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_produtos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_bronze_produtos_id.d28d66ad2f": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_bronze_produtos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_bronze_produtos_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_bronze_produtos_id.d28d66ad2f", "fqn": ["meu_projeto_dbt_riocard", "bronze", "not_null_bronze_produtos_id"], "alias": "not_null_bronze_produtos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.410356, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_produtos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_produtos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_produtos", "attached_node": "model.meu_projeto_dbt_riocard.bronze_produtos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_produtos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_bronze_itens_pedidos_id.bbce4ef42a": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_bronze_itens_pedidos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_bronze_itens_pedidos_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_bronze_itens_pedidos_id.bbce4ef42a", "fqn": ["meu_projeto_dbt_riocard", "bronze", "unique_bronze_itens_pedidos_id"], "alias": "unique_bronze_itens_pedidos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.4108648, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_itens_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_itens_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_itens_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.bronze_itens_pedidos", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_itens_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_bronze_itens_pedidos_id.652c9ca83a": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_bronze_itens_pedidos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_bronze_itens_pedidos_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_bronze_itens_pedidos_id.652c9ca83a", "fqn": ["meu_projeto_dbt_riocard", "bronze", "not_null_bronze_itens_pedidos_id"], "alias": "not_null_bronze_itens_pedidos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.411367, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_itens_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_itens_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_itens_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.bronze_itens_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_itens_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_bronze_leads_id.fd294723c1": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_bronze_leads_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_bronze_leads_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_bronze_leads_id.fd294723c1", "fqn": ["meu_projeto_dbt_riocard", "bronze", "unique_bronze_leads_id"], "alias": "unique_bronze_leads_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.4118621, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_leads", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_leads"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_leads", "attached_node": "model.meu_projeto_dbt_riocard.bronze_leads", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_leads')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_bronze_leads_id.907c461eb7": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_bronze_leads_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_bronze_leads_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_bronze_leads_id.907c461eb7", "fqn": ["meu_projeto_dbt_riocard", "bronze", "not_null_bronze_leads_id"], "alias": "not_null_bronze_leads_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.412405, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bronze_leads", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.bronze_leads"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bronze_leads", "attached_node": "model.meu_projeto_dbt_riocard.bronze_leads", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bronze_leads')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_dim_clientes_cliente_id.3b564a3bce": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_dim_clientes_cliente_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_dim_clientes_cliente_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_dim_clientes_cliente_id.3b564a3bce", "fqn": ["meu_projeto_dbt_riocard", "silver", "unique_dim_clientes_cliente_id"], "alias": "unique_dim_clientes_cliente_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.485792, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id", "file_key_name": "models.dim_clientes", "attached_node": "model.meu_projeto_dbt_riocard.dim_clientes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cliente_id", "model": "{{ get_where_subquery(ref('dim_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_dim_clientes_cliente_id.72dd473286": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_dim_clientes_cliente_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_dim_clientes_cliente_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_dim_clientes_cliente_id.72dd473286", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_dim_clientes_cliente_id"], "alias": "not_null_dim_clientes_cliente_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.486478, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id", "file_key_name": "models.dim_clientes", "attached_node": "model.meu_projeto_dbt_riocard.dim_clientes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cliente_id", "model": "{{ get_where_subquery(ref('dim_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_dim_clientes_nome.6b2c845e9c": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_dim_clientes_nome", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_dim_clientes_nome.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_dim_clientes_nome.6b2c845e9c", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_dim_clientes_nome"], "alias": "not_null_dim_clientes_nome", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.4871402, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nome", "file_key_name": "models.dim_clientes", "attached_node": "model.meu_projeto_dbt_riocard.dim_clientes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nome", "model": "{{ get_where_subquery(ref('dim_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_dim_clientes_email_original.84998ac711": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_dim_clientes_email_original", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_dim_clientes_email_original.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_dim_clientes_email_original.84998ac711", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_dim_clientes_email_original"], "alias": "not_null_dim_clientes_email_original", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.4877, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_original", "file_key_name": "models.dim_clientes", "attached_node": "model.meu_projeto_dbt_riocard.dim_clientes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_original", "model": "{{ get_where_subquery(ref('dim_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_dim_clientes_email_original.d0a55eb8fa": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_dim_clientes_email_original", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_dim_clientes_email_original.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_dim_clientes_email_original.d0a55eb8fa", "fqn": ["meu_projeto_dbt_riocard", "silver", "unique_dim_clientes_email_original"], "alias": "unique_dim_clientes_email_original", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.488242, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_original", "file_key_name": "models.dim_clientes", "attached_node": "model.meu_projeto_dbt_riocard.dim_clientes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email_original", "model": "{{ get_where_subquery(ref('dim_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_fct_pedidos_pedido_id.a986e612b4": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_fct_pedidos_pedido_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_fct_pedidos_pedido_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_fct_pedidos_pedido_id.a986e612b4", "fqn": ["meu_projeto_dbt_riocard", "silver", "unique_fct_pedidos_pedido_id"], "alias": "unique_fct_pedidos_pedido_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.489235, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pedido_id", "file_key_name": "models.fct_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.fct_pedidos", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pedido_id", "model": "{{ get_where_subquery(ref('fct_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_pedido_id.509f9f9649": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_fct_pedidos_pedido_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_fct_pedidos_pedido_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_pedido_id.509f9f9649", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_fct_pedidos_pedido_id"], "alias": "not_null_fct_pedidos_pedido_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.49004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pedido_id", "file_key_name": "models.fct_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.fct_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pedido_id", "model": "{{ get_where_subquery(ref('fct_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_cliente_id.815a071273": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_fct_pedidos_cliente_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_fct_pedidos_cliente_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_cliente_id.815a071273", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_fct_pedidos_cliente_id"], "alias": "not_null_fct_pedidos_cliente_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.490755, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id", "file_key_name": "models.fct_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.fct_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cliente_id", "model": "{{ get_where_subquery(ref('fct_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.relationships_fct_pedidos_cliente_id__cliente_id__ref_dim_clientes_.c4372db2b8": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "relationships_fct_pedidos_cliente_id__cliente_id__ref_dim_clientes_", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "relationships_fct_pedidos_3333a3d9d1660a256952fd212466ba98.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.relationships_fct_pedidos_cliente_id__cliente_id__ref_dim_clientes_.c4372db2b8", "fqn": ["meu_projeto_dbt_riocard", "silver", "relationships_fct_pedidos_cliente_id__cliente_id__ref_dim_clientes_"], "alias": "relationships_fct_pedidos_3333a3d9d1660a256952fd212466ba98", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_pedidos_3333a3d9d1660a256952fd212466ba98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "relationships_fct_pedidos_3333a3d9d1660a256952fd212466ba98"}, "created_at": 1750210279.49135, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_pedidos_3333a3d9d1660a256952fd212466ba98\") }}", "language": "sql", "refs": [{"name": "dim_clientes", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id", "file_key_name": "models.fct_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.fct_pedidos", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_clientes')", "field": "cliente_id", "column_name": "cliente_id", "model": "{{ get_where_subquery(ref('fct_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_numero_pedido.cdfbeca68c": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_fct_pedidos_numero_pedido", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_fct_pedidos_numero_pedido.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_numero_pedido.cdfbeca68c", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_fct_pedidos_numero_pedido"], "alias": "not_null_fct_pedidos_numero_pedido", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.4988532, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "numero_pedido", "file_key_name": "models.fct_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.fct_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "numero_pedido", "model": "{{ get_where_subquery(ref('fct_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_bruto.72f27b5c49": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_fct_pedidos_valor_bruto", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_fct_pedidos_valor_bruto.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_bruto.72f27b5c49", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_fct_pedidos_valor_bruto"], "alias": "not_null_fct_pedidos_valor_bruto", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.499415, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valor_bruto", "file_key_name": "models.fct_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.fct_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valor_bruto", "model": "{{ get_where_subquery(ref('fct_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_liquido.22f5b0819e": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_fct_pedidos_valor_liquido", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_fct_pedidos_valor_liquido.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_liquido.22f5b0819e", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_fct_pedidos_valor_liquido"], "alias": "not_null_fct_pedidos_valor_liquido", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.499952, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.fct_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valor_liquido", "file_key_name": "models.fct_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.fct_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valor_liquido", "model": "{{ get_where_subquery(ref('fct_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_silver_clientes_cliente_id_origem.65a8569d81": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_silver_clientes_cliente_id_origem", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_silver_clientes_cliente_id_origem.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_silver_clientes_cliente_id_origem.65a8569d81", "fqn": ["meu_projeto_dbt_riocard", "silver", "unique_silver_clientes_cliente_id_origem"], "alias": "unique_silver_clientes_cliente_id_origem", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.500509, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.silver_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id_origem", "file_key_name": "models.silver_clientes", "attached_node": "model.meu_projeto_dbt_riocard.silver_clientes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cliente_id_origem", "model": "{{ get_where_subquery(ref('silver_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_silver_clientes_cliente_id_origem.33f2448b30": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_silver_clientes_cliente_id_origem", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_silver_clientes_cliente_id_origem.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_silver_clientes_cliente_id_origem.33f2448b30", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_silver_clientes_cliente_id_origem"], "alias": "not_null_silver_clientes_cliente_id_origem", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.501127, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.silver_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id_origem", "file_key_name": "models.silver_clientes", "attached_node": "model.meu_projeto_dbt_riocard.silver_clientes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cliente_id_origem", "model": "{{ get_where_subquery(ref('silver_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_silver_pedidos_pedido_id_origem.9235b7a6f8": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_silver_pedidos_pedido_id_origem", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_silver_pedidos_pedido_id_origem.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_silver_pedidos_pedido_id_origem.9235b7a6f8", "fqn": ["meu_projeto_dbt_riocard", "silver", "unique_silver_pedidos_pedido_id_origem"], "alias": "unique_silver_pedidos_pedido_id_origem", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5016682, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.silver_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pedido_id_origem", "file_key_name": "models.silver_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.silver_pedidos", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pedido_id_origem", "model": "{{ get_where_subquery(ref('silver_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_pedido_id_origem.884b0aa17a": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_silver_pedidos_pedido_id_origem", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_silver_pedidos_pedido_id_origem.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_pedido_id_origem.884b0aa17a", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_silver_pedidos_pedido_id_origem"], "alias": "not_null_silver_pedidos_pedido_id_origem", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.502195, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.silver_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pedido_id_origem", "file_key_name": "models.silver_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.silver_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pedido_id_origem", "model": "{{ get_where_subquery(ref('silver_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_cliente_id_origem.a61cdcdd1b": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_silver_pedidos_cliente_id_origem", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_silver_pedidos_cliente_id_origem.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_cliente_id_origem.a61cdcdd1b", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_silver_pedidos_cliente_id_origem"], "alias": "not_null_silver_pedidos_cliente_id_origem", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.50274, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.silver_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id_origem", "file_key_name": "models.silver_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.silver_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cliente_id_origem", "model": "{{ get_where_subquery(ref('silver_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_bruto_decimal.16562da75f": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_silver_pedidos_valor_bruto_decimal", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_silver_pedidos_valor_bruto_decimal.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_bruto_decimal.16562da75f", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_silver_pedidos_valor_bruto_decimal"], "alias": "not_null_silver_pedidos_valor_bruto_decimal", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5032792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.silver_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valor_bruto_decimal", "file_key_name": "models.silver_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.silver_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valor_bruto_decimal", "model": "{{ get_where_subquery(ref('silver_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_liquido_decimal.67d20274ea": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_silver_pedidos_valor_liquido_decimal", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_silver_pedidos_valor_liquido_decimal.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_liquido_decimal.67d20274ea", "fqn": ["meu_projeto_dbt_riocard", "silver", "not_null_silver_pedidos_valor_liquido_decimal"], "alias": "not_null_silver_pedidos_valor_liquido_decimal", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.503863, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.silver_pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valor_liquido_decimal", "file_key_name": "models.silver_pedidos", "attached_node": "model.meu_projeto_dbt_riocard.silver_pedidos", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valor_liquido_decimal", "model": "{{ get_where_subquery(ref('silver_pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_agg_valor_pedidos_por_cliente_mensal_valor_total_pedidos_mensal.0ff5804f30": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_agg_valor_pedidos_por_cliente_mensal_valor_total_pedidos_mensal", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_agg_valor_pedidos_por_8e0720ac83d5f944120d9dade26eabbe.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_agg_valor_pedidos_por_cliente_mensal_valor_total_pedidos_mensal.0ff5804f30", "fqn": ["meu_projeto_dbt_riocard", "gold", "not_null_agg_valor_pedidos_por_cliente_mensal_valor_total_pedidos_mensal"], "alias": "not_null_agg_valor_pedidos_por_8e0720ac83d5f944120d9dade26eabbe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_agg_valor_pedidos_por_8e0720ac83d5f944120d9dade26eabbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "not_null_agg_valor_pedidos_por_8e0720ac83d5f944120d9dade26eabbe"}, "created_at": 1750210279.506804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_agg_valor_pedidos_por_8e0720ac83d5f944120d9dade26eabbe\") }}", "language": "sql", "refs": [{"name": "agg_valor_pedidos_por_cliente_mensal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valor_total_pedidos_mensal", "file_key_name": "models.agg_valor_pedidos_por_cliente_mensal", "attached_node": "model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valor_total_pedidos_mensal", "model": "{{ get_where_subquery(ref('agg_valor_pedidos_por_cliente_mensal')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.unique_gold_visao_geral_clientes_cliente_id_origem.50717aad5e": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "unique_gold_visao_geral_clientes_cliente_id_origem", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "unique_gold_visao_geral_clientes_cliente_id_origem.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.unique_gold_visao_geral_clientes_cliente_id_origem.50717aad5e", "fqn": ["meu_projeto_dbt_riocard", "gold", "unique_gold_visao_geral_clientes_cliente_id_origem"], "alias": "unique_gold_visao_geral_clientes_cliente_id_origem", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.507613, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gold_visao_geral_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id_origem", "file_key_name": "models.gold_visao_geral_clientes", "attached_node": "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cliente_id_origem", "model": "{{ get_where_subquery(ref('gold_visao_geral_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.not_null_gold_visao_geral_clientes_cliente_id_origem.efd5526208": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "not_null_gold_visao_geral_clientes_cliente_id_origem", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "not_null_gold_visao_geral_clientes_cliente_id_origem.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.meu_projeto_dbt_riocard.not_null_gold_visao_geral_clientes_cliente_id_origem.efd5526208", "fqn": ["meu_projeto_dbt_riocard", "gold", "not_null_gold_visao_geral_clientes_cliente_id_origem"], "alias": "not_null_gold_visao_geral_clientes_cliente_id_origem", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.508184, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gold_visao_geral_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id_origem", "file_key_name": "models.gold_visao_geral_clientes", "attached_node": "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cliente_id_origem", "model": "{{ get_where_subquery(ref('gold_visao_geral_clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_id.499151fbfb": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_clientes_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_clientes_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_id.499151fbfb", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_clientes_id"], "alias": "source_unique_raw_data_clientes_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5287838, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_id.8782a746ba": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_clientes_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_clientes_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_id.8782a746ba", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_clientes_id"], "alias": "source_not_null_raw_data_clientes_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5294561, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_nome.273efb8a8d": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_clientes_nome", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_clientes_nome.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_nome.273efb8a8d", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_clientes_nome"], "alias": "source_not_null_raw_data_clientes_nome", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.529994, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nome", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nome", "model": "{{ get_where_subquery(source('raw_data', 'clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_email.44aedb381f": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_clientes_email", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_clientes_email.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_email.44aedb381f", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_clientes_email"], "alias": "source_unique_raw_data_clientes_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.530517, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(source('raw_data', 'clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_email.0f03d70749": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_clientes_email", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_clientes_email.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_email.0f03d70749", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_clientes_email"], "alias": "source_not_null_raw_data_clientes_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.531033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(source('raw_data', 'clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_cpf.354dd2c182": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_clientes_cpf", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_clientes_cpf.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_cpf.354dd2c182", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_clientes_cpf"], "alias": "source_unique_raw_data_clientes_cpf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.531559, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cpf", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "cpf", "model": "{{ get_where_subquery(source('raw_data', 'clientes')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_id.e6246ff199": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_pedidos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_pedidos_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_id.e6246ff199", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_pedidos_id"], "alias": "source_unique_raw_data_pedidos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.532968, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "pedidos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_id.72908ce22e": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_pedidos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_pedidos_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_id.72908ce22e", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_pedidos_id"], "alias": "source_not_null_raw_data_pedidos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.533484, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "pedidos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_cliente_id.f4c584d497": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_pedidos_cliente_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_pedidos_cliente_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_cliente_id.f4c584d497", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_pedidos_cliente_id"], "alias": "source_not_null_raw_data_pedidos_cliente_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.534006, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "pedidos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cliente_id", "model": "{{ get_where_subquery(source('raw_data', 'pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_relationships_raw_data_pedidos_cliente_id__id__source_raw_data_clientes_.363a4ca76e": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_relationships_raw_data_pedidos_cliente_id__id__source_raw_data_clientes_", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_relationships_raw_data__26f371f59cd7aab4cd33f6e698d90f61.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_relationships_raw_data_pedidos_cliente_id__id__source_raw_data_clientes_.363a4ca76e", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_relationships_raw_data_pedidos_cliente_id__id__source_raw_data_clientes_"], "alias": "source_relationships_raw_data__26f371f59cd7aab4cd33f6e698d90f61", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_raw_data__26f371f59cd7aab4cd33f6e698d90f61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "source_relationships_raw_data__26f371f59cd7aab4cd33f6e698d90f61"}, "created_at": 1750210279.534534, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_raw_data__26f371f59cd7aab4cd33f6e698d90f61\") }}", "language": "sql", "refs": [], "sources": [["raw_data", "clientes"], ["raw_data", "pedidos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.clientes", "source.meu_projeto_dbt_riocard.raw_data.pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cliente_id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"to": "source('raw_data', 'clientes')", "field": "id", "column_name": "cliente_id", "model": "{{ get_where_subquery(source('raw_data', 'pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_numero_pedido.28ef3ec538": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_pedidos_numero_pedido", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_pedidos_numero_pedido.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_numero_pedido.28ef3ec538", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_pedidos_numero_pedido"], "alias": "source_unique_raw_data_pedidos_numero_pedido", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5364401, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "pedidos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "numero_pedido", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "numero_pedido", "model": "{{ get_where_subquery(source('raw_data', 'pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_numero_pedido.bab169a2d5": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_pedidos_numero_pedido", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_pedidos_numero_pedido.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_numero_pedido.bab169a2d5", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_pedidos_numero_pedido"], "alias": "source_not_null_raw_data_pedidos_numero_pedido", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.536952, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "pedidos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "numero_pedido", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "numero_pedido", "model": "{{ get_where_subquery(source('raw_data', 'pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_valor_bruto.ddd99f0fd0": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_pedidos_valor_bruto", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_pedidos_valor_bruto.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_valor_bruto.ddd99f0fd0", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_pedidos_valor_bruto"], "alias": "source_not_null_raw_data_pedidos_valor_bruto", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5374668, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "pedidos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valor_bruto", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valor_bruto", "model": "{{ get_where_subquery(source('raw_data', 'pedidos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_id.abae4da5b0": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_produtos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_produtos_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_id.abae4da5b0", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_produtos_id"], "alias": "source_unique_raw_data_produtos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.538228, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "produtos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.produtos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'produtos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_id.1ee2452ad4": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_produtos_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_produtos_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_id.1ee2452ad4", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_produtos_id"], "alias": "source_not_null_raw_data_produtos_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.53887, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "produtos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.produtos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'produtos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_codigo_produto.fa6b620a00": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_produtos_codigo_produto", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_produtos_codigo_produto.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_codigo_produto.fa6b620a00", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_produtos_codigo_produto"], "alias": "source_unique_raw_data_produtos_codigo_produto", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.539511, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "produtos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.produtos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "codigo_produto", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "codigo_produto", "model": "{{ get_where_subquery(source('raw_data', 'produtos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_codigo_produto.16f161d956": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_produtos_codigo_produto", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_produtos_codigo_produto.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_codigo_produto.16f161d956", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_produtos_codigo_produto"], "alias": "source_not_null_raw_data_produtos_codigo_produto", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.540044, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "produtos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.produtos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "codigo_produto", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "codigo_produto", "model": "{{ get_where_subquery(source('raw_data', 'produtos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_nome.b05ab6be0f": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_produtos_nome", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_produtos_nome.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_nome.b05ab6be0f", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_produtos_nome"], "alias": "source_not_null_raw_data_produtos_nome", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5405598, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "produtos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.produtos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nome", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nome", "model": "{{ get_where_subquery(source('raw_data', 'produtos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_preco_venda.79bfcb1e90": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_produtos_preco_venda", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_produtos_preco_venda.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_preco_venda.79bfcb1e90", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_produtos_preco_venda"], "alias": "source_not_null_raw_data_produtos_preco_venda", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.541109, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "produtos"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.produtos"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "preco_venda", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "preco_venda", "model": "{{ get_where_subquery(source('raw_data', 'produtos')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_itens_pedido_id.6612935370": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_itens_pedido_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_itens_pedido_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_itens_pedido_id.6612935370", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_itens_pedido_id"], "alias": "source_unique_raw_data_itens_pedido_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5417962, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "itens_pedido"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'itens_pedido')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_id.0735e6a474": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_itens_pedido_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_itens_pedido_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_id.0735e6a474", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_itens_pedido_id"], "alias": "source_not_null_raw_data_itens_pedido_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.542305, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "itens_pedido"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'itens_pedido')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_pedido_id.545407d4d3": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_itens_pedido_pedido_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_itens_pedido_pedido_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_pedido_id.545407d4d3", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_itens_pedido_pedido_id"], "alias": "source_not_null_raw_data_itens_pedido_pedido_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.542822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "itens_pedido"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pedido_id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pedido_id", "model": "{{ get_where_subquery(source('raw_data', 'itens_pedido')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_pedido_id__id__source_raw_data_pedidos_.e36cd4996b": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_relationships_raw_data_itens_pedido_pedido_id__id__source_raw_data_pedidos_", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_relationships_raw_data__21025bc6eda43ab5a68f75fad23f5766.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_pedido_id__id__source_raw_data_pedidos_.e36cd4996b", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_relationships_raw_data_itens_pedido_pedido_id__id__source_raw_data_pedidos_"], "alias": "source_relationships_raw_data__21025bc6eda43ab5a68f75fad23f5766", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_raw_data__21025bc6eda43ab5a68f75fad23f5766", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "source_relationships_raw_data__21025bc6eda43ab5a68f75fad23f5766"}, "created_at": 1750210279.5433862, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_raw_data__21025bc6eda43ab5a68f75fad23f5766\") }}", "language": "sql", "refs": [], "sources": [["raw_data", "pedidos"], ["raw_data", "itens_pedido"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.pedidos", "source.meu_projeto_dbt_riocard.raw_data.itens_pedido"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pedido_id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"to": "source('raw_data', 'pedidos')", "field": "id", "column_name": "pedido_id", "model": "{{ get_where_subquery(source('raw_data', 'itens_pedido')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_produto_id.41df13a48a": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_itens_pedido_produto_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_itens_pedido_produto_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_produto_id.41df13a48a", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_itens_pedido_produto_id"], "alias": "source_not_null_raw_data_itens_pedido_produto_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.545248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "itens_pedido"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "produto_id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "produto_id", "model": "{{ get_where_subquery(source('raw_data', 'itens_pedido')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_produto_id__id__source_raw_data_produtos_.c75cf61cc3": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_relationships_raw_data_itens_pedido_produto_id__id__source_raw_data_produtos_", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_relationships_raw_data__56f53f9bd917fbb08b9a35f5eb262bf7.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_produto_id__id__source_raw_data_produtos_.c75cf61cc3", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_relationships_raw_data_itens_pedido_produto_id__id__source_raw_data_produtos_"], "alias": "source_relationships_raw_data__56f53f9bd917fbb08b9a35f5eb262bf7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_raw_data__56f53f9bd917fbb08b9a35f5eb262bf7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "source_relationships_raw_data__56f53f9bd917fbb08b9a35f5eb262bf7"}, "created_at": 1750210279.54578, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_raw_data__56f53f9bd917fbb08b9a35f5eb262bf7\") }}", "language": "sql", "refs": [], "sources": [["raw_data", "produtos"], ["raw_data", "itens_pedido"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.produtos", "source.meu_projeto_dbt_riocard.raw_data.itens_pedido"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "produto_id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"to": "source('raw_data', 'produtos')", "field": "id", "column_name": "produto_id", "model": "{{ get_where_subquery(source('raw_data', 'itens_pedido')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_quantidade.79e80b1a6f": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_itens_pedido_quantidade", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_itens_pedido_quantidade.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_quantidade.79e80b1a6f", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_itens_pedido_quantidade"], "alias": "source_not_null_raw_data_itens_pedido_quantidade", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.547445, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "itens_pedido"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantidade", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantidade", "model": "{{ get_where_subquery(source('raw_data', 'itens_pedido')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_preco_unitario.5cae06f02b": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_itens_pedido_preco_unitario", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_itens_pedido_preco_unitario.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_preco_unitario.5cae06f02b", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_itens_pedido_preco_unitario"], "alias": "source_not_null_raw_data_itens_pedido_preco_unitario", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.547953, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "itens_pedido"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "preco_unitario", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "preco_unitario", "model": "{{ get_where_subquery(source('raw_data', 'itens_pedido')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_campanhas_marketing_id.4e0e4d9670": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_campanhas_marketing_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_campanhas_marketing_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_campanhas_marketing_id.4e0e4d9670", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_campanhas_marketing_id"], "alias": "source_unique_raw_data_campanhas_marketing_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5486562, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "campanhas_marketing"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'campanhas_marketing')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_id.87f9751567": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_campanhas_marketing_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_campanhas_marketing_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_id.87f9751567", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_campanhas_marketing_id"], "alias": "source_not_null_raw_data_campanhas_marketing_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.549238, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "campanhas_marketing"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'campanhas_marketing')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_nome.9e31422d95": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_campanhas_marketing_nome", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_campanhas_marketing_nome.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_nome.9e31422d95", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_campanhas_marketing_nome"], "alias": "source_not_null_raw_data_campanhas_marketing_nome", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.549742, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "campanhas_marketing"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nome", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nome", "model": "{{ get_where_subquery(source('raw_data', 'campanhas_marketing')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_tipo.ebe0fdae79": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_campanhas_marketing_tipo", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_campanhas_marketing_tipo.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_tipo.ebe0fdae79", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_campanhas_marketing_tipo"], "alias": "source_not_null_raw_data_campanhas_marketing_tipo", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.550262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "campanhas_marketing"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tipo", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tipo", "model": "{{ get_where_subquery(source('raw_data', 'campanhas_marketing')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_data_inicio.30159eeeac": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_campanhas_marketing_data_inicio", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_campanhas_marketing_data_inicio.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_data_inicio.30159eeeac", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_campanhas_marketing_data_inicio"], "alias": "source_not_null_raw_data_campanhas_marketing_data_inicio", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.550795, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "campanhas_marketing"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "data_inicio", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "data_inicio", "model": "{{ get_where_subquery(source('raw_data', 'campanhas_marketing')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_unique_raw_data_leads_id.4cec3aa79e": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_unique_raw_data_leads_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_unique_raw_data_leads_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_unique_raw_data_leads_id.4cec3aa79e", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_unique_raw_data_leads_id"], "alias": "source_unique_raw_data_leads_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5515258, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "leads"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.leads"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'leads')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_id.1f635302ef": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_leads_id", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_leads_id.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_id.1f635302ef", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_leads_id"], "alias": "source_not_null_raw_data_leads_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.552046, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "leads"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.leads"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('raw_data', 'leads')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_nome.9df6951241": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_not_null_raw_data_leads_nome", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_not_null_raw_data_leads_nome.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_nome.9df6951241", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_not_null_raw_data_leads_nome"], "alias": "source_not_null_raw_data_leads_nome", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1750210279.5525498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "leads"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.leads"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nome", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nome", "model": "{{ get_where_subquery(source('raw_data', 'leads')) }}"}, "namespace": null}}, "test.meu_projeto_dbt_riocard.source_relationships_raw_data_leads_campanha_id__id__source_raw_data_campanhas_marketing_.dda67d7fec": {"database": "db_source", "schema": "public_dbt_test__audit", "name": "source_relationships_raw_data_leads_campanha_id__id__source_raw_data_campanhas_marketing_", "resource_type": "test", "package_name": "meu_projeto_dbt_riocard", "path": "source_relationships_raw_data__2a7fb91e287c96cb209b20c6fbaea664.sql", "original_file_path": "models/sources/sources.yml", "unique_id": "test.meu_projeto_dbt_riocard.source_relationships_raw_data_leads_campanha_id__id__source_raw_data_campanhas_marketing_.dda67d7fec", "fqn": ["meu_projeto_dbt_riocard", "sources", "source_relationships_raw_data_leads_campanha_id__id__source_raw_data_campanhas_marketing_"], "alias": "source_relationships_raw_data__2a7fb91e287c96cb209b20c6fbaea664", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_raw_data__2a7fb91e287c96cb209b20c6fbaea664", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "source_relationships_raw_data__2a7fb91e287c96cb209b20c6fbaea664"}, "created_at": 1750210279.553086, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_raw_data__2a7fb91e287c96cb209b20c6fbaea664\") }}", "language": "sql", "refs": [], "sources": [["raw_data", "campanhas_marketing"], ["raw_data", "leads"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing", "source.meu_projeto_dbt_riocard.raw_data.leads"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campanha_id", "file_key_name": "sources.raw_data", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"to": "source('raw_data', 'campanhas_marketing')", "field": "id", "column_name": "campanha_id", "model": "{{ get_where_subquery(source('raw_data', 'leads')) }}"}, "namespace": null}}}, "sources": {"source.meu_projeto_dbt_riocard.public.clientes": {"database": "db_source", "schema": "public", "name": "clientes", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.meu_projeto_dbt_riocard.public.clientes", "fqn": ["meu_projeto_dbt_riocard", "bronze", "public", "clientes"], "source_name": "public", "source_description": "Schema p\u00fablico do banco de dados de origem.", "loader": "", "identifier": "clientes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de clientes.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"db_source\".\"public\".\"clientes\"", "created_at": 1750210279.5260448, "unrendered_database": null, "unrendered_schema": null}, "source.meu_projeto_dbt_riocard.public.pedidos": {"database": "db_source", "schema": "public", "name": "pedidos", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.meu_projeto_dbt_riocard.public.pedidos", "fqn": ["meu_projeto_dbt_riocard", "bronze", "public", "pedidos"], "source_name": "public", "source_description": "Schema p\u00fablico do banco de dados de origem.", "loader": "", "identifier": "pedidos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de pedidos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"db_source\".\"public\".\"pedidos\"", "created_at": 1750210279.5265448, "unrendered_database": null, "unrendered_schema": null}, "source.meu_projeto_dbt_riocard.public.produtos": {"database": "db_source", "schema": "public", "name": "produtos", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.meu_projeto_dbt_riocard.public.produtos", "fqn": ["meu_projeto_dbt_riocard", "bronze", "public", "produtos"], "source_name": "public", "source_description": "Schema p\u00fablico do banco de dados de origem.", "loader": "", "identifier": "produtos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de produtos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"db_source\".\"public\".\"produtos\"", "created_at": 1750210279.526638, "unrendered_database": null, "unrendered_schema": null}, "source.meu_projeto_dbt_riocard.public.itens_pedido": {"database": "db_source", "schema": "public", "name": "itens_pedido", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.meu_projeto_dbt_riocard.public.itens_pedido", "fqn": ["meu_projeto_dbt_riocard", "bronze", "public", "itens_pedido"], "source_name": "public", "source_description": "Schema p\u00fablico do banco de dados de origem.", "loader": "", "identifier": "itens_pedido", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de itens do pedido.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"db_source\".\"public\".\"itens_pedido\"", "created_at": 1750210279.526722, "unrendered_database": null, "unrendered_schema": null}, "source.meu_projeto_dbt_riocard.public.campanhas_marketing": {"database": "db_source", "schema": "public", "name": "campanhas_marketing", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.meu_projeto_dbt_riocard.public.campanhas_marketing", "fqn": ["meu_projeto_dbt_riocard", "bronze", "public", "campanhas_marketing"], "source_name": "public", "source_description": "Schema p\u00fablico do banco de dados de origem.", "loader": "", "identifier": "campanhas_marketing", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de campanhas de marketing.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"db_source\".\"public\".\"campanhas_marketing\"", "created_at": 1750210279.5268018, "unrendered_database": null, "unrendered_schema": null}, "source.meu_projeto_dbt_riocard.public.leads": {"database": "db_source", "schema": "public", "name": "leads", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.meu_projeto_dbt_riocard.public.leads", "fqn": ["meu_projeto_dbt_riocard", "bronze", "public", "leads"], "source_name": "public", "source_description": "Schema p\u00fablico do banco de dados de origem.", "loader": "", "identifier": "leads", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de leads.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"db_source\".\"public\".\"leads\"", "created_at": 1750210279.526882, "unrendered_database": null, "unrendered_schema": null}, "source.meu_projeto_dbt_riocard.raw_data.clientes": {"database": "db_source", "schema": "public", "name": "clientes", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "unique_id": "source.meu_projeto_dbt_riocard.raw_data.clientes", "fqn": ["meu_projeto_dbt_riocard", "sources", "raw_data", "clientes"], "source_name": "raw_data", "source_description": "Fonte de dados brutos conectada diretamente ao banco de origem para o POC local sem Airbyte", "loader": "", "identifier": "clientes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}, "external": null, "description": "Dados de clientes do sistema transacional", "columns": {"id": {"name": "id", "description": "ID \u00fanico do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome": {"name": "nome", "description": "Nome completo do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "email": {"name": "email", "description": "Email do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "telefone": {"name": "telefone", "description": "Telefone de contato", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "cpf": {"name": "cpf", "description": "CPF do cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_nascimento": {"name": "data_nascimento", "description": "Data de nascimento", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "endereco": {"name": "endereco", "description": "Endere\u00e7o completo em JSON", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status do cliente (ativo, inativo, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tipo_cliente": {"name": "tipo_cliente", "description": "Tipo do cliente (pessoa_fisica, pessoa_juridica)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "limite_credito": {"name": "limite_credito", "description": "Limite de cr\u00e9dito aprovado", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_cadastro": {"name": "data_cadastro", "description": "Data de cadastro no sistema", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "created_by": {"name": "created_by", "description": "Usu\u00e1rio que criou o registro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Vers\u00e3o do registro para controle de altera\u00e7\u00f5es", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "relation_name": "\"db_source\".\"public\".\"clientes\"", "created_at": 1750210279.532623, "unrendered_database": "{{ var('source_database', 'db_source') }}", "unrendered_schema": "public"}, "source.meu_projeto_dbt_riocard.raw_data.pedidos": {"database": "db_source", "schema": "public", "name": "pedidos", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "unique_id": "source.meu_projeto_dbt_riocard.raw_data.pedidos", "fqn": ["meu_projeto_dbt_riocard", "sources", "raw_data", "pedidos"], "source_name": "raw_data", "source_description": "Fonte de dados brutos conectada diretamente ao banco de origem para o POC local sem Airbyte", "loader": "", "identifier": "pedidos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}, "external": null, "description": "Pedidos realizados pelos clientes", "columns": {"id": {"name": "id", "description": "ID \u00fanico do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "cliente_id": {"name": "cliente_id", "description": "FK para a tabela de clientes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "numero_pedido": {"name": "numero_pedido", "description": "N\u00famero \u00fanico do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_pedido": {"name": "data_pedido", "description": "Data em que o pedido foi realizado", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status do pedido (pendente, processando, enviado, entregue)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_bruto": {"name": "valor_bruto", "description": "Valor bruto do pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "desconto": {"name": "desconto", "description": "Valor do desconto aplicado", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_liquido": {"name": "valor_liquido", "description": "Valor final ap\u00f3s descontos (calculado)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "metodo_pagamento": {"name": "metodo_pagamento", "description": "Forma de pagamento utilizada", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "canal_venda": {"name": "canal_venda", "description": "Canal onde a venda foi realizada", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "observacoes": {"name": "observacoes", "description": "Observa\u00e7\u00f5es adicionais sobre o pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_entrega_prevista": {"name": "data_entrega_prevista", "description": "Data prevista para entrega", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_entrega_real": {"name": "data_entrega_real", "description": "Data real da entrega (quando dispon\u00edvel)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "created_by": {"name": "created_by", "description": "Usu\u00e1rio que criou o registro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Vers\u00e3o do registro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "relation_name": "\"db_source\".\"public\".\"pedidos\"", "created_at": 1750210279.537892, "unrendered_database": "{{ var('source_database', 'db_source') }}", "unrendered_schema": "public"}, "source.meu_projeto_dbt_riocard.raw_data.produtos": {"database": "db_source", "schema": "public", "name": "produtos", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "unique_id": "source.meu_projeto_dbt_riocard.raw_data.produtos", "fqn": ["meu_projeto_dbt_riocard", "sources", "raw_data", "produtos"], "source_name": "raw_data", "source_description": "Fonte de dados brutos conectada diretamente ao banco de origem para o POC local sem Airbyte", "loader": "", "identifier": "produtos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}, "external": null, "description": "Cat\u00e1logo de produtos do e-commerce", "columns": {"id": {"name": "id", "description": "ID \u00fanico do produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "codigo_produto": {"name": "codigo_produto", "description": "C\u00f3digo \u00fanico do produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome": {"name": "nome", "description": "Nome do produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "categoria": {"name": "categoria", "description": "Categoria principal do produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "subcategoria": {"name": "subcategoria", "description": "Subcategoria do produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "marca": {"name": "marca", "description": "Marca do produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "preco_custo": {"name": "preco_custo", "description": "Pre\u00e7o de custo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "preco_venda": {"name": "preco_venda", "description": "Pre\u00e7o de venda ao consumidor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "margem_lucro": {"name": "margem_lucro", "description": "Margem de lucro calculada automaticamente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "estoque_atual": {"name": "estoque_atual", "description": "Quantidade em estoque", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "estoque_minimo": {"name": "estoque_minimo", "description": "Estoque m\u00ednimo para reposi\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ativo": {"name": "ativo", "description": "Se o produto est\u00e1 ativo para venda", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "peso": {"name": "peso", "description": "Peso do produto em kg", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "dimensoes": {"name": "dimensoes", "description": "Dimens\u00f5es do produto em JSON", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "descricao": {"name": "descricao", "description": "Descri\u00e7\u00e3o detalhada do produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tags": {"name": "tags", "description": "Tags para categoriza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_lancamento": {"name": "data_lancamento", "description": "Data de lan\u00e7amento do produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "fornecedor_id": {"name": "fornecedor_id", "description": "ID do fornecedor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "relation_name": "\"db_source\".\"public\".\"produtos\"", "created_at": 1750210279.5414631, "unrendered_database": "{{ var('source_database', 'db_source') }}", "unrendered_schema": "public"}, "source.meu_projeto_dbt_riocard.raw_data.itens_pedido": {"database": "db_source", "schema": "public", "name": "itens_pedido", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "unique_id": "source.meu_projeto_dbt_riocard.raw_data.itens_pedido", "fqn": ["meu_projeto_dbt_riocard", "sources", "raw_data", "itens_pedido"], "source_name": "raw_data", "source_description": "Fonte de dados brutos conectada diretamente ao banco de origem para o POC local sem Airbyte", "loader": "", "identifier": "itens_pedido", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}, "external": null, "description": "Itens individuais dos pedidos", "columns": {"id": {"name": "id", "description": "ID \u00fanico do item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "pedido_id": {"name": "pedido_id", "description": "FK para o pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "produto_id": {"name": "produto_id", "description": "FK para o produto", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "quantidade": {"name": "quantidade", "description": "Quantidade do produto no pedido", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "preco_unitario": {"name": "preco_unitario", "description": "Pre\u00e7o unit\u00e1rio no momento da venda", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "desconto_item": {"name": "desconto_item", "description": "Desconto espec\u00edfico do item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "valor_total": {"name": "valor_total", "description": "Valor total do item (calculado)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "observacoes": {"name": "observacoes", "description": "Observa\u00e7\u00f5es sobre o item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "relation_name": "\"db_source\".\"public\".\"itens_pedido\"", "created_at": 1750210279.548322, "unrendered_database": "{{ var('source_database', 'db_source') }}", "unrendered_schema": "public"}, "source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing": {"database": "db_source", "schema": "public", "name": "campanhas_marketing", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "unique_id": "source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing", "fqn": ["meu_projeto_dbt_riocard", "sources", "raw_data", "campanhas_marketing"], "source_name": "raw_data", "source_description": "Fonte de dados brutos conectada diretamente ao banco de origem para o POC local sem Airbyte", "loader": "", "identifier": "campanhas_marketing", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}, "external": null, "description": "Campanhas de marketing e suas m\u00e9tricas", "columns": {"id": {"name": "id", "description": "ID \u00fanico da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome": {"name": "nome", "description": "Nome da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tipo": {"name": "tipo", "description": "Tipo da campanha (promocional, branding, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "canal": {"name": "canal", "description": "Canal de marketing utilizado", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "orcamento": {"name": "orcamento", "description": "Or\u00e7amento total da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_inicio": {"name": "data_inicio", "description": "Data de in\u00edcio da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_fim": {"name": "data_fim", "description": "Data de fim da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status atual da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "meta_leads": {"name": "meta_leads", "description": "Meta de leads a serem gerados", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "leads_gerados": {"name": "leads_gerados", "description": "N\u00famero de leads efetivamente gerados", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "taxa_conversao": {"name": "taxa_conversao", "description": "Taxa de convers\u00e3o da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "roi": {"name": "roi", "description": "Return on Investment da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "descricao": {"name": "descricao", "description": "Descri\u00e7\u00e3o detalhada da campanha", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "parametros": {"name": "parametros", "description": "Par\u00e2metros espec\u00edficos em JSON", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "relation_name": "\"db_source\".\"public\".\"campanhas_marketing\"", "created_at": 1750210279.5511959, "unrendered_database": "{{ var('source_database', 'db_source') }}", "unrendered_schema": "public"}, "source.meu_projeto_dbt_riocard.raw_data.leads": {"database": "db_source", "schema": "public", "name": "leads", "resource_type": "source", "package_name": "meu_projeto_dbt_riocard", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "unique_id": "source.meu_projeto_dbt_riocard.raw_data.leads", "fqn": ["meu_projeto_dbt_riocard", "sources", "raw_data", "leads"], "source_name": "raw_data", "source_description": "Fonte de dados brutos conectada diretamente ao banco de origem para o POC local sem Airbyte", "loader": "", "identifier": "leads", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}, "external": null, "description": "Leads gerados pelas campanhas de marketing", "columns": {"id": {"name": "id", "description": "ID \u00fanico do lead", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "nome": {"name": "nome", "description": "Nome do lead", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "email": {"name": "email", "description": "Email do lead", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "telefone": {"name": "telefone", "description": "Telefone de contato", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "empresa": {"name": "empresa", "description": "Empresa do lead", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "cargo": {"name": "cargo", "description": "Cargo do lead na empresa", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "fonte": {"name": "fonte", "description": "Fonte de origem do lead", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "campanha_id": {"name": "campanha_id", "description": "FK para a campanha que gerou o lead", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "score": {"name": "score", "description": "Score de qualifica\u00e7\u00e3o do lead (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status atual do lead no funil de vendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "interesse": {"name": "interesse", "description": "N\u00edvel de interesse demonstrado", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "orcamento_estimado": {"name": "orcamento_estimado", "description": "Or\u00e7amento estimado do lead", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_contato": {"name": "data_contato", "description": "Data do primeiro contato", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "data_conversao": {"name": "data_conversao", "description": "Data da convers\u00e3o (se aplic\u00e1vel)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "observacoes": {"name": "observacoes", "description": "Observa\u00e7\u00f5es sobre o lead", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tags": {"name": "tags", "description": "Tags para categoriza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ultima_atividade": {"name": "ultima_atividade", "description": "Timestamp da \u00faltima atividade", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp da \u00faltima atualiza\u00e7\u00e3o", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 6, "period": "hour"}, "filter": null}}, "relation_name": "\"db_source\".\"public\".\"leads\"", "created_at": 1750210279.55502, "unrendered_database": "{{ var('source_database', 'db_source') }}", "unrendered_schema": "public"}}, "macros": {"macro.meu_projeto_dbt_riocard.add_audit_columns": {"name": "add_audit_columns", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.add_audit_columns", "macro_sql": "{% macro add_audit_columns() %}\n    CURRENT_TIMESTAMP as dbt_created_at,\n    CURRENT_TIMESTAMP as dbt_updated_at,\n    '{{ invocation_id }}' as dbt_run_id,\n    '{{ var(\"dbt_user\", \"system\") }}' as dbt_created_by\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.73551, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.clean_text": {"name": "clean_text", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.clean_text", "macro_sql": "{% macro clean_text(column_name) %}\n    TRIM(UPPER(REGEXP_REPLACE({{ column_name }}, '[^a-zA-Z0-9\\s]', '', 'g')))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.735606, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.standardize_email": {"name": "standardize_email", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.standardize_email", "macro_sql": "{% macro standardize_email(email_column) %}\n    LOWER(TRIM({{ email_column }}))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.735678, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.calculate_clv": {"name": "calculate_clv", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.calculate_clv", "macro_sql": "{% macro calculate_clv(customer_id_col, revenue_col, period_months=12) %}\n    SUM(CASE \n        WHEN DATE_PART('month', AGE(CURRENT_DATE, data_pedido)) <= {{ period_months }}\n        THEN {{ revenue_col }}\n        ELSE 0 \n    END)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.73578, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.classify_customer_value": {"name": "classify_customer_value", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.classify_customer_value", "macro_sql": "{% macro classify_customer_value(revenue_column) %}\n    CASE \n        WHEN {{ revenue_column }} >= 10000 THEN 'VIP'\n        WHEN {{ revenue_column }} >= 5000 THEN 'Premium'\n        WHEN {{ revenue_column }} >= 1000 THEN 'Regular'\n        ELSE 'B\u00e1sico'\n    END\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.735879, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.detect_outliers": {"name": "detect_outliers", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.detect_outliers", "macro_sql": "{% macro detect_outliers(column_name, table_ref) %}\n    WITH quartiles AS (\n        SELECT \n            PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY {{ column_name }}) as q1,\n            PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY {{ column_name }}) as q3\n        FROM {{ table_ref }}\n    ),\n    iqr_bounds AS (\n        SELECT \n            q1,\n            q3,\n            q3 - q1 as iqr,\n            q1 - 1.5 * (q3 - q1) as lower_bound,\n            q3 + 1.5 * (q3 - q1) as upper_bound\n        FROM quartiles\n    )\n    SELECT *\n    FROM {{ table_ref }}\n    CROSS JOIN iqr_bounds\n    WHERE {{ column_name }} < lower_bound \n       OR {{ column_name }} > upper_bound\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.736026, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.generate_row_hash": {"name": "generate_row_hash", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.generate_row_hash", "macro_sql": "{% macro generate_row_hash(columns) %}\n    MD5(CONCAT(\n        {% for column in columns %}\n            COALESCE({{ column }}::text, '')\n            {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}\n    ))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.736178, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.validate_cpf": {"name": "validate_cpf", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.validate_cpf", "macro_sql": "{% macro validate_cpf(cpf_column) %}\n    CASE \n        WHEN LENGTH(REGEXP_REPLACE({{ cpf_column }}, '[^0-9]', '', 'g')) = 11\n        THEN true\n        ELSE false\n    END\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.736249, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.extract_email_domain": {"name": "extract_email_domain", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.extract_email_domain", "macro_sql": "{% macro extract_email_domain(email_column) %}\n    SPLIT_PART({{ email_column }}, '@', 2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7363079, "supported_languages": null}, "macro.meu_projeto_dbt_riocard.categorize_by_date": {"name": "categorize_by_date", "resource_type": "macro", "package_name": "meu_projeto_dbt_riocard", "path": "macros/governance.sql", "original_file_path": "macros/governance.sql", "unique_id": "macro.meu_projeto_dbt_riocard.categorize_by_date", "macro_sql": "{% macro categorize_by_date(date_column, reference_date='CURRENT_DATE') %}\n    CASE \n        WHEN {{ date_column }} >= {{ reference_date }} - INTERVAL '30 days' THEN 'Recente'\n        WHEN {{ date_column }} >= {{ reference_date }} - INTERVAL '90 days' THEN 'M\u00e9dio'\n        WHEN {{ date_column }} >= {{ reference_date }} - INTERVAL '365 days' THEN 'Antigo'\n        ELSE 'Muito Antigo'\n    END\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.736444, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.736588, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.736706, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.736774, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7368362, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.736901, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.737619, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7378309, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.738264, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.738343, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.73979, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.740084, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7402592, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.740444, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.740714, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.740961, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7410638, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.741257, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.741477, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.741958, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.742072, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.742249, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.74241, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.742655, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  {% if relation.type == 'materialized_view' -%}\n    {% set relation_type = \"materialized view\" %}\n  {%- else -%}\n    {%- set relation_type = relation.type -%}\n  {%- endif -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.742871, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.743207, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.743336, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.743406, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.743519, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7436001, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.743863, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_microbatch_sql": {"name": "postgres__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_microbatch_sql", "macro_sql": "{% macro postgres__get_incremental_microbatch_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) %}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"dbt-postgres 'microbatch' requires a `unique_key` config\") }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql", "macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.744125, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    update {{ target }}\n    set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }}::text = {{ target }}.{{ columns.dbt_scd_id }}::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      {% if config.get(\"dbt_valid_to_current\") %}\n        and ({{ target }}.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ target }}.{{ columns.dbt_valid_to }} is null);\n      {% else %}\n        and {{ target }}.{{ columns.dbt_valid_to }} is null;\n      {% endif %}\n\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.744768, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.74486, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.745039, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.745127, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.745228, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.745569, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.745874, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7460501, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7463171, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7464058, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7467678, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7468748, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.74696, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.747262, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7473679, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.747496, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.747796, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.748912, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.749008, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7492821, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.749505, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.750019, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.750211, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.750293, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.750381, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.75046, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.750634, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.750805, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.750985, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7512362, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.751702, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.752922, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.753023, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7531478, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.753684, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.753782, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.753883, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.754685, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.755616, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.756917, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.757086, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.757183, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.757235, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.757317, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.757382, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.757499, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.757644, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.759733, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.759858, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7601411, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.760384, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.760718, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.760961, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7611241, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.761313, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.761634, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.761759, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.761873, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.764121, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.765423, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.765762, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.765934, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.766049, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.766401, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.766594, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.766836, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.767669, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.768585, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7688031, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.76894, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7697458, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.769896, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7702558, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.77147, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.77281, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.773352, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7736802, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.774038, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7741709, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.774554, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.775179, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7760901, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.776236, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.776609, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.776748, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7770948, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7774122, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.777775, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.777905, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7780108, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7781801, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7782881, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7784479, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.778558, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.778704, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.778807, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7788959, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.779077, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7791731, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.779346, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.781718, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7824588, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.783125, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.783807, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.784283, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.784439, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.784506, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.784677, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7847738, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.786165, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.787581, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7881658, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.788673, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.788817, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.789095, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.789202, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7892869, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.789367, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7894359, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.789523, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.789599, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.789885, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.790206, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7908769, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7911098, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7913249, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.791594, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.791744, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.791913, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7921312, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.79228, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.792539, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.792757, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.792862, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7929752, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.793089, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.793432, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.794085, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.794297, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.79444, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.794594, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.794713, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.794891, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.795006, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.795277, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7955189, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.795634, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7958028, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.796, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7962291, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.796463, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.796712, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7968938, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.797015, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.797164, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.797237, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.797394, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.797478, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.797656, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.797733, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.797886, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7979698, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7982981, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7984068, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.798572, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7986581, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.798819, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.798901, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.799343, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7994099, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.799712, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.799809, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.7998888, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8006542, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.800871, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.801069, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8012202, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.80129, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.80145, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.801535, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.801688, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.801771, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.80213, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.802239, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.802475, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8028631, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.803128, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.803236, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8033438, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.803491, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.803563, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8038778, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.803964, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.804578, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.804693, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.804824, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8049788, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.805061, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8052921, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.805387, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8054998, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.805826, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.806029, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.806222, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8063612, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8066719, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8074791, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.807897, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.808099, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.808539, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.809162, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8095539, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8096771, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.809813, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.809859, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.810179, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.810511, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.810646, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.810854, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.811043, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8112051, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8113852, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8114822, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.811627, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.811701, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.811959, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.812271, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.812379, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8126929, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.812853, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.81292, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8131042, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.813199, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.813338, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8133829, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.813542, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.813629, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8137941, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.813876, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8141398, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.814372, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.81455, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8146482, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8148181, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.814899, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.815084, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8152509, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.815397, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.815488, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.815629, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.815719, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.815873, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8159502, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.816092, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.816221, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.816385, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.816467, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.816617, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.816683, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.817844, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.817927, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818023, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818103, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8181918, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818273, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8183591, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818452, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818539, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818618, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8187, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818775, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818857, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.818934, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.819082, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.819155, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8192902, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.819351, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8195379, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8196852, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8197708, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.819987, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8201458, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.820281, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.820441, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8205261, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.820747, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.820897, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.821069, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.821147, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.821341, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.821462, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.821553, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8216782, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8219898, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.822081, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.822172, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8222358, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_postgres.postgres__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.822479, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.822582, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.822626, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.822716, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.822825, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8230982, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.823182, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.823288, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.823497, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.823672, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.823749, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8238358, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.823912, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.824329, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.824424, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.824647, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.824814, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.824956, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8251462, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8252559, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.825362, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.825506, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8258061, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8259351, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.826014, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.826286, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.826517, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8266351, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8268092, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8269691, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8270972, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.827806, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.827873, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.82797, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.828035, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8282921, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8284009, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.828471, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.828607, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8287418, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8288739, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.829001, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.829129, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.829514, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.829623, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8297658, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.829891, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.830514, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.830741, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8308501, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8309572, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8312058, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.831303, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.831414, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.83151, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.831658, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.831926, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.832417, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.832562, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.832675, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.83282, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.832984, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8330848, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.833185, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.833322, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8334389, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.833628, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.833735, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.833833, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.833934, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.834026, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.834116, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.834205, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.834323, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.83443, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.835092, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8351822, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.835356, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.835478, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.835598, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8356988, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.836333, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.836531, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8366349, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.836823, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.83695, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.837387, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.837536, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.838002, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.839515, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.839809, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.840399, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.840512, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.840565, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.840985, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.841075, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.841581, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.841799, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.8420942, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.84236, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.842401, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.842656, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.842792, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.842952, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750210278.843105, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.meu_projeto_dbt_riocard.dashboard_vendas_executivo": {"name": "dashboard_vendas_executivo", "resource_type": "exposure", "package_name": "meu_projeto_dbt_riocard", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.meu_projeto_dbt_riocard.dashboard_vendas_executivo", "fqn": ["meu_projeto_dbt_riocard", "dashboard_vendas_executivo"], "type": "dashboard", "owner": {"email": "analytics@empresa.com", "name": "Equipe Analytics"}, "description": "Dashboard executivo de vendas usado pela diretoria para acompanhar KPIs principais como receita, n\u00famero de pedidos e performance por cliente. Atualizado em tempo real e usado em reuni\u00f5es estrat\u00e9gicas.\n", "label": null, "maturity": "high", "meta": {}, "tags": ["dashboard", "vendas", "executivo"], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://dashboard.empresa.com/vendas-executivo", "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal", "model.meu_projeto_dbt_riocard.fct_pedidos"]}, "refs": [{"name": "gold_visao_geral_clientes", "package": null, "version": null}, {"name": "agg_valor_pedidos_por_cliente_mensal", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1750210279.344904}, "exposure.meu_projeto_dbt_riocard.dashboard_operacional_vendas": {"name": "dashboard_operacional_vendas", "resource_type": "exposure", "package_name": "meu_projeto_dbt_riocard", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.meu_projeto_dbt_riocard.dashboard_operacional_vendas", "fqn": ["meu_projeto_dbt_riocard", "dashboard_operacional_vendas"], "type": "dashboard", "owner": {"email": "vendas@empresa.com", "name": "Equipe Vendas"}, "description": "Dashboard operacional usado pela equipe de vendas para acompanhar pedidos em andamento, pipeline de vendas e m\u00e9tricas di\u00e1rias.\n", "label": null, "maturity": "medium", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://dashboard.empresa.com/vendas-operacional", "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.silver_pedidos", "model.meu_projeto_dbt_riocard.silver_clientes", "model.meu_projeto_dbt_riocard.dim_clientes"]}, "refs": [{"name": "silver_pedidos", "package": null, "version": null}, {"name": "silver_clientes", "package": null, "version": null}, {"name": "dim_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1750210279.346185}, "exposure.meu_projeto_dbt_riocard.api_clientes_crm": {"name": "api_clientes_crm", "resource_type": "exposure", "package_name": "meu_projeto_dbt_riocard", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.meu_projeto_dbt_riocard.api_clientes_crm", "fqn": ["meu_projeto_dbt_riocard", "api_clientes_crm"], "type": "application", "owner": {"email": "backend@empresa.com", "name": "Equipe Backend"}, "description": "API REST que serve dados de clientes para o sistema CRM. Fornece informa\u00e7\u00f5es consolidadas e enriquecidas de clientes incluindo hist\u00f3rico de pedidos e classifica\u00e7\u00f5es.\n", "label": null, "maturity": "high", "meta": {}, "tags": ["api", "crm", "clientes"], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://api.empresa.com/v1/clientes", "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"]}, "refs": [{"name": "dim_clientes", "package": null, "version": null}, {"name": "gold_visao_geral_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1750210279.347426}, "exposure.meu_projeto_dbt_riocard.relatorio_financeiro_mensal": {"name": "relatorio_financeiro_mensal", "resource_type": "exposure", "package_name": "meu_projeto_dbt_riocard", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.meu_projeto_dbt_riocard.relatorio_financeiro_mensal", "fqn": ["meu_projeto_dbt_riocard", "relatorio_financeiro_mensal"], "type": "dashboard", "owner": {"email": "financeiro@empresa.com", "name": "Equipe Financeira"}, "description": "Relat\u00f3rio financeiro mensal usado pelo departamento financeiro para an\u00e1lises de receita, inadimpl\u00eancia e proje\u00e7\u00f5es. Gerado automaticamente todo in\u00edcio de m\u00eas.\n", "label": null, "maturity": "high", "meta": {}, "tags": ["relat\u00f3rio", "financeiro", "mensal"], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://reports.empresa.com/financeiro/mensal", "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal", "model.meu_projeto_dbt_riocard.fct_pedidos", "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"]}, "refs": [{"name": "agg_valor_pedidos_por_cliente_mensal", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}, {"name": "gold_visao_geral_clientes", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1750210279.348447}, "exposure.meu_projeto_dbt_riocard.ml_model_customer_segmentation": {"name": "ml_model_customer_segmentation", "resource_type": "exposure", "package_name": "meu_projeto_dbt_riocard", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.meu_projeto_dbt_riocard.ml_model_customer_segmentation", "fqn": ["meu_projeto_dbt_riocard", "ml_model_customer_segmentation"], "type": "ml", "owner": {"email": "datascience@empresa.com", "name": "Equipe Data Science"}, "description": "Modelo de Machine Learning para segmenta\u00e7\u00e3o de clientes. Usa dados hist\u00f3ricos de pedidos e comportamento para classificar clientes em segmentos de valor.\n", "label": null, "maturity": "medium", "meta": {}, "tags": ["ml", "segmenta\u00e7\u00e3o", "clientes"], "config": {"enabled": true}, "unrendered_config": {}, "url": null, "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "model.meu_projeto_dbt_riocard.silver_pedidos_incremental"]}, "refs": [{"name": "gold_visao_geral_clientes", "package": null, "version": null}, {"name": "silver_pedidos_incremental", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1750210279.3494241}, "exposure.meu_projeto_dbt_riocard.data_export_bi_tool": {"name": "data_export_bi_tool", "resource_type": "exposure", "package_name": "meu_projeto_dbt_riocard", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.meu_projeto_dbt_riocard.data_export_bi_tool", "fqn": ["meu_projeto_dbt_riocard", "data_export_bi_tool"], "type": "application", "owner": {"email": "bi@empresa.com", "name": "Equipe BI"}, "description": "Export di\u00e1rio de dados para ferramenta de BI externa. Alimenta dashboards corporativos e relat\u00f3rios regulat\u00f3rios.\n", "label": null, "maturity": "high", "meta": {}, "tags": ["export", "bi", "corporativo"], "config": {"enabled": true}, "unrendered_config": {}, "url": null, "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos", "model.meu_projeto_dbt_riocard.silver_produtos"]}, "refs": [{"name": "dim_clientes", "package": null, "version": null}, {"name": "fct_pedidos", "package": null, "version": null}, {"name": "silver_produtos", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1750210279.350517}}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.meu_projeto_dbt_riocard.bronze_leads": ["source.meu_projeto_dbt_riocard.raw_data.leads"], "model.meu_projeto_dbt_riocard.bronze_clientes": ["source.meu_projeto_dbt_riocard.raw_data.clientes"], "model.meu_projeto_dbt_riocard.bronze_pedidos": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"], "model.meu_projeto_dbt_riocard.stg_clientes": [], "model.meu_projeto_dbt_riocard.bronze_produtos": ["source.meu_projeto_dbt_riocard.raw_data.produtos"], "model.meu_projeto_dbt_riocard.stg_pedidos": [], "model.meu_projeto_dbt_riocard.bronze_itens_pedidos": ["source.meu_projeto_dbt_riocard.public.itens_pedido"], "model.meu_projeto_dbt_riocard.silver_pedidos_incremental": ["model.meu_projeto_dbt_riocard.bronze_pedidos"], "model.meu_projeto_dbt_riocard.silver_clientes": ["model.meu_projeto_dbt_riocard.bronze_clientes"], "model.meu_projeto_dbt_riocard.fct_pedidos": ["model.meu_projeto_dbt_riocard.bronze_clientes", "model.meu_projeto_dbt_riocard.bronze_pedidos"], "model.meu_projeto_dbt_riocard.silver_produtos": ["model.meu_projeto_dbt_riocard.bronze_produtos"], "model.meu_projeto_dbt_riocard.silver_pedidos": ["model.meu_projeto_dbt_riocard.bronze_pedidos"], "model.meu_projeto_dbt_riocard.dim_clientes": ["model.meu_projeto_dbt_riocard.bronze_clientes"], "model.meu_projeto_dbt_riocard.silver_leads": ["model.meu_projeto_dbt_riocard.bronze_leads"], "model.meu_projeto_dbt_riocard.gold_deteccao_anomalias": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "model.meu_projeto_dbt_riocard.gold_metricas_avancadas_clientes": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos"], "model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "model.meu_projeto_dbt_riocard.gold_analise_coorte": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes": ["model.meu_projeto_dbt_riocard.silver_clientes", "model.meu_projeto_dbt_riocard.silver_pedidos"], "snapshot.meu_projeto_dbt_riocard.clientes_snapshot": ["source.meu_projeto_dbt_riocard.raw_data.clientes"], "test.meu_projeto_dbt_riocard.test_email_format": ["model.meu_projeto_dbt_riocard.dim_clientes"], "test.meu_projeto_dbt_riocard.test_pedido_valor_positivo": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "test.meu_projeto_dbt_riocard.test_cliente_sem_pedidos_antigos": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos"], "seed.meu_projeto_dbt_riocard.status_mapping": [], "seed.meu_projeto_dbt_riocard.categoria_produtos": [], "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-start-0": [], "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-end-0": [], "test.meu_projeto_dbt_riocard.unique_bronze_clientes_id.dcf1549ce3": ["model.meu_projeto_dbt_riocard.bronze_clientes"], "test.meu_projeto_dbt_riocard.not_null_bronze_clientes_id.547c771517": ["model.meu_projeto_dbt_riocard.bronze_clientes"], "test.meu_projeto_dbt_riocard.unique_bronze_pedidos_id.4f6947619f": ["model.meu_projeto_dbt_riocard.bronze_pedidos"], "test.meu_projeto_dbt_riocard.not_null_bronze_pedidos_id.5d4eb26602": ["model.meu_projeto_dbt_riocard.bronze_pedidos"], "test.meu_projeto_dbt_riocard.unique_bronze_produtos_id.edac519110": ["model.meu_projeto_dbt_riocard.bronze_produtos"], "test.meu_projeto_dbt_riocard.not_null_bronze_produtos_id.d28d66ad2f": ["model.meu_projeto_dbt_riocard.bronze_produtos"], "test.meu_projeto_dbt_riocard.unique_bronze_itens_pedidos_id.bbce4ef42a": ["model.meu_projeto_dbt_riocard.bronze_itens_pedidos"], "test.meu_projeto_dbt_riocard.not_null_bronze_itens_pedidos_id.652c9ca83a": ["model.meu_projeto_dbt_riocard.bronze_itens_pedidos"], "test.meu_projeto_dbt_riocard.unique_bronze_leads_id.fd294723c1": ["model.meu_projeto_dbt_riocard.bronze_leads"], "test.meu_projeto_dbt_riocard.not_null_bronze_leads_id.907c461eb7": ["model.meu_projeto_dbt_riocard.bronze_leads"], "test.meu_projeto_dbt_riocard.unique_dim_clientes_cliente_id.3b564a3bce": ["model.meu_projeto_dbt_riocard.dim_clientes"], "test.meu_projeto_dbt_riocard.not_null_dim_clientes_cliente_id.72dd473286": ["model.meu_projeto_dbt_riocard.dim_clientes"], "test.meu_projeto_dbt_riocard.not_null_dim_clientes_nome.6b2c845e9c": ["model.meu_projeto_dbt_riocard.dim_clientes"], "test.meu_projeto_dbt_riocard.not_null_dim_clientes_email_original.84998ac711": ["model.meu_projeto_dbt_riocard.dim_clientes"], "test.meu_projeto_dbt_riocard.unique_dim_clientes_email_original.d0a55eb8fa": ["model.meu_projeto_dbt_riocard.dim_clientes"], "test.meu_projeto_dbt_riocard.unique_fct_pedidos_pedido_id.a986e612b4": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_pedido_id.509f9f9649": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_cliente_id.815a071273": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "test.meu_projeto_dbt_riocard.relationships_fct_pedidos_cliente_id__cliente_id__ref_dim_clientes_.c4372db2b8": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos"], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_numero_pedido.cdfbeca68c": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_bruto.72f27b5c49": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_liquido.22f5b0819e": ["model.meu_projeto_dbt_riocard.fct_pedidos"], "test.meu_projeto_dbt_riocard.unique_silver_clientes_cliente_id_origem.65a8569d81": ["model.meu_projeto_dbt_riocard.silver_clientes"], "test.meu_projeto_dbt_riocard.not_null_silver_clientes_cliente_id_origem.33f2448b30": ["model.meu_projeto_dbt_riocard.silver_clientes"], "test.meu_projeto_dbt_riocard.unique_silver_pedidos_pedido_id_origem.9235b7a6f8": ["model.meu_projeto_dbt_riocard.silver_pedidos"], "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_pedido_id_origem.884b0aa17a": ["model.meu_projeto_dbt_riocard.silver_pedidos"], "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_cliente_id_origem.a61cdcdd1b": ["model.meu_projeto_dbt_riocard.silver_pedidos"], "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_bruto_decimal.16562da75f": ["model.meu_projeto_dbt_riocard.silver_pedidos"], "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_liquido_decimal.67d20274ea": ["model.meu_projeto_dbt_riocard.silver_pedidos"], "test.meu_projeto_dbt_riocard.not_null_agg_valor_pedidos_por_cliente_mensal_valor_total_pedidos_mensal.0ff5804f30": ["model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal"], "test.meu_projeto_dbt_riocard.unique_gold_visao_geral_clientes_cliente_id_origem.50717aad5e": ["model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"], "test.meu_projeto_dbt_riocard.not_null_gold_visao_geral_clientes_cliente_id_origem.efd5526208": ["model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_id.499151fbfb": ["source.meu_projeto_dbt_riocard.raw_data.clientes"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_id.8782a746ba": ["source.meu_projeto_dbt_riocard.raw_data.clientes"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_nome.273efb8a8d": ["source.meu_projeto_dbt_riocard.raw_data.clientes"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_email.44aedb381f": ["source.meu_projeto_dbt_riocard.raw_data.clientes"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_email.0f03d70749": ["source.meu_projeto_dbt_riocard.raw_data.clientes"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_cpf.354dd2c182": ["source.meu_projeto_dbt_riocard.raw_data.clientes"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_id.e6246ff199": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_id.72908ce22e": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_cliente_id.f4c584d497": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"], "test.meu_projeto_dbt_riocard.source_relationships_raw_data_pedidos_cliente_id__id__source_raw_data_clientes_.363a4ca76e": ["source.meu_projeto_dbt_riocard.raw_data.clientes", "source.meu_projeto_dbt_riocard.raw_data.pedidos"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_numero_pedido.28ef3ec538": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_numero_pedido.bab169a2d5": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_valor_bruto.ddd99f0fd0": ["source.meu_projeto_dbt_riocard.raw_data.pedidos"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_id.abae4da5b0": ["source.meu_projeto_dbt_riocard.raw_data.produtos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_id.1ee2452ad4": ["source.meu_projeto_dbt_riocard.raw_data.produtos"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_codigo_produto.fa6b620a00": ["source.meu_projeto_dbt_riocard.raw_data.produtos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_codigo_produto.16f161d956": ["source.meu_projeto_dbt_riocard.raw_data.produtos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_nome.b05ab6be0f": ["source.meu_projeto_dbt_riocard.raw_data.produtos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_preco_venda.79bfcb1e90": ["source.meu_projeto_dbt_riocard.raw_data.produtos"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_itens_pedido_id.6612935370": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_id.0735e6a474": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_pedido_id.545407d4d3": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"], "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_pedido_id__id__source_raw_data_pedidos_.e36cd4996b": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido", "source.meu_projeto_dbt_riocard.raw_data.pedidos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_produto_id.41df13a48a": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"], "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_produto_id__id__source_raw_data_produtos_.c75cf61cc3": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido", "source.meu_projeto_dbt_riocard.raw_data.produtos"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_quantidade.79e80b1a6f": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_preco_unitario.5cae06f02b": ["source.meu_projeto_dbt_riocard.raw_data.itens_pedido"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_campanhas_marketing_id.4e0e4d9670": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_id.87f9751567": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_nome.9e31422d95": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_tipo.ebe0fdae79": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_data_inicio.30159eeeac": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing"], "test.meu_projeto_dbt_riocard.source_unique_raw_data_leads_id.4cec3aa79e": ["source.meu_projeto_dbt_riocard.raw_data.leads"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_id.1f635302ef": ["source.meu_projeto_dbt_riocard.raw_data.leads"], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_nome.9df6951241": ["source.meu_projeto_dbt_riocard.raw_data.leads"], "test.meu_projeto_dbt_riocard.source_relationships_raw_data_leads_campanha_id__id__source_raw_data_campanhas_marketing_.dda67d7fec": ["source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing", "source.meu_projeto_dbt_riocard.raw_data.leads"], "source.meu_projeto_dbt_riocard.public.clientes": [], "source.meu_projeto_dbt_riocard.public.pedidos": [], "source.meu_projeto_dbt_riocard.public.produtos": [], "source.meu_projeto_dbt_riocard.public.itens_pedido": [], "source.meu_projeto_dbt_riocard.public.campanhas_marketing": [], "source.meu_projeto_dbt_riocard.public.leads": [], "source.meu_projeto_dbt_riocard.raw_data.clientes": [], "source.meu_projeto_dbt_riocard.raw_data.pedidos": [], "source.meu_projeto_dbt_riocard.raw_data.produtos": [], "source.meu_projeto_dbt_riocard.raw_data.itens_pedido": [], "source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing": [], "source.meu_projeto_dbt_riocard.raw_data.leads": [], "exposure.meu_projeto_dbt_riocard.dashboard_vendas_executivo": ["model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal", "model.meu_projeto_dbt_riocard.fct_pedidos", "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"], "exposure.meu_projeto_dbt_riocard.dashboard_operacional_vendas": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.silver_clientes", "model.meu_projeto_dbt_riocard.silver_pedidos"], "exposure.meu_projeto_dbt_riocard.api_clientes_crm": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"], "exposure.meu_projeto_dbt_riocard.relatorio_financeiro_mensal": ["model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal", "model.meu_projeto_dbt_riocard.fct_pedidos", "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes"], "exposure.meu_projeto_dbt_riocard.ml_model_customer_segmentation": ["model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "model.meu_projeto_dbt_riocard.silver_pedidos_incremental"], "exposure.meu_projeto_dbt_riocard.data_export_bi_tool": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos", "model.meu_projeto_dbt_riocard.silver_produtos"]}, "child_map": {"model.meu_projeto_dbt_riocard.bronze_leads": ["model.meu_projeto_dbt_riocard.silver_leads", "test.meu_projeto_dbt_riocard.not_null_bronze_leads_id.907c461eb7", "test.meu_projeto_dbt_riocard.unique_bronze_leads_id.fd294723c1"], "model.meu_projeto_dbt_riocard.bronze_clientes": ["model.meu_projeto_dbt_riocard.dim_clientes", "model.meu_projeto_dbt_riocard.fct_pedidos", "model.meu_projeto_dbt_riocard.silver_clientes", "test.meu_projeto_dbt_riocard.not_null_bronze_clientes_id.547c771517", "test.meu_projeto_dbt_riocard.unique_bronze_clientes_id.dcf1549ce3"], "model.meu_projeto_dbt_riocard.bronze_pedidos": ["model.meu_projeto_dbt_riocard.fct_pedidos", "model.meu_projeto_dbt_riocard.silver_pedidos", "model.meu_projeto_dbt_riocard.silver_pedidos_incremental", "test.meu_projeto_dbt_riocard.not_null_bronze_pedidos_id.5d4eb26602", "test.meu_projeto_dbt_riocard.unique_bronze_pedidos_id.4f6947619f"], "model.meu_projeto_dbt_riocard.stg_clientes": [], "model.meu_projeto_dbt_riocard.bronze_produtos": ["model.meu_projeto_dbt_riocard.silver_produtos", "test.meu_projeto_dbt_riocard.not_null_bronze_produtos_id.d28d66ad2f", "test.meu_projeto_dbt_riocard.unique_bronze_produtos_id.edac519110"], "model.meu_projeto_dbt_riocard.stg_pedidos": [], "model.meu_projeto_dbt_riocard.bronze_itens_pedidos": ["test.meu_projeto_dbt_riocard.not_null_bronze_itens_pedidos_id.652c9ca83a", "test.meu_projeto_dbt_riocard.unique_bronze_itens_pedidos_id.bbce4ef42a"], "model.meu_projeto_dbt_riocard.silver_pedidos_incremental": ["exposure.meu_projeto_dbt_riocard.ml_model_customer_segmentation"], "model.meu_projeto_dbt_riocard.silver_clientes": ["exposure.meu_projeto_dbt_riocard.dashboard_operacional_vendas", "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "test.meu_projeto_dbt_riocard.not_null_silver_clientes_cliente_id_origem.33f2448b30", "test.meu_projeto_dbt_riocard.unique_silver_clientes_cliente_id_origem.65a8569d81"], "model.meu_projeto_dbt_riocard.fct_pedidos": ["exposure.meu_projeto_dbt_riocard.dashboard_vendas_executivo", "exposure.meu_projeto_dbt_riocard.data_export_bi_tool", "exposure.meu_projeto_dbt_riocard.relatorio_financeiro_mensal", "model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal", "model.meu_projeto_dbt_riocard.gold_analise_coorte", "model.meu_projeto_dbt_riocard.gold_deteccao_anomalias", "model.meu_projeto_dbt_riocard.gold_metricas_avancadas_clientes", "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_cliente_id.815a071273", "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_numero_pedido.cdfbeca68c", "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_pedido_id.509f9f9649", "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_bruto.72f27b5c49", "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_liquido.22f5b0819e", "test.meu_projeto_dbt_riocard.relationships_fct_pedidos_cliente_id__cliente_id__ref_dim_clientes_.c4372db2b8", "test.meu_projeto_dbt_riocard.test_cliente_sem_pedidos_antigos", "test.meu_projeto_dbt_riocard.test_pedido_valor_positivo", "test.meu_projeto_dbt_riocard.unique_fct_pedidos_pedido_id.a986e612b4"], "model.meu_projeto_dbt_riocard.silver_produtos": ["exposure.meu_projeto_dbt_riocard.data_export_bi_tool"], "model.meu_projeto_dbt_riocard.silver_pedidos": ["exposure.meu_projeto_dbt_riocard.dashboard_operacional_vendas", "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes", "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_cliente_id_origem.a61cdcdd1b", "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_pedido_id_origem.884b0aa17a", "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_bruto_decimal.16562da75f", "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_liquido_decimal.67d20274ea", "test.meu_projeto_dbt_riocard.unique_silver_pedidos_pedido_id_origem.9235b7a6f8"], "model.meu_projeto_dbt_riocard.dim_clientes": ["exposure.meu_projeto_dbt_riocard.api_clientes_crm", "exposure.meu_projeto_dbt_riocard.dashboard_operacional_vendas", "exposure.meu_projeto_dbt_riocard.data_export_bi_tool", "model.meu_projeto_dbt_riocard.gold_metricas_avancadas_clientes", "test.meu_projeto_dbt_riocard.not_null_dim_clientes_cliente_id.72dd473286", "test.meu_projeto_dbt_riocard.not_null_dim_clientes_email_original.84998ac711", "test.meu_projeto_dbt_riocard.not_null_dim_clientes_nome.6b2c845e9c", "test.meu_projeto_dbt_riocard.relationships_fct_pedidos_cliente_id__cliente_id__ref_dim_clientes_.c4372db2b8", "test.meu_projeto_dbt_riocard.test_cliente_sem_pedidos_antigos", "test.meu_projeto_dbt_riocard.test_email_format", "test.meu_projeto_dbt_riocard.unique_dim_clientes_cliente_id.3b564a3bce", "test.meu_projeto_dbt_riocard.unique_dim_clientes_email_original.d0a55eb8fa"], "model.meu_projeto_dbt_riocard.silver_leads": [], "model.meu_projeto_dbt_riocard.gold_deteccao_anomalias": [], "model.meu_projeto_dbt_riocard.gold_metricas_avancadas_clientes": [], "model.meu_projeto_dbt_riocard.agg_valor_pedidos_por_cliente_mensal": ["exposure.meu_projeto_dbt_riocard.dashboard_vendas_executivo", "exposure.meu_projeto_dbt_riocard.relatorio_financeiro_mensal", "test.meu_projeto_dbt_riocard.not_null_agg_valor_pedidos_por_cliente_mensal_valor_total_pedidos_mensal.0ff5804f30"], "model.meu_projeto_dbt_riocard.gold_analise_coorte": [], "model.meu_projeto_dbt_riocard.gold_visao_geral_clientes": ["exposure.meu_projeto_dbt_riocard.api_clientes_crm", "exposure.meu_projeto_dbt_riocard.dashboard_vendas_executivo", "exposure.meu_projeto_dbt_riocard.ml_model_customer_segmentation", "exposure.meu_projeto_dbt_riocard.relatorio_financeiro_mensal", "test.meu_projeto_dbt_riocard.not_null_gold_visao_geral_clientes_cliente_id_origem.efd5526208", "test.meu_projeto_dbt_riocard.unique_gold_visao_geral_clientes_cliente_id_origem.50717aad5e"], "snapshot.meu_projeto_dbt_riocard.clientes_snapshot": [], "test.meu_projeto_dbt_riocard.test_email_format": [], "test.meu_projeto_dbt_riocard.test_pedido_valor_positivo": [], "test.meu_projeto_dbt_riocard.test_cliente_sem_pedidos_antigos": [], "seed.meu_projeto_dbt_riocard.status_mapping": [], "seed.meu_projeto_dbt_riocard.categoria_produtos": [], "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-start-0": [], "operation.meu_projeto_dbt_riocard.meu_projeto_dbt_riocard-on-run-end-0": [], "test.meu_projeto_dbt_riocard.unique_bronze_clientes_id.dcf1549ce3": [], "test.meu_projeto_dbt_riocard.not_null_bronze_clientes_id.547c771517": [], "test.meu_projeto_dbt_riocard.unique_bronze_pedidos_id.4f6947619f": [], "test.meu_projeto_dbt_riocard.not_null_bronze_pedidos_id.5d4eb26602": [], "test.meu_projeto_dbt_riocard.unique_bronze_produtos_id.edac519110": [], "test.meu_projeto_dbt_riocard.not_null_bronze_produtos_id.d28d66ad2f": [], "test.meu_projeto_dbt_riocard.unique_bronze_itens_pedidos_id.bbce4ef42a": [], "test.meu_projeto_dbt_riocard.not_null_bronze_itens_pedidos_id.652c9ca83a": [], "test.meu_projeto_dbt_riocard.unique_bronze_leads_id.fd294723c1": [], "test.meu_projeto_dbt_riocard.not_null_bronze_leads_id.907c461eb7": [], "test.meu_projeto_dbt_riocard.unique_dim_clientes_cliente_id.3b564a3bce": [], "test.meu_projeto_dbt_riocard.not_null_dim_clientes_cliente_id.72dd473286": [], "test.meu_projeto_dbt_riocard.not_null_dim_clientes_nome.6b2c845e9c": [], "test.meu_projeto_dbt_riocard.not_null_dim_clientes_email_original.84998ac711": [], "test.meu_projeto_dbt_riocard.unique_dim_clientes_email_original.d0a55eb8fa": [], "test.meu_projeto_dbt_riocard.unique_fct_pedidos_pedido_id.a986e612b4": [], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_pedido_id.509f9f9649": [], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_cliente_id.815a071273": [], "test.meu_projeto_dbt_riocard.relationships_fct_pedidos_cliente_id__cliente_id__ref_dim_clientes_.c4372db2b8": [], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_numero_pedido.cdfbeca68c": [], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_bruto.72f27b5c49": [], "test.meu_projeto_dbt_riocard.not_null_fct_pedidos_valor_liquido.22f5b0819e": [], "test.meu_projeto_dbt_riocard.unique_silver_clientes_cliente_id_origem.65a8569d81": [], "test.meu_projeto_dbt_riocard.not_null_silver_clientes_cliente_id_origem.33f2448b30": [], "test.meu_projeto_dbt_riocard.unique_silver_pedidos_pedido_id_origem.9235b7a6f8": [], "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_pedido_id_origem.884b0aa17a": [], "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_cliente_id_origem.a61cdcdd1b": [], "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_bruto_decimal.16562da75f": [], "test.meu_projeto_dbt_riocard.not_null_silver_pedidos_valor_liquido_decimal.67d20274ea": [], "test.meu_projeto_dbt_riocard.not_null_agg_valor_pedidos_por_cliente_mensal_valor_total_pedidos_mensal.0ff5804f30": [], "test.meu_projeto_dbt_riocard.unique_gold_visao_geral_clientes_cliente_id_origem.50717aad5e": [], "test.meu_projeto_dbt_riocard.not_null_gold_visao_geral_clientes_cliente_id_origem.efd5526208": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_id.499151fbfb": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_id.8782a746ba": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_nome.273efb8a8d": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_email.44aedb381f": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_email.0f03d70749": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_cpf.354dd2c182": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_id.e6246ff199": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_id.72908ce22e": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_cliente_id.f4c584d497": [], "test.meu_projeto_dbt_riocard.source_relationships_raw_data_pedidos_cliente_id__id__source_raw_data_clientes_.363a4ca76e": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_numero_pedido.28ef3ec538": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_numero_pedido.bab169a2d5": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_valor_bruto.ddd99f0fd0": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_id.abae4da5b0": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_id.1ee2452ad4": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_codigo_produto.fa6b620a00": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_codigo_produto.16f161d956": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_nome.b05ab6be0f": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_preco_venda.79bfcb1e90": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_itens_pedido_id.6612935370": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_id.0735e6a474": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_pedido_id.545407d4d3": [], "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_pedido_id__id__source_raw_data_pedidos_.e36cd4996b": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_produto_id.41df13a48a": [], "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_produto_id__id__source_raw_data_produtos_.c75cf61cc3": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_quantidade.79e80b1a6f": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_preco_unitario.5cae06f02b": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_campanhas_marketing_id.4e0e4d9670": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_id.87f9751567": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_nome.9e31422d95": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_tipo.ebe0fdae79": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_data_inicio.30159eeeac": [], "test.meu_projeto_dbt_riocard.source_unique_raw_data_leads_id.4cec3aa79e": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_id.1f635302ef": [], "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_nome.9df6951241": [], "test.meu_projeto_dbt_riocard.source_relationships_raw_data_leads_campanha_id__id__source_raw_data_campanhas_marketing_.dda67d7fec": [], "source.meu_projeto_dbt_riocard.public.clientes": [], "source.meu_projeto_dbt_riocard.public.pedidos": [], "source.meu_projeto_dbt_riocard.public.produtos": [], "source.meu_projeto_dbt_riocard.public.itens_pedido": ["model.meu_projeto_dbt_riocard.bronze_itens_pedidos"], "source.meu_projeto_dbt_riocard.public.campanhas_marketing": [], "source.meu_projeto_dbt_riocard.public.leads": [], "source.meu_projeto_dbt_riocard.raw_data.clientes": ["model.meu_projeto_dbt_riocard.bronze_clientes", "snapshot.meu_projeto_dbt_riocard.clientes_snapshot", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_email.0f03d70749", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_id.8782a746ba", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_clientes_nome.273efb8a8d", "test.meu_projeto_dbt_riocard.source_relationships_raw_data_pedidos_cliente_id__id__source_raw_data_clientes_.363a4ca76e", "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_cpf.354dd2c182", "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_email.44aedb381f", "test.meu_projeto_dbt_riocard.source_unique_raw_data_clientes_id.499151fbfb"], "source.meu_projeto_dbt_riocard.raw_data.pedidos": ["model.meu_projeto_dbt_riocard.bronze_pedidos", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_cliente_id.f4c584d497", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_id.72908ce22e", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_numero_pedido.bab169a2d5", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_pedidos_valor_bruto.ddd99f0fd0", "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_pedido_id__id__source_raw_data_pedidos_.e36cd4996b", "test.meu_projeto_dbt_riocard.source_relationships_raw_data_pedidos_cliente_id__id__source_raw_data_clientes_.363a4ca76e", "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_id.e6246ff199", "test.meu_projeto_dbt_riocard.source_unique_raw_data_pedidos_numero_pedido.28ef3ec538"], "source.meu_projeto_dbt_riocard.raw_data.produtos": ["model.meu_projeto_dbt_riocard.bronze_produtos", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_codigo_produto.16f161d956", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_id.1ee2452ad4", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_nome.b05ab6be0f", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_produtos_preco_venda.79bfcb1e90", "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_produto_id__id__source_raw_data_produtos_.c75cf61cc3", "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_codigo_produto.fa6b620a00", "test.meu_projeto_dbt_riocard.source_unique_raw_data_produtos_id.abae4da5b0"], "source.meu_projeto_dbt_riocard.raw_data.itens_pedido": ["test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_id.0735e6a474", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_pedido_id.545407d4d3", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_preco_unitario.5cae06f02b", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_produto_id.41df13a48a", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_itens_pedido_quantidade.79e80b1a6f", "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_pedido_id__id__source_raw_data_pedidos_.e36cd4996b", "test.meu_projeto_dbt_riocard.source_relationships_raw_data_itens_pedido_produto_id__id__source_raw_data_produtos_.c75cf61cc3", "test.meu_projeto_dbt_riocard.source_unique_raw_data_itens_pedido_id.6612935370"], "source.meu_projeto_dbt_riocard.raw_data.campanhas_marketing": ["test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_data_inicio.30159eeeac", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_id.87f9751567", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_nome.9e31422d95", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_campanhas_marketing_tipo.ebe0fdae79", "test.meu_projeto_dbt_riocard.source_relationships_raw_data_leads_campanha_id__id__source_raw_data_campanhas_marketing_.dda67d7fec", "test.meu_projeto_dbt_riocard.source_unique_raw_data_campanhas_marketing_id.4e0e4d9670"], "source.meu_projeto_dbt_riocard.raw_data.leads": ["model.meu_projeto_dbt_riocard.bronze_leads", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_id.1f635302ef", "test.meu_projeto_dbt_riocard.source_not_null_raw_data_leads_nome.9df6951241", "test.meu_projeto_dbt_riocard.source_relationships_raw_data_leads_campanha_id__id__source_raw_data_campanhas_marketing_.dda67d7fec", "test.meu_projeto_dbt_riocard.source_unique_raw_data_leads_id.4cec3aa79e"], "exposure.meu_projeto_dbt_riocard.dashboard_vendas_executivo": [], "exposure.meu_projeto_dbt_riocard.dashboard_operacional_vendas": [], "exposure.meu_projeto_dbt_riocard.api_clientes_crm": [], "exposure.meu_projeto_dbt_riocard.relatorio_financeiro_mensal": [], "exposure.meu_projeto_dbt_riocard.ml_model_customer_segmentation": [], "exposure.meu_projeto_dbt_riocard.data_export_bi_tool": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}