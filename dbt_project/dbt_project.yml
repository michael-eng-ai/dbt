name: 'meu_projeto_dbt_riocard'
version: '1.0.0'
config-version: 2

# Este é o nome do perfil que o dbt usará para se conectar ao seu banco de dados.
# Ele deve corresponder ao nome do perfil definido em `profiles.yml`.
profile: 'default' # Perfil para rodar via CLI local ou no container dbt_runner

# Define onde o dbt deve procurar por diferentes tipos de arquivos.
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

docs-paths: ["docs"]
asset-paths: ["assets"]

target-path: "target"  # diretório onde os artefatos compilados serão armazenados
clean-targets: # diretórios a serem limpos pelo comando `dbt clean`
  - "target"
  - "dbt_packages"
  - "logs"

# Configurações para modelos. Aqui você pode definir configurações globais
# para todos os modelos ou para modelos dentro de subdiretórios específicos.
models:
  meu_projeto_dbt_riocard:
    # Configuração para a camada Staging (dados brutos do Airbyte)
    staging:
      materialized: view
      schema: staging
      +tags:
        - "staging"
        - "raw"

    # Configuração para a camada Bronze (dados brutos limpos e normalizados)
    bronze:
      +materialized: view
      +schema: bronze
      +tags:
        - "bronze"
        - "raw"

    # Configuração para a camada Silver (dados limpos e transformados)
    silver:
      materialized: table
      schema: silver
      +tags:
        - "silver"
        - "transformed"

    # Configuração para a camada Gold (dados agregados e prontos para consumo)
    gold:
      materialized: table
      schema: gold
      +tags:
        - "gold"
        - "analytics"

# Configurações para seeds (arquivos CSV que podem ser carregados no banco de dados)
seeds:
  meu_projeto_dbt_riocard:
    +schema: raw_seeds # Schema para os seeds
    +quote_columns: false

# Configurações para testes
tests:
  meu_projeto_dbt_riocard:
    +severity: warn # Define a severidade padrão para falhas em testes (warn ou error)

# Variáveis do projeto (podem ser usadas em modelos e configurações)
vars:
  min_order_date: '2020-01-01'

# Hooks para executar SQL antes ou depois de certas operações do dbt
on-run-start:
  - "{{ log('Iniciando execução do dbt - ' ~ modules.datetime.datetime.now(), info=True) }}"
on-run-end:
  - "{{ log('Execução do dbt finalizada - ' ~ modules.datetime.datetime.now(), info=True) }}"
